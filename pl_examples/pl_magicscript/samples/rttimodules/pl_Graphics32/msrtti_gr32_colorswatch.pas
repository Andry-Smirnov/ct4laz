{***************************************************************************
               Copyright (c) PilotLogic Software House
                       All rights reserved
 
   MagicScript Import File for Library Graphics32
   Build from : GR32_ColorSwatch.pas file
   Generated by MagicScript LibraryBuilder 7.0
   at : 7/10/2019 7:30:21
   This file is part of CodeTyphon Studio (https://www.pilotlogic.com/)
 ***************************************************************************}
 
Unit msrtti_GR32_ColorSwatch;
 
{$MODE DELPHI}{$H+}
 
Interface
 
Uses
 Classes,
 Controls,
 Forms,
 GR32,
 GR32_Backends,
 GR32_Blend,
 GR32_Containers,
 GR32_Math,
 GR32_VectorUtils,
 Graphics,
 LCLIntf,
 LCLType,
 LMessages,
 Math,
 Types,
 GR32_ColorSwatch,
 mscoreengine;

Type
 TmscrRTTILibrary_GR32_ColorSwatch=class(TComponent);

Implementation

Type
 TLibrary_GR32_ColorSwatch=class(TmscrRTTILibrary)
  private
    function  CallMethod(aInstance: TObject; aClassType: TClass; const aMethodName: string; aCallVar: TmscrVarForMethod): variant;
    procedure RegisterClasses(AScript: TmscrScript);
    function  ClassCallMethod(aInstance: TObject; aClassType: TClass; const aMethodName: string; aCallVar: TmscrVarForMethod): variant;
    function  ClassGetProp(aInstance: TObject; aClassType: TClass; const aPropName: String; aCallVar: TmscrEngProperty): Variant;
    procedure ClassSetProp(aInstance: TObject; aClassType: TClass; const aPropName: String; aValue: Variant; aCallVar: TmscrEngProperty);
  public
    constructor Create(AScript: TmscrScript); override;
  end;
 
constructor TLibrary_GR32_ColorSwatch.Create(AScript: TmscrScript);
begin
  inherited Create(AScript);
  
  RegisterClasses(AScript);
end;
 
function TLibrary_GR32_ColorSwatch.CallMethod(aInstance: TObject; aClassType: TClass; const aMethodName: string; aCallVar: TmscrVarForMethod): variant;
begin
  Result := 0;
  if aInstance<>NIL then
    Result:=ClassCallMethod(aInstance, aClassType, aMethodName, aCallVar);
end;
 
procedure TLibrary_GR32_ColorSwatch.RegisterClasses(AScript: TmscrScript);
begin
  with AScript do
  begin
 
    with Register_Class(TColorSwatch,'TCustomColorSwatch') do
    begin
    end;
    with Register_Class(TCustomColorSwatch,'TCustomControl') do
    begin
      Register_Constructor('constructor Create(AOwner: TComponent);', ClassCallMethod);
      Register_Method('procedure Invalidate;', ClassCallMethod);
      Register_Method('procedure Resize;', ClassCallMethod);
      Register_Property('Border','Boolean', ClassGetProp,ClassSetProp);
      Register_Property('Color','TColor32', ClassGetProp,ClassSetProp);
    end;

  end;
end;
 
function TLibrary_GR32_ColorSwatch.ClassCallMethod(aInstance: TObject; aClassType: TClass; const aMethodName: string; aCallVar: TmscrVarForMethod): variant;
begin
  Result := 0;

  if aClassType=TCustomColorSwatch then begin
    if aMethodName='CREATE' then begin
         Result:=fmscrInteger(TCustomColorSwatch(aInstance).Create(TComponent(fmscrInteger(aCallVar.Params[0])))); exit; end;
    if aMethodName='INVALIDATE' then begin
         TCustomColorSwatch(aInstance).Invalidate; exit; end;
    if aMethodName='RESIZE' then begin
         TCustomColorSwatch(aInstance).Resize; exit; end;
   exit; end;
 

end;
 
function TLibrary_GR32_ColorSwatch.ClassGetProp(aInstance: TObject; aClassType: TClass; const aPropName: String; aCallVar: TmscrEngProperty): Variant;
begin
  Result := 0;
 
  if aClassType=TColorSwatch then begin
  exit; end;
 
  if aClassType=TCustomColorSwatch then begin
    if aPropName = 'BORDER' then begin
      Result:=TCustomColorSwatch(aInstance).Border; exit; end;
    if aPropName = 'COLOR' then begin
      Result:=TCustomColorSwatch(aInstance).Color; exit; end;
  exit; end;
 

end;
 
procedure TLibrary_GR32_ColorSwatch.ClassSetProp(aInstance: TObject; aClassType: TClass; const aPropName: String; aValue: Variant; aCallVar: TmscrEngProperty);
begin
 
  if aClassType=TColorSwatch then begin
  exit; end;
 
  if aClassType=TCustomColorSwatch then begin
    if aPropName = 'BORDER' then begin
      TCustomColorSwatch(aInstance).Border:=aValue; exit; end;
    if aPropName = 'COLOR' then begin
      TCustomColorSwatch(aInstance).Color:=Cardinal(aValue); exit; end;
  exit; end;
 

end;
 
 
//===============================================
Initialization
  MSCR_RTTILibraries.Add(TLibrary_GR32_ColorSwatch);
Finalization
  MSCR_RTTILibraries.Remove(TLibrary_GR32_ColorSwatch);
End.
