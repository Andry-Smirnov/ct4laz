{***********************************************************************************
                     Copyright (C) PilotLogic Software House

Package pl_Vulkan
This file is part of CodeTyphon Studio (http://www.pilotlogic.com/)
************************************************************************************}
{
 This file generated from the Khronos Vulkan XML API Registry
 at 7/9/2020 11:10:35
}

unit vulkanlib;

{$mode objfpc}{$H+}

{$MINENUMSIZE 4}
{$PACKSET 4}

{$I vulkanlib.inc}

interface

uses
     dynlibs,
     {$if defined(Windows)}
      Windows,
     {$elseif defined(Unix)}
      BaseUnix,UnixType,dl,
     {$ifend}
     {$if defined(XLIB) and defined(VulkanUseXLIBUnits)}x,xlib,{$ifend}
     {$if defined(XCB) and defined(VulkanUseXCBUnits)}xcb,{$ifend}
     {$if defined(Mir) and defined(VulkanUseMirUnits)}Mir,{$ifend}
     {$if defined(Wayland) and defined(VulkanUseWaylandUnits)}Wayland,{$ifend}
     {$if defined(Android) and defined(VulkanUseAndroidUnits)}Android,{$ifend}
     SysUtils;

Const
{$IFDEF VK_USE_PLATFORM_ANDROID_KHR}
  VK_DEFAULT_LIB_NAME = 'libvulkan.so';
{$ENDIF}
{$IFDEF VK_USE_PLATFORM_WIN32_KHR}
  VK_DEFAULT_LIB_NAME = 'vulkan-1.dll';
{$ENDIF}
{$IFDEF VK_USE_PLATFORM_MIR_KHR}
  VK_DEFAULT_LIB_NAME = 'libvulkan.so.1';
{$ENDIF}
{$IFDEF VK_USE_PLATFORM_WAYLAND_KHR}
  VK_DEFAULT_LIB_NAME = 'libvulkan.so.1';
{$ENDIF}
{$IFDEF VK_USE_PLATFORM_XLIB_KHR}
  VK_DEFAULT_LIB_NAME = 'libvulkan.so.1';
{$ENDIF}
{$IFDEF VK_USE_PLATFORM_XCB_KHR}
  VK_DEFAULT_LIB_NAME = 'libvulkan.so.1';
{$ENDIF}

type
     TVkHandle = Pointer;

     TVkInt8=Int8;
     PPVkInt8=^PVkInt8;
     PVkInt8=^TVkInt8;

     TVkUInt8=UInt8;
     PPVkUInt8=^PVkUInt8;
     PVkUInt8=^TVkUInt8;

     TVkInt16=Int16;
     PPVkInt16=^PVkInt16;
     PVkInt16=^TVkInt16;

     TVkUInt16=UInt16;
     PPVkUInt16=^PVkUInt16;
     PVkUInt16=^TVkUInt16;

     TVkInt32=Int32;
     PPVkInt32=^PVkInt32;
     PVkInt32=^TVkInt32;

     TVkUInt32=UInt32;
     PPVkUInt32=^PVkUInt32;
     PVkUInt32=^TVkUInt32;

     TVkInt64=Int64;
     PPVkInt64=^PVkInt64;
     PVkInt64=^TVkInt64;

     TVkUInt64=UInt64;
     PPVkUInt64=^PVkUInt64;
     PVkUInt64=^TVkUInt64;

     TVkChar=AnsiChar;
     PPVkChar=^PVkChar;
     PVkChar=PAnsiChar;

     TVkPointer=Pointer;
     PPVkPointer=^PVkPointer;
     PVkPointer=^TVkPointer;

     PPVkVoid=^PVkVoid;
     PVkVoid=Pointer;

     TVkHalfFloat=TVkUInt16;
     PPVkHalfFloat=^PVkHalfFloat;
     PVkHalfFloat=^TVkHalfFloat;

     TVkFloat=Single;
     PPVkFloat=^PVkFloat;
     PVkFloat=^TVkFloat;

     TVkDouble=Double;
     PPVkDouble=^PVkDouble;
     PVkDouble=^TVkDouble;

     PPVkPtrUInt=^PVkPtrUInt;
     PPVkPtrInt=^PVkPtrInt;
     PVkPtrUInt=^TVkPtrUInt;
     PVkPtrInt=^TVkPtrInt;

     TVkPtrUInt=PtrUInt;
     TVkPtrInt=PtrInt;

     TVkSizeUInt=TVkPtrUInt;
     PPVkSizeUInt=^PVkSizeUInt;
     PVkSizeUInt=^TVkSizeUInt;

     PPVkSizeInt=^PVkSizeInt;
     PVkSizeInt=^TVkSizeInt;
     TVkSizeInt=TVkPtrInt;

     TVkSize=TVkPtrUInt;
     PPVkSize=^PVkSizeUInt;
     PVkSize=^TVkSizeUInt;

     PPVkPtrDiff=^PVkPtrDiff;
     PVkPtrDiff=^TVkPtrDiff;
     TVkPtrDiff=TVkPtrInt;

     PPVkCharString=^PVkCharString;
     PVkCharString=^TVkCharString;
     TVkCharString=AnsiString;

     Tzx_handle_t=THandle;

     TGgpStreamDescriptor=PtrInt;  // vulkan_types.h
     TGgpFrameToken=PtrInt;        // vulkan_types.h

     PIDirectFB       =Pointer;    // directfb.h
     PIDirectFBSurface=Pointer;    // directfb.h

     PCAMetalLayer=Pointer;

    {$IFDEF Windows}
     THMONITOR=HMONITOR;
    {$ELSE}
     THMONITOR=THandle;
    {$ENDIF}

     TVkVersion = TVkInt32;

{$ifdef Android}
     PPVkAndroidANativeWindow=^PVkAndroidANativeWindow;
     PVkAndroidANativeWindow={$ifdef VulkanUseAndroidUnits}PANativeWindow{$else}TVkPointer{$endif};

     PPVkAndroidAHardwareBuffer=^PVkAndroidAHardwareBuffer;
     PVkAndroidAHardwareBuffer={$ifdef VulkanUseAndroidUnits}PAHardwareBuffer{$else}TVkPointer{$endif};
{$endif}

{$ifdef Mir}
     PPVkMirConnection=^PVkMirConnection;
     PVkMirConnection={$ifdef VulkanUseMirUnits}PMirConnection{$else}TVkPointer{$endif};

     PPVkMirSurface=^PVkMirSurface;
     PVkMirSurface={$ifdef VulkanUseMirUnits}PMirSurface{$else}TVkPointer{$endif};
{$endif}

{$ifdef Wayland}
     PPVkWaylandDisplay=^PVkWaylandDisplay;
     PVkWaylandDisplay={$ifdef VulkanUseWaylandUnits}Pwl_display{$else}TVkPointer{$endif};

     PPVkWaylandSurface=^PVkWaylandSurface;
     PVkWaylandSurface={$ifdef VulkanUseWaylandUnits}Pwl_surface{$else}TVkPointer{$endif};
{$endif}

{$ifdef XCB}
     PPVkXCBConnection=^PVkXCBConnection;
     PVkXCBConnection={$ifdef VulkanUseXCBUnits}Pxcb_connection_t{$else}TVkPointer{$endif};

     PPVkXCBVisualID=^PVkXCBVisualID;
     PVkXCBVisualID={$ifdef VulkanUseXCBUnits}Pxcb_visualid_t{$else}^TVkXCBVisualID{$endif};
     TVkXCBVisualID={$if defined(VulkanUseXCBUnits)}Pxcb_visualid_t{$elseif defined(CPU64)}TVkUInt64{$else}TVKUInt32{$ifend};

     PPVkXCBWindow=^PVkXCBWindow;
     PVkXCBWindow={$ifdef VulkanUseXCBUnits}Pxcb_window_t{$else}^TVkXCBWindow{$endif};
     TVkXCBWindow={$if defined(VulkanUseXCBUnits)}Txcb_window_t{$elseif defined(CPU64)}TVkUInt64{$else}TVKUInt32{$ifend};
{$endif}

{$ifdef XLIB}
     PPVkXLIBDisplay=^PVkXLIBDisplay;
     PVkXLIBDisplay={$ifdef VulkanUseXLIBUnits}PDisplay{$else}TVkPointer{$endif};
     {$ifdef VulkanUseXLIBUnits}TVkXLIBDisplay=TDisplay;{$endif}

     PPVkXLIBVisualID=^PVkXLIBVisualID;
     PVkXLIBVisualID={$ifdef VulkanUseXLIBUnits}PVisualID{$else}^TVkXLIBVisualID{$endif};
     TVkXLIBVisualID={$if defined(VulkanUseXLIBUnits)}TVisualID{$elseif defined(CPU64)}TVkUInt64{$else}TVKUInt32{$ifend};

     PPVkXLIBWindow=^PVkXLIBWindow;
     PVkXLIBWindow={$ifdef VulkanUseXLIBUnits}PWindow{$else}^TVkXLIBWindow{$endif};
     TVkXLIBWindow={$if defined(VulkanUseXLIBUnits)}TWindow{$elseif defined(CPU64)}TVkUInt64{$else}TVKUInt32{$ifend};
{$endif}

//========== CONST ===================
const
      VK_NULL_HANDLE=0;
      VK_NULL_INSTANCE=0;
      VK_INVALID_NDP_HANDLE=0;
      VK_INVALID_HANDLE=0;

      VK_API_VERSION=(1 shl 22) or (0 shl 12) or (0 shl 0);

      VK_API_VERSION_1_0=(1 shl 22) or (0 shl 12) or (0 shl 0);

      VK_API_VERSION_1_1=(1 shl 22) or (1 shl 12) or (0 shl 0);

      VK_API_VERSION_1_2=(1 shl 22) or (2 shl 12) or (0 shl 0);

      VK_HEADER_VERSION=152;

      VK_HEADER_VERSION_COMPLETE='1.2.152';

      VK_MAX_PHYSICAL_DEVICE_NAME_SIZE=256;
      VK_UUID_SIZE=16;
      VK_LUID_SIZE=8;
      VK_LUID_SIZE_KHR=VK_LUID_SIZE;
      VK_MAX_EXTENSION_NAME_SIZE=256;
      VK_MAX_DESCRIPTION_SIZE=256;
      VK_MAX_MEMORY_TYPES=32;
      VK_MAX_MEMORY_HEAPS=16;                                                    //< The maximum number of unique memory heaps, each of which supporting 1 or more memory types
      VK_LOD_CLAMP_NONE=1000.0;
      VK_REMAINING_MIP_LEVELS=TVkUInt32($ffffffff);
      VK_REMAINING_ARRAY_LAYERS=TVkUInt32($ffffffff);
      VK_WHOLE_SIZE=TVkUInt64($ffffffffffffffff);
      VK_ATTACHMENT_UNUSED=TVkUInt32($ffffffff);
      VK_TRUE=1;
      VK_FALSE=0;
      VK_QUEUE_FAMILY_IGNORED=TVkUInt32($ffffffff);
      VK_QUEUE_FAMILY_EXTERNAL=TVkUInt32($fffffffe);
      VK_QUEUE_FAMILY_EXTERNAL_KHR=VK_QUEUE_FAMILY_EXTERNAL;
      VK_QUEUE_FAMILY_FOREIGN_EXT=TVkUInt32($fffffffd);
      VK_SUBPASS_EXTERNAL=TVkUInt32($ffffffff);
      VK_MAX_DEVICE_GROUP_SIZE=32;
      VK_MAX_DEVICE_GROUP_SIZE_KHR=VK_MAX_DEVICE_GROUP_SIZE;
      VK_MAX_DRIVER_NAME_SIZE=256;
      VK_MAX_DRIVER_NAME_SIZE_KHR=VK_MAX_DRIVER_NAME_SIZE;
      VK_MAX_DRIVER_INFO_SIZE=256;
      VK_MAX_DRIVER_INFO_SIZE_KHR=VK_MAX_DRIVER_INFO_SIZE;
      VK_SHADER_UNUSED_KHR=TVkUInt32($ffffffff);
      VK_SHADER_UNUSED_NV=VK_SHADER_UNUSED_KHR;
      VK_KHR_SURFACE_SPEC_VERSION=25;
      VK_KHR_SURFACE_EXTENSION_NAME='VK_KHR_surface';
      VK_KHR_SWAPCHAIN_SPEC_VERSION=70;
      VK_KHR_SWAPCHAIN_EXTENSION_NAME='VK_KHR_swapchain';
      VK_KHR_DISPLAY_SPEC_VERSION=23;
      VK_KHR_DISPLAY_EXTENSION_NAME='VK_KHR_display';
      VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION=10;
      VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME='VK_KHR_display_swapchain';
      VK_KHR_XLIB_SURFACE_SPEC_VERSION=6;
      VK_KHR_XLIB_SURFACE_EXTENSION_NAME='VK_KHR_xlib_surface';
      VK_KHR_XCB_SURFACE_SPEC_VERSION=6;
      VK_KHR_XCB_SURFACE_EXTENSION_NAME='VK_KHR_xcb_surface';
      VK_KHR_WAYLAND_SURFACE_SPEC_VERSION=6;
      VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME='VK_KHR_wayland_surface';
      VK_KHR_MIR_SURFACE_SPEC_VERSION=4;
      VK_KHR_MIR_SURFACE_EXTENSION_NAME='VK_KHR_mir_surface';
      VK_KHR_ANDROID_SURFACE_SPEC_VERSION=6;
      VK_KHR_ANDROID_SURFACE_EXTENSION_NAME='VK_KHR_android_surface';
      VK_KHR_WIN32_SURFACE_SPEC_VERSION=6;
      VK_KHR_WIN32_SURFACE_EXTENSION_NAME='VK_KHR_win32_surface';
      VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION=8;
      VK_ANDROID_NATIVE_BUFFER_NUMBER=11;
      VK_ANDROID_NATIVE_BUFFER_NAME='VK_ANDROID_native_buffer';
      VK_ANDROID_NATIVE_BUFFER_EXTENSION_NAME=VK_ANDROID_NATIVE_BUFFER_NAME;
      VK_EXT_DEBUG_REPORT_SPEC_VERSION=9;
      VK_EXT_DEBUG_REPORT_EXTENSION_NAME='VK_EXT_debug_report';
      VK_NV_GLSL_SHADER_SPEC_VERSION=1;
      VK_NV_GLSL_SHADER_EXTENSION_NAME='VK_NV_glsl_shader';
      VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION=1;
      VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME='VK_EXT_depth_range_unrestricted';
      VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION=3;
      VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME='VK_KHR_sampler_mirror_clamp_to_edge';
      VK_IMG_FILTER_CUBIC_SPEC_VERSION=1;
      VK_IMG_FILTER_CUBIC_EXTENSION_NAME='VK_IMG_filter_cubic';
      VK_AMD_EXTENSION_17_SPEC_VERSION=0;
      VK_AMD_EXTENSION_17_EXTENSION_NAME='VK_AMD_extension_17';
      VK_AMD_EXTENSION_18_SPEC_VERSION=0;
      VK_AMD_EXTENSION_18_EXTENSION_NAME='VK_AMD_extension_18';
      VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION=1;
      VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME='VK_AMD_rasterization_order';
      VK_AMD_EXTENSION_20_SPEC_VERSION=0;
      VK_AMD_EXTENSION_20_EXTENSION_NAME='VK_AMD_extension_20';
      VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION=1;
      VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME='VK_AMD_shader_trinary_minmax';
      VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION=1;
      VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME='VK_AMD_shader_explicit_vertex_parameter';
      VK_EXT_DEBUG_MARKER_SPEC_VERSION=4;
      VK_EXT_DEBUG_MARKER_EXTENSION_NAME='VK_EXT_debug_marker';
      VK_AMD_EXTENSION_24_SPEC_VERSION=0;
      VK_AMD_EXTENSION_24_EXTENSION_NAME='VK_AMD_extension_24';
      VK_AMD_EXTENSION_25_SPEC_VERSION=0;
      VK_AMD_EXTENSION_25_EXTENSION_NAME='VK_AMD_extension_25';
      VK_AMD_GCN_SHADER_SPEC_VERSION=1;
      VK_AMD_GCN_SHADER_EXTENSION_NAME='VK_AMD_gcn_shader';
      VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION=1;
      VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME='VK_NV_dedicated_allocation';
      VK_EXT_EXTENSION_28_SPEC_VERSION=0;
      VK_EXT_EXTENSION_28_EXTENSION_NAME='VK_NV_extension_28';
      VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION=1;
      VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME='VK_EXT_transform_feedback';
      VK_NVX_EXTENSION_30_SPEC_VERSION=0;
      VK_NVX_EXTENSION_30_EXTENSION_NAME='VK_NVX_extension_30';
      VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION=2;
      VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME='VK_NVX_image_view_handle';
      VK_AMD_EXTENSION_32_SPEC_VERSION=0;
      VK_AMD_EXTENSION_32_EXTENSION_NAME='VK_AMD_extension_32';
      VK_AMD_EXTENSION_33_SPEC_VERSION=0;
      VK_AMD_EXTENSION_33_EXTENSION_NAME='VK_AMD_extension_33';
      VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION=2;
      VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME='VK_AMD_draw_indirect_count';
      VK_AMD_EXTENSION_35_SPEC_VERSION=0;
      VK_AMD_EXTENSION_35_EXTENSION_NAME='VK_AMD_extension_35';
      VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION=1;
      VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME='VK_AMD_negative_viewport_height';
      VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION=2;
      VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME='VK_AMD_gpu_shader_half_float';
      VK_AMD_SHADER_BALLOT_SPEC_VERSION=1;
      VK_AMD_SHADER_BALLOT_EXTENSION_NAME='VK_AMD_shader_ballot';
      VK_AMD_EXTENSION_39_SPEC_VERSION=0;
      VK_AMD_EXTENSION_39_EXTENSION_NAME='VK_AMD_extension_39';
      VK_AMD_EXTENSION_40_SPEC_VERSION=0;
      VK_AMD_EXTENSION_40_EXTENSION_NAME='VK_AMD_extension_40';
      VK_AMD_EXTENSION_41_SPEC_VERSION=0;
      VK_AMD_EXTENSION_41_EXTENSION_NAME='VK_AMD_extension_41';
      VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION=1;
      VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME='VK_AMD_texture_gather_bias_lod';
      VK_AMD_SHADER_INFO_SPEC_VERSION=1;
      VK_AMD_SHADER_INFO_EXTENSION_NAME='VK_AMD_shader_info';
      VK_AMD_EXTENSION_44_SPEC_VERSION=0;
      VK_AMD_EXTENSION_44_EXTENSION_NAME='VK_AMD_extension_44';
      VK_AMD_EXTENSION_45_SPEC_VERSION=0;
      VK_AMD_EXTENSION_45_EXTENSION_NAME='VK_AMD_extension_45';
      VK_AMD_EXTENSION_46_SPEC_VERSION=0;
      VK_AMD_EXTENSION_46_EXTENSION_NAME='VK_AMD_extension_46';
      VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION=1;
      VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME='VK_AMD_shader_image_load_store_lod';
      VK_NVX_EXTENSION_48_SPEC_VERSION=0;
      VK_NVX_EXTENSION_48_EXTENSION_NAME='VK_NVX_extension_48';
      VK_GOOGLE_EXTENSION_49_SPEC_VERSION=0;
      VK_GOOGLE_EXTENSION_49_EXTENSION_NAME='VK_GOOGLE_extension_49';
      VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION=1;
      VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME='VK_GGP_stream_descriptor_surface';
      VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION=2;
      VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME='VK_NV_corner_sampled_image';
      VK_NV_EXTENSION_52_SPEC_VERSION=0;
      VK_NV_EXTENSION_52_EXTENSION_NAME='VK_NV_extension_52';
      VK_NV_EXTENSION_53_SPEC_VERSION=0;
      VK_NV_EXTENSION_53_EXTENSION_NAME='VK_NV_extension_53';
      VK_KHR_MULTIVIEW_SPEC_VERSION=1;
      VK_KHR_MULTIVIEW_EXTENSION_NAME='VK_KHR_multiview';
      VK_IMG_FORMAT_PVRTC_SPEC_VERSION=1;
      VK_IMG_FORMAT_PVRTC_EXTENSION_NAME='VK_IMG_format_pvrtc';
      VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION=1;
      VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME='VK_NV_external_memory_capabilities';
      VK_NV_EXTERNAL_MEMORY_SPEC_VERSION=1;
      VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME='VK_NV_external_memory';
      VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION=1;
      VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME='VK_NV_external_memory_win32';
      VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION=2;
      VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME='VK_NV_win32_keyed_mutex';
      VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION=2;
      VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME='VK_KHR_get_physical_device_properties2';
      VK_KHR_DEVICE_GROUP_SPEC_VERSION=4;
      VK_KHR_DEVICE_GROUP_EXTENSION_NAME='VK_KHR_device_group';
      VK_EXT_VALIDATION_FLAGS_SPEC_VERSION=2;
      VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME='VK_EXT_validation_flags';
      VK_NN_VI_SURFACE_SPEC_VERSION=1;
      VK_NN_VI_SURFACE_EXTENSION_NAME='VK_NN_vi_surface';
      VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION=1;
      VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME='VK_KHR_shader_draw_parameters';
      VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION=1;
      VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME='VK_EXT_shader_subgroup_ballot';
      VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION=1;
      VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME='VK_EXT_shader_subgroup_vote';
      VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION=1;
      VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME='VK_EXT_texture_compression_astc_hdr';
      VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION=1;
      VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME='VK_EXT_astc_decode_mode';
      VK_IMG_EXTENSION_69_SPEC_VERSION=0;
      VK_IMG_EXTENSION_69_EXTENSION_NAME='VK_IMG_extension_69';
      VK_KHR_MAINTENANCE1_SPEC_VERSION=2;
      VK_KHR_MAINTENANCE1_EXTENSION_NAME='VK_KHR_maintenance1';
      VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION=1;
      VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME='VK_KHR_device_group_creation';
      VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME='VK_KHR_external_memory_capabilities';
      VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME='VK_KHR_external_memory';
      VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME='VK_KHR_external_memory_win32';
      VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME='VK_KHR_external_memory_fd';
      VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION=1;
      VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME='VK_KHR_win32_keyed_mutex';
      VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME='VK_KHR_external_semaphore_capabilities';
      VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME='VK_KHR_external_semaphore';
      VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME='VK_KHR_external_semaphore_win32';
      VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME='VK_KHR_external_semaphore_fd';
      VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION=2;
      VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME='VK_KHR_push_descriptor';
      VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION=2;
      VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME='VK_EXT_conditional_rendering';
      VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION=1;
      VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME='VK_KHR_shader_float16_int8';
      VK_KHR_16BIT_STORAGE_SPEC_VERSION=1;
      VK_KHR_16BIT_STORAGE_EXTENSION_NAME='VK_KHR_16bit_storage';
      VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION=1;
      VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME='VK_KHR_incremental_present';
      VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION=1;
      VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME='VK_KHR_descriptor_update_template';
      VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION=3;
      VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME='VK_NVX_device_generated_commands';
      VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION=1;
      VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME='VK_NV_clip_space_w_scaling';
      VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION=1;
      VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME='VK_EXT_direct_mode_display';
      VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION=1;
      VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME='VK_EXT_acquire_xlib_display';
      VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION=1;
      VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME='VK_EXT_display_surface_counter';
      VK_EXT_DISPLAY_CONTROL_SPEC_VERSION=1;
      VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME='VK_EXT_display_control';
      VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION=1;
      VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME='VK_GOOGLE_display_timing';
      VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION=1;
      VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME='VK_NV_sample_mask_override_coverage';
      VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION=1;
      VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME='VK_NV_geometry_shader_passthrough';
      VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION=1;
      VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME='VK_NV_viewport_array2';
      VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION=1;
      VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME='VK_NVX_multiview_per_view_attributes';
      VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION=1;
      VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME='VK_NV_viewport_swizzle';
      VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION=1;
      VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME='VK_EXT_discard_rectangles';
      VK_NV_EXTENSION_101_SPEC_VERSION=0;
      VK_NV_EXTENSION_101_EXTENSION_NAME='VK_NV_extension_101';
      VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION=1;
      VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME='VK_EXT_conservative_rasterization';
      VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION=1;
      VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME='VK_EXT_depth_clip_enable';
      VK_NV_EXTENSION_104_SPEC_VERSION=0;
      VK_NV_EXTENSION_104_EXTENSION_NAME='VK_NV_extension_104';
      VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION=4;
      VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME='VK_EXT_swapchain_colorspace';
      VK_EXT_HDR_METADATA_SPEC_VERSION=2;
      VK_EXT_HDR_METADATA_EXTENSION_NAME='VK_EXT_hdr_metadata';
      VK_IMG_EXTENSION_107_SPEC_VERSION=0;
      VK_IMG_EXTENSION_107_EXTENSION_NAME='VK_IMG_extension_107';
      VK_IMG_EXTENSION_108_SPEC_VERSION=0;
      VK_IMG_EXTENSION_108_EXTENSION_NAME='VK_IMG_extension_108';
      VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION=1;
      VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME='VK_KHR_imageless_framebuffer';
      VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION=1;
      VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME='VK_KHR_create_renderpass2';
      VK_IMG_EXTENSION_111_SPEC_VERSION=0;
      VK_IMG_EXTENSION_111_EXTENSION_NAME='VK_IMG_extension_111';
      VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION=1;
      VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME='VK_KHR_shared_presentable_image';
      VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME='VK_KHR_external_fence_capabilities';
      VK_KHR_EXTERNAL_FENCE_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME='VK_KHR_external_fence';
      VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME='VK_KHR_external_fence_win32';
      VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION=1;
      VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME='VK_KHR_external_fence_fd';
      VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION=1;
      VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME='VK_KHR_performance_query';
      VK_KHR_MAINTENANCE2_SPEC_VERSION=1;
      VK_KHR_MAINTENANCE2_EXTENSION_NAME='VK_KHR_maintenance2';
      VK_KHR_EXTENSION_119_SPEC_VERSION=0;
      VK_KHR_EXTENSION_119_EXTENSION_NAME='VK_KHR_extension_119';
      VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION=1;
      VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME='VK_KHR_get_surface_capabilities2';
      VK_KHR_VARIABLE_POINTERS_SPEC_VERSION=1;
      VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME='VK_KHR_variable_pointers';
      VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION=1;
      VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME='VK_KHR_get_display_properties2';
      VK_MVK_IOS_SURFACE_SPEC_VERSION=3;
      VK_MVK_IOS_SURFACE_EXTENSION_NAME='VK_MVK_ios_surface';
      VK_MVK_MACOS_SURFACE_SPEC_VERSION=3;
      VK_MVK_MACOS_SURFACE_EXTENSION_NAME='VK_MVK_macos_surface';
      VK_MVK_MOLTENVK_SPEC_VERSION=0;
      VK_MVK_MOLTENVK_EXTENSION_NAME='VK_MVK_moltenvk';
      VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION=1;
      VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME='VK_EXT_external_memory_dma_buf';
      VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION=1;
      VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME='VK_EXT_queue_family_foreign';
      VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION=3;
      VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME='VK_KHR_dedicated_allocation';
      VK_EXT_DEBUG_UTILS_SPEC_VERSION=2;
      VK_EXT_DEBUG_UTILS_EXTENSION_NAME='VK_EXT_debug_utils';
      VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION=3;
      VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME='VK_ANDROID_external_memory_android_hardware_buffer';
      VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION=2;
      VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME='VK_EXT_sampler_filter_minmax';
      VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION=1;
      VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME='VK_KHR_storage_buffer_storage_class';
      VK_AMD_GPU_SHADER_INT16_SPEC_VERSION=2;
      VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME='VK_AMD_gpu_shader_int16';
      VK_AMD_EXTENSION_134_SPEC_VERSION=0;
      VK_AMD_EXTENSION_134_EXTENSION_NAME='VK_AMD_extension_134';
      VK_AMD_EXTENSION_135_SPEC_VERSION=0;
      VK_AMD_EXTENSION_135_EXTENSION_NAME='VK_AMD_extension_135';
      VK_AMD_EXTENSION_136_SPEC_VERSION=0;
      VK_AMD_EXTENSION_136_EXTENSION_NAME='VK_AMD_extension_136';
      VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION=1;
      VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME='VK_AMD_mixed_attachment_samples';
      VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION=1;
      VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME='VK_AMD_shader_fragment_mask';
      VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION=1;
      VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME='VK_EXT_inline_uniform_block';
      VK_AMD_EXTENSION_140_SPEC_VERSION=0;
      VK_AMD_EXTENSION_140_EXTENSION_NAME='VK_AMD_extension_140';
      VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION=1;
      VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME='VK_EXT_shader_stencil_export';
      VK_AMD_EXTENSION_142_SPEC_VERSION=0;
      VK_AMD_EXTENSION_142_EXTENSION_NAME='VK_AMD_extension_142';
      VK_AMD_EXTENSION_143_SPEC_VERSION=0;
      VK_AMD_EXTENSION_143_EXTENSION_NAME='VK_AMD_extension_143';
      VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION=1;
      VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME='VK_EXT_sample_locations';
      VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION=1;
      VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME='VK_KHR_relaxed_block_layout';
      VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION=1;
      VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME='VK_KHR_get_memory_requirements2';
      VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION=1;
      VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME='VK_KHR_image_format_list';
      VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION=2;
      VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME='VK_EXT_blend_operation_advanced';
      VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION=1;
      VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME='VK_NV_fragment_coverage_to_color';
      VK_KHR_RAY_TRACING_SPEC_VERSION=8;
      VK_KHR_RAY_TRACING_EXTENSION_NAME='VK_KHR_ray_tracing';
      VK_NV_EXTENSION_152_SPEC_VERSION=0;
      VK_NV_EXTENSION_152_EXTENSION_NAME='VK_NV_extension_152';
      VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION=1;
      VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME='VK_NV_framebuffer_mixed_samples';
      VK_NV_FILL_RECTANGLE_SPEC_VERSION=1;
      VK_NV_FILL_RECTANGLE_EXTENSION_NAME='VK_NV_fill_rectangle';
      VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION=1;
      VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME='VK_NV_shader_sm_builtins';
      VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION=1;
      VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME='VK_EXT_post_depth_coverage';
      VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION=14;
      VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME='VK_KHR_sampler_ycbcr_conversion';
      VK_KHR_BIND_MEMORY_2_SPEC_VERSION=1;
      VK_KHR_BIND_MEMORY_2_EXTENSION_NAME='VK_KHR_bind_memory2';
      VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION=1;
      VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME='VK_EXT_image_drm_format_modifier';
      VK_EXT_EXTENSION_160_SPEC_VERSION=0;
      VK_EXT_EXTENSION_160_EXTENSION_NAME='VK_EXT_extension_160';
      VK_EXT_VALIDATION_CACHE_SPEC_VERSION=1;
      VK_EXT_VALIDATION_CACHE_EXTENSION_NAME='VK_EXT_validation_cache';
      VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION=2;
      VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME='VK_EXT_descriptor_indexing';
      VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION=1;
      VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME='VK_EXT_shader_viewport_index_layer';
      VK_EXT_EXTENSION_164_SPEC_VERSION=0;
      VK_EXT_EXTENSION_164_EXTENSION_NAME='VK_NV_extension_164';
      VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION=3;
      VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME='VK_NV_shading_rate_image';
      VK_NV_RAY_TRACING_SPEC_VERSION=3;
      VK_NV_RAY_TRACING_EXTENSION_NAME='VK_NV_ray_tracing';
      VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION=2;
      VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME='VK_NV_representative_fragment_test';
      VK_EXT_EXTENSION_168_SPEC_VERSION=0;
      VK_EXT_EXTENSION_168_EXTENSION_NAME='VK_NV_extension_168';
      VK_KHR_MAINTENANCE3_SPEC_VERSION=1;
      VK_KHR_MAINTENANCE3_EXTENSION_NAME='VK_KHR_maintenance3';
      VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION=1;
      VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME='VK_KHR_draw_indirect_count';
      VK_EXT_FILTER_CUBIC_SPEC_VERSION=3;
      VK_EXT_FILTER_CUBIC_EXTENSION_NAME='VK_EXT_filter_cubic';
      VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION=4;
      VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME='VK_QCOM_render_pass_shader_resolve';
      VK_QCOM_extension_173_SPEC_VERSION=0;
      VK_QCOM_extension_173_EXTENSION_NAME='VK_QCOM_extension_173';
      VK_QCOM_extension_174_SPEC_VERSION=0;
      VK_QCOM_extension_174_EXTENSION_NAME='VK_QCOM_extension_174';
      VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION=2;
      VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME='VK_EXT_global_priority';
      VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION=1;
      VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME='VK_KHR_shader_subgroup_extended_types';
      VK_KHR_EXTENSION_177_SPEC_VERSION=0;
      VK_KHR_EXTENSION_177_EXTENSION_NAME='VK_KHR_extension_177';
      VK_KHR_8BIT_STORAGE_SPEC_VERSION=1;
      VK_KHR_8BIT_STORAGE_EXTENSION_NAME='VK_KHR_8bit_storage';
      VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION=1;
      VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME='VK_EXT_external_memory_host';
      VK_AMD_BUFFER_MARKER_SPEC_VERSION=1;
      VK_AMD_BUFFER_MARKER_EXTENSION_NAME='VK_AMD_buffer_marker';
      VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION=1;
      VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME='VK_KHR_shader_atomic_int64';
      VK_KHR_SHADER_CLOCK_SPEC_VERSION=1;
      VK_KHR_SHADER_CLOCK_EXTENSION_NAME='VK_KHR_shader_clock';
      VK_KHR_EXTENSION_183_SPEC_VERSION=0;
      VK_KHR_EXTENSION_183_EXTENSION_NAME='VK_AMD_extension_183';
      VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION=1;
      VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME='VK_AMD_pipeline_compiler_control';
      VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION=1;
      VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME='VK_EXT_calibrated_timestamps';
      VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION=2;
      VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME='VK_AMD_shader_core_properties';
      VK_KHR_EXTENSION_187_SPEC_VERSION=0;
      VK_KHR_EXTENSION_187_EXTENSION_NAME='VK_AMD_extension_187';
      VK_KHR_EXTENSION_188_SPEC_VERSION=0;
      VK_KHR_EXTENSION_188_EXTENSION_NAME='VK_AMD_extension_188';
      VK_KHR_EXTENSION_189_SPEC_VERSION=0;
      VK_KHR_EXTENSION_189_EXTENSION_NAME='VK_AMD_extension_189';
      VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION=1;
      VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME='VK_AMD_memory_overallocation_behavior';
      VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION=3;
      VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME='VK_EXT_vertex_attribute_divisor';
      VK_GGP_FRAME_TOKEN_SPEC_VERSION=1;
      VK_GGP_FRAME_TOKEN_EXTENSION_NAME='VK_GGP_frame_token';
      VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION=1;
      VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME='VK_EXT_pipeline_creation_feedback';
      VK_GOOGLE_EXTENSION_194_SPEC_VERSION=0;
      VK_GOOGLE_EXTENSION_194_EXTENSION_NAME='VK_GOOGLE_extension_194';
      VK_GOOGLE_EXTENSION_195_SPEC_VERSION=0;
      VK_GOOGLE_EXTENSION_195_EXTENSION_NAME='VK_GOOGLE_extension_195';
      VK_GOOGLE_EXTENSION_196_SPEC_VERSION=0;
      VK_GOOGLE_EXTENSION_196_EXTENSION_NAME='VK_GOOGLE_extension_196';
      VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION=1;
      VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME='VK_KHR_driver_properties';
      VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION=4;
      VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME='VK_KHR_shader_float_controls';
      VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION=1;
      VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME='VK_NV_shader_subgroup_partitioned';
      VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION=1;
      VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME='VK_KHR_depth_stencil_resolve';
      VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION=1;
      VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME='VK_KHR_swapchain_mutable_format';
      VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION=1;
      VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME='VK_NV_compute_shader_derivatives';
      VK_NV_MESH_SHADER_SPEC_VERSION=1;
      VK_NV_MESH_SHADER_EXTENSION_NAME='VK_NV_mesh_shader';
      VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION=1;
      VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME='VK_NV_fragment_shader_barycentric';
      VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION=2;
      VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME='VK_NV_shader_image_footprint';
      VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION=1;
      VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME='VK_NV_scissor_exclusive';
      VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION=2;
      VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME='VK_NV_device_diagnostic_checkpoints';
      VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION=2;
      VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME='VK_KHR_timeline_semaphore';
      VK_KHR_EXTENSION_209_SPEC_VERSION=0;
      VK_KHR_EXTENSION_209_EXTENSION_NAME='VK_KHR_extension_209';
      VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION=1;
      VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME='VK_INTEL_shader_integer_functions2';
      VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION=2;
      VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME='VK_INTEL_performance_query';
      VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION=3;
      VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME='VK_KHR_vulkan_memory_model';
      VK_EXT_PCI_BUS_INFO_SPEC_VERSION=2;
      VK_EXT_PCI_BUS_INFO_EXTENSION_NAME='VK_EXT_pci_bus_info';
      VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION=1;
      VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME='VK_AMD_display_native_hdr';
      VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION=1;
      VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME='VK_FUCHSIA_imagepipe_surface';
      VK_KHR_EXTENSION_216_SPEC_VERSION=0;
      VK_KHR_EXTENSION_216_EXTENSION_NAME='VK_KHR_extension_216';
      VK_KHR_EXTENSION_217_SPEC_VERSION=0;
      VK_KHR_EXTENSION_217_EXTENSION_NAME='VK_KHR_extension_217';
      VK_EXT_METAL_SURFACE_SPEC_VERSION=1;
      VK_EXT_METAL_SURFACE_EXTENSION_NAME='VK_EXT_metal_surface';
      VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION=1;
      VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME='VK_EXT_fragment_density_map';
      VK_EXT_EXTENSION_220_SPEC_VERSION=0;
      VK_EXT_EXTENSION_220_EXTENSION_NAME='VK_EXT_extension_220';
      VK_KHR_EXTENSION_221_SPEC_VERSION=0;
      VK_KHR_EXTENSION_221_EXTENSION_NAME='VK_KHR_extension_221';
      VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION=1;
      VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME='VK_EXT_scalar_block_layout';
      VK_EXT_EXTENSION_223_SPEC_VERSION=0;
      VK_EXT_EXTENSION_223_EXTENSION_NAME='VK_EXT_extension_223';
      VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION=1;
      VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME='VK_GOOGLE_hlsl_functionality1';
      VK_GOOGLE_DECORATE_STRING_SPEC_VERSION=1;
      VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME='VK_GOOGLE_decorate_string';
      VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION=2;
      VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME='VK_EXT_subgroup_size_control';
      VK_AMD_EXTENSION_227_SPEC_VERSION=0;
      VK_AMD_EXTENSION_227_EXTENSION_NAME='VK_AMD_extension_227';
      VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION=1;
      VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME='VK_AMD_shader_core_properties2';
      VK_AMD_EXTENSION_229_SPEC_VERSION=0;
      VK_AMD_EXTENSION_229_EXTENSION_NAME='VK_AMD_extension_229';
      VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION=1;
      VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME='VK_AMD_device_coherent_memory';
      VK_AMD_EXTENSION_231_SPEC_VERSION=0;
      VK_AMD_EXTENSION_231_EXTENSION_NAME='VK_AMD_extension_231';
      VK_AMD_EXTENSION_232_SPEC_VERSION=0;
      VK_AMD_EXTENSION_232_EXTENSION_NAME='VK_AMD_extension_232';
      VK_AMD_EXTENSION_233_SPEC_VERSION=0;
      VK_AMD_EXTENSION_233_EXTENSION_NAME='VK_AMD_extension_233';
      VK_AMD_EXTENSION_234_SPEC_VERSION=0;
      VK_AMD_EXTENSION_234_EXTENSION_NAME='VK_AMD_extension_234';
      VK_AMD_EXTENSION_235_SPEC_VERSION=0;
      VK_AMD_EXTENSION_235_EXTENSION_NAME='VK_AMD_extension_235';
      VK_AMD_EXTENSION_236_SPEC_VERSION=0;
      VK_AMD_EXTENSION_236_EXTENSION_NAME='VK_AMD_extension_236';
      VK_KHR_SPIRV_1_4_SPEC_VERSION=1;
      VK_KHR_SPIRV_1_4_EXTENSION_NAME='VK_KHR_spirv_1_4';
      VK_EXT_MEMORY_BUDGET_SPEC_VERSION=1;
      VK_EXT_MEMORY_BUDGET_EXTENSION_NAME='VK_EXT_memory_budget';
      VK_EXT_MEMORY_PRIORITY_SPEC_VERSION=1;
      VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME='VK_EXT_memory_priority';
      VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION=1;
      VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME='VK_KHR_surface_protected_capabilities';
      VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION=1;
      VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME='VK_NV_dedicated_allocation_image_aliasing';
      VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION=1;
      VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME='VK_KHR_separate_depth_stencil_layouts';
      VK_INTEL_EXTENSION_243_SPEC_VERSION=0;
      VK_INTEL_EXTENSION_243_EXTENSION_NAME='VK_INTEL_extension_243';
      VK_MESA_EXTENSION_244_SPEC_VERSION=0;
      VK_MESA_EXTENSION_244_EXTENSION_NAME='VK_MESA_extension_244';
      VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION=2;
      VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME='VK_EXT_buffer_device_address';
      VK_EXT_TOOLING_INFO_SPEC_VERSION=1;
      VK_EXT_TOOLING_INFO_EXTENSION_NAME='VK_EXT_tooling_info';
      VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION=1;
      VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME='VK_EXT_separate_stencil_usage';
      VK_EXT_VALIDATION_FEATURES_SPEC_VERSION=4;
      VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME='VK_EXT_validation_features';
      VK_KHR_EXTENSION_249_SPEC_VERSION=0;
      VK_KHR_EXTENSION_249_EXTENSION_NAME='VK_KHR_extension_249';
      VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION=1;
      VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME='VK_NV_cooperative_matrix';
      VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION=1;
      VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME='VK_NV_coverage_reduction_mode';
      VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION=1;
      VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME='VK_EXT_fragment_shader_interlock';
      VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION=1;
      VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME='VK_EXT_ycbcr_image_arrays';
      VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION=1;
      VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME='VK_KHR_uniform_buffer_standard_layout';
      VK_EXT_EXTENSION_255_SPEC_VERSION=0;
      VK_EXT_EXTENSION_255_EXTENSION_NAME='VK_EXT_extension_255';
      VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION=4;
      VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME='VK_EXT_full_screen_exclusive';
      VK_EXT_HEADLESS_SURFACE_SPEC_VERSION=1;
      VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME='VK_EXT_headless_surface';
      VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION=1;
      VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME='VK_KHR_buffer_device_address';
      VK_EXT_EXTENSION_259_SPEC_VERSION=0;
      VK_EXT_EXTENSION_259_EXTENSION_NAME='VK_EXT_extension_259';
      VK_EXT_LINE_RASTERIZATION_SPEC_VERSION=1;
      VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME='VK_EXT_line_rasterization';
      VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION=1;
      VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME='VK_EXT_shader_atomic_float';
      VK_EXT_HOST_QUERY_RESET_SPEC_VERSION=1;
      VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME='VK_EXT_host_query_reset';
      VK_GOOGLE_EXTENSION_263_SPEC_VERSION=0;
      VK_GOOGLE_EXTENSION_263_EXTENSION_NAME='VK_GGP_extension_263';
      VK_BRCM_EXTENSION_264_SPEC_VERSION=0;
      VK_BRCM_EXTENSION_264_EXTENSION_NAME='VK_BRCM_extension_264';
      VK_BRCM_EXTENSION_265_SPEC_VERSION=0;
      VK_BRCM_EXTENSION_265_EXTENSION_NAME='VK_BRCM_extension_265';
      VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION=1;
      VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME='VK_EXT_index_type_uint8';
      VK_EXT_EXTENSION_267_SPEC_VERSION=0;
      VK_EXT_extension_267='VK_EXT_extension_267';
      VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION=1;
      VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME='VK_EXT_extended_dynamic_state';
      VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION=3;
      VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME='VK_KHR_deferred_host_operations';
      VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION=1;
      VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME='VK_KHR_pipeline_executable_properties';
      VK_INTEL_EXTENSION_271_SPEC_VERSION=0;
      VK_INTEL_extension_271='VK_KHR_extension_271';
      VK_INTEL_EXTENSION_272_SPEC_VERSION=0;
      VK_INTEL_extension_272='VK_KHR_extension_272';
      VK_INTEL_EXTENSION_273_SPEC_VERSION=0;
      VK_INTEL_extension_273='VK_KHR_extension_273';
      VK_INTEL_EXTENSION_274_SPEC_VERSION=0;
      VK_INTEL_extension_274='VK_KHR_extension_274';
      VK_KHR_EXTENSION_275_SPEC_VERSION=0;
      VK_KHR_extension_275='VK_KHR_extension_275';
      VK_KHR_EXTENSION_276_SPEC_VERSION=0;
      VK_KHR_extension_276='VK_KHR_extension_276';
      VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION=1;
      VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME='VK_EXT_shader_demote_to_helper_invocation';
      VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION=3;
      VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME='VK_NV_device_generated_commands';
      VK_NV_EXTENSION_279_SPEC_VERSION=0;
      VK_NV_extension_279='VK_NV_extension_279';
      VK_KHR_EXTENSION_280_SPEC_VERSION=0;
      VK_KHR_extension_280='VK_KHR_extension_280';
      VK_ARM_EXTENSION_281_SPEC_VERSION=0;
      VK_ARM_extension_281='VK_ARM_extension_281';
      VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION=1;
      VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME='VK_EXT_texel_buffer_alignment';
      VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION=1;
      VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME='VK_QCOM_render_pass_transform';
      VK_EXT_EXTENSION_284_SPEC_VERSION=0;
      VK_EXT_extension_284='VK_EXT_extension_284';
      VK_EXT_EXTENSION_285_SPEC_VERSION=0;
      VK_EXT_extension_285='VK_EXT_extension_285';
      VK_EXT_EXTENSION_286_SPEC_VERSION=0;
      VK_EXT_extension_286='VK_EXT_extension_286';
      VK_EXT_ROBUSTNESS_2_SPEC_VERSION=1;
      VK_EXT_ROBUSTNESS_2_EXTENSION_NAME='VK_EXT_robustness2';
      VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION=12;
      VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME='VK_EXT_custom_border_color';
      VK_EXT_EXTENSION_289_SPEC_VERSION=0;
      VK_EXT_EXTENSION_289_EXTENSION_NAME='VK_EXT_extension_289';
      VK_GOOGLE_USER_TYPE_SPEC_VERSION=1;
      VK_GOOGLE_USER_TYPE_EXTENSION_NAME='VK_GOOGLE_user_type';
      VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION=1;
      VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME='VK_KHR_pipeline_library';
      VK_NV_EXTENSION_292_SPEC_VERSION=0;
      VK_NV_EXTENSION_292_EXTENSION_NAME='VK_NV_extension_292';
      VK_NV_EXTENSION_293_SPEC_VERSION=0;
      VK_NV_EXTENSION_293_EXTENSION_NAME='VK_NV_extension_293';
      VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION=1;
      VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME='VK_KHR_shader_non_semantic_info';
      VK_KHR_EXTENSION_295_SPEC_VERSION=0;
      VK_KHR_EXTENSION_295_EXTENSION_NAME='VK_KHR_extension_295';
      VK_EXT_PRIVATE_DATA_SPEC_VERSION=1;
      VK_EXT_PRIVATE_DATA_EXTENSION_NAME='VK_EXT_private_data';
      VK_KHR_EXTENSION_297_SPEC_VERSION=0;
      VK_KHR_EXTENSION_297_EXTENSION_NAME='VK_KHR_extension_297';
      VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION=3;
      VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME='VK_EXT_pipeline_creation_cache_control';
      VK_KHR_EXTENSION_299_SPEC_VERSION=0;
      VK_KHR_EXTENSION_299_EXTENSION_NAME='VK_KHR_extension_299';
      VK_KHR_EXTENSION_300_SPEC_VERSION=0;
      VK_KHR_EXTENSION_300_EXTENSION_NAME='VK_KHR_extension_300';
      VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION=1;
      VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME='VK_NV_device_diagnostics_config';
      VK_QCOM_render_pass_store_ops_SPEC_VERSION=2;
      VK_QCOM_render_pass_store_ops_EXTENSION_NAME='VK_QCOM_render_pass_store_ops';
      VK_QCOM_extension_303_SPEC_VERSION=0;
      VK_QCOM_extension_303_EXTENSION_NAME='VK_QCOM_extension_303';
      VK_QCOM_extension_304_SPEC_VERSION=0;
      VK_QCOM_extension_304_EXTENSION_NAME='VK_QCOM_extension_304';
      VK_QCOM_extension_305_SPEC_VERSION=0;
      VK_QCOM_extension_305_EXTENSION_NAME='VK_QCOM_extension_305';
      VK_QCOM_extension_306_SPEC_VERSION=0;
      VK_QCOM_extension_306_EXTENSION_NAME='VK_QCOM_extension_306';
      VK_QCOM_extension_307_SPEC_VERSION=0;
      VK_QCOM_extension_307_EXTENSION_NAME='VK_QCOM_extension_307';
      VK_NV_EXTENSION_308_SPEC_VERSION=0;
      VK_NV_EXTENSION_308_EXTENSION_NAME='VK_NV_extension_308';
      VK_KHR_EXTENSION_309_SPEC_VERSION=0;
      VK_KHR_EXTENSION_309_EXTENSION_NAME='VK_KHR_extension_309';
      VK_QCOM_extension_310_SPEC_VERSION=0;
      VK_QCOM_extension_310_EXTENSION_NAME='VK_QCOM_extension_310';
      VK_NV_EXTENSION_311_SPEC_VERSION=0;
      VK_NV_EXTENSION_311_EXTENSION_NAME='VK_NV_extension_311';
      VK_EXT_EXTENSION_312_SPEC_VERSION=0;
      VK_EXT_EXTENSION_312_EXTENSION_NAME='VK_EXT_extension_312';
      VK_EXT_EXTENSION_313_SPEC_VERSION=0;
      VK_EXT_EXTENSION_313_EXTENSION_NAME='VK_EXT_extension_313';
      VK_AMD_EXTENSION_314_SPEC_VERSION=0;
      VK_AMD_EXTENSION_314_EXTENSION_NAME='VK_AMD_extension_314';
      VK_AMD_EXTENSION_315_SPEC_VERSION=0;
      VK_AMD_EXTENSION_315_EXTENSION_NAME='VK_AMD_extension_315';
      VK_AMD_EXTENSION_316_SPEC_VERSION=0;
      VK_AMD_EXTENSION_316_EXTENSION_NAME='VK_AMD_extension_316';
      VK_AMD_EXTENSION_317_SPEC_VERSION=0;
      VK_AMD_EXTENSION_317_EXTENSION_NAME='VK_AMD_extension_317';
      VK_AMD_EXTENSION_318_SPEC_VERSION=0;
      VK_AMD_EXTENSION_318_EXTENSION_NAME='VK_AMD_extension_318';
      VK_AMD_EXTENSION_319_SPEC_VERSION=0;
      VK_AMD_EXTENSION_319_EXTENSION_NAME='VK_AMD_extension_319';
      VK_AMD_EXTENSION_320_SPEC_VERSION=0;
      VK_AMD_EXTENSION_320_EXTENSION_NAME='VK_AMD_extension_320';
      VK_AMD_EXTENSION_321_SPEC_VERSION=0;
      VK_AMD_EXTENSION_321_EXTENSION_NAME='VK_AMD_extension_321';
      VK_AMD_EXTENSION_322_SPEC_VERSION=0;
      VK_AMD_EXTENSION_322_EXTENSION_NAME='VK_AMD_extension_322';
      VK_AMD_EXTENSION_323_SPEC_VERSION=0;
      VK_AMD_EXTENSION_323_EXTENSION_NAME='VK_AMD_extension_323';
      VK_KHR_EXTENSION_324_SPEC_VERSION=0;
      VK_KHR_EXTENSION_324_EXTENSION_NAME='VK_KHR_extension_324';
      VK_KHR_EXTENSION_325_SPEC_VERSION=0;
      VK_KHR_EXTENSION_325_EXTENSION_NAME='VK_KHR_extension_325';
      VK_KHR_EXTENSION_326_SPEC_VERSION=0;
      VK_KHR_EXTENSION_326_EXTENSION_NAME='VK_KHR_extension_326';
      VK_NV_EXTENSION_327_SPEC_VERSION=0;
      VK_NV_EXTENSION_327_EXTENSION_NAME='VK_NV_extension_327';
      VK_NV_EXTENSION_328_SPEC_VERSION=0;
      VK_NV_EXTENSION_328_EXTENSION_NAME='VK_NV_extension_328';
      VK_NV_EXTENSION_329_SPEC_VERSION=0;
      VK_NV_EXTENSION_329_EXTENSION_NAME='VK_NV_extension_329';
      VK_NV_EXTENSION_330_SPEC_VERSION=0;
      VK_NV_EXTENSION_330_EXTENSION_NAME='VK_NV_extension_330';
      VK_NV_EXTENSION_331_SPEC_VERSION=0;
      VK_NV_EXTENSION_331_EXTENSION_NAME='VK_NV_extension_331';
      VK_NV_EXTENSION_332_SPEC_VERSION=0;
      VK_NV_EXTENSION_332_EXTENSION_NAME='VK_NV_extension_332';
      VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION=1;
      VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME='VK_EXT_fragment_density_map2';
      VK_EXT_EXTENSION_334_SPEC_VERSION=0;
      VK_EXT_EXTENSION_334_EXTENSION_NAME='VK_EXT_extension_334';
      VK_KHR_EXTENSION_335_SPEC_VERSION=0;
      VK_KHR_EXTENSION_335_EXTENSION_NAME='VK_KHR_extension_335';
      VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION=1;
      VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME='VK_EXT_image_robustness';
      VK_KHR_EXTENSION_337_SPEC_VERSION=0;
      VK_KHR_EXTENSION_337_EXTENSION_NAME='VK_KHR_extension_337';
      VK_KHR_EXTENSION_338_SPEC_VERSION=0;
      VK_KHR_EXTENSION_338_EXTENSION_NAME='VK_KHR_extension_338';
      VK_ARM_EXTENSION_339_SPEC_VERSION=0;
      VK_ARM_EXTENSION_339_EXTENSION_NAME='VK_ARM_extension_339';
      VK_EXT_EXTENSION_340_SPEC_VERSION=0;
      VK_EXT_EXTENSION_340_EXTENSION_NAME='VK_EXT_extension_340';
      VK_EXT_4444_FORMATS_SPEC_VERSION=1;
      VK_EXT_4444_FORMATS_EXTENSION_NAME='VK_EXT_4444_formats';
      VK_EXT_EXTENSION_342_SPEC_VERSION=0;
      VK_EXT_EXTENSION_342_EXTENSION_NAME='VK_EXT_extension_342';
      VK_ARM_EXTENSION_343_SPEC_VERSION=0;
      VK_ARM_EXTENSION_343_EXTENSION_NAME='VK_ARM_extension_343';
      VK_ARM_EXTENSION_344_SPEC_VERSION=0;
      VK_ARM_EXTENSION_344_EXTENSION_NAME='VK_ARM_extension_344';
      VK_ARM_EXTENSION_345_SPEC_VERSION=0;
      VK_ARM_EXTENSION_345_EXTENSION_NAME='VK_ARM_extension_345';
      VK_NV_EXTENSION_346_SPEC_VERSION=0;
      VK_NV_EXTENSION_346_EXTENSION_NAME='VK_NV_extension_346';
      VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION=1;
      VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME='VK_EXT_directfb_surface';
      VK_KHR_EXTENSION_348_SPEC_VERSION=0;
      VK_KHR_EXTENSION_348_EXTENSION_NAME='VK_KHR_extension_348';
      VK_KHR_EXTENSION_349_SPEC_VERSION=0;
      VK_KHR_EXTENSION_349_EXTENSION_NAME='VK_KHR_extension_349';
      VK_KHR_EXTENSION_350_SPEC_VERSION=0;
      VK_KHR_EXTENSION_350_EXTENSION_NAME='VK_KHR_extension_350';
      VK_NV_EXTENSION_351_SPEC_VERSION=0;
      VK_NV_EXTENSION_351_EXTENSION_NAME='VK_NV_extension_351';
      VK_EXT_EXTENSION_352_SPEC_VERSION=0;
      VK_EXT_EXTENSION_352_EXTENSION_NAME='VK_EXT_extension_352';
      VK_EXT_EXTENSION_353_SPEC_VERSION=0;
      VK_EXT_EXTENSION_353_EXTENSION_NAME='VK_EXT_extension_353';

//========== TYPES ===================
type
     TVkDispatchableHandle=TVkPtrInt;
     PPVkDispatchableHandle=^PVkDispatchableHandle;
     PVkDispatchableHandle=^TVkDispatchableHandle;

     TVkNonDispatchableHandle=TVkUInt64;
     PPVkNonDispatchableHandle=^PVkNonDispatchableHandle;
     PVkNonDispatchableHandle=^TVkNonDispatchableHandle;

     TVkEnum=TVkInt32;
     PPVkEnum=^PVkEnum;
     PVkEnum=^TVkEnum;

     TVkAccelerationStructureTypeNV=TVkInt32;
     TVkAccelerationStructureMemoryRequirementsTypeNV=TVkInt32;

{$ifdef Windows}
     TVkHINSTANCE=TVkPtrUInt;
     PPVkHINSTANCE=^PVkHINSTANCE;
     PVkHINSTANCE=^TVkHINSTANCE;

     TVkHWND=HWND;
     PPVkHWND=^PVkHWND;
     PVkHWND=^TVkHWND;
{$endif}
     {
     TANativeWindow=T;
     PPANativeWindow=^PANativeWindow;
     PANativeWindow=^TANativeWindow;

     TAHardwareBuffer=T;
     PPAHardwareBuffer=^PAHardwareBuffer;
     PAHardwareBuffer=^TAHardwareBuffer;

     TCAMetalLayer=T;
     PPCAMetalLayer=^PCAMetalLayer;
     PCAMetalLayer=^TCAMetalLayer;
           }

     TVkSampleMask=TVkUInt32;
     PPVkSampleMask=^PVkSampleMask;
     PVkSampleMask=^TVkSampleMask;

     TVkBool32=TVkUInt32;
     PPVkBool32=^PVkBool32;
     PVkBool32=^TVkBool32;

     TVkFlags=TVkUInt32;
     PPVkFlags=^PVkFlags;
     PVkFlags=^TVkFlags;

     TVkDeviceSize=TVkUInt64;
     PPVkDeviceSize=^PVkDeviceSize;
     PVkDeviceSize=^TVkDeviceSize;

     TVkDeviceAddress=TVkUInt64;
     PPVkDeviceAddress=^PVkDeviceAddress;
     PVkDeviceAddress=^TVkDeviceAddress;

     TVkQueryPoolCreateFlags=TVkFlags;
     PPVkQueryPoolCreateFlags=^PVkQueryPoolCreateFlags;
     PVkQueryPoolCreateFlags=^TVkQueryPoolCreateFlags;

     TVkPipelineLayoutCreateFlags=TVkFlags;
     PPVkPipelineLayoutCreateFlags=^PVkPipelineLayoutCreateFlags;
     PVkPipelineLayoutCreateFlags=^TVkPipelineLayoutCreateFlags;

     TVkPipelineDepthStencilStateCreateFlags=TVkFlags;
     PPVkPipelineDepthStencilStateCreateFlags=^PVkPipelineDepthStencilStateCreateFlags;
     PVkPipelineDepthStencilStateCreateFlags=^TVkPipelineDepthStencilStateCreateFlags;

     TVkPipelineDynamicStateCreateFlags=TVkFlags;
     PPVkPipelineDynamicStateCreateFlags=^PVkPipelineDynamicStateCreateFlags;
     PVkPipelineDynamicStateCreateFlags=^TVkPipelineDynamicStateCreateFlags;

     TVkPipelineColorBlendStateCreateFlags=TVkFlags;
     PPVkPipelineColorBlendStateCreateFlags=^PVkPipelineColorBlendStateCreateFlags;
     PVkPipelineColorBlendStateCreateFlags=^TVkPipelineColorBlendStateCreateFlags;

     TVkPipelineMultisampleStateCreateFlags=TVkFlags;
     PPVkPipelineMultisampleStateCreateFlags=^PVkPipelineMultisampleStateCreateFlags;
     PVkPipelineMultisampleStateCreateFlags=^TVkPipelineMultisampleStateCreateFlags;

     TVkPipelineRasterizationStateCreateFlags=TVkFlags;
     PPVkPipelineRasterizationStateCreateFlags=^PVkPipelineRasterizationStateCreateFlags;
     PVkPipelineRasterizationStateCreateFlags=^TVkPipelineRasterizationStateCreateFlags;

     TVkPipelineViewportStateCreateFlags=TVkFlags;
     PPVkPipelineViewportStateCreateFlags=^PVkPipelineViewportStateCreateFlags;
     PVkPipelineViewportStateCreateFlags=^TVkPipelineViewportStateCreateFlags;

     TVkPipelineTessellationStateCreateFlags=TVkFlags;
     PPVkPipelineTessellationStateCreateFlags=^PVkPipelineTessellationStateCreateFlags;
     PVkPipelineTessellationStateCreateFlags=^TVkPipelineTessellationStateCreateFlags;

     TVkPipelineInputAssemblyStateCreateFlags=TVkFlags;
     PPVkPipelineInputAssemblyStateCreateFlags=^PVkPipelineInputAssemblyStateCreateFlags;
     PVkPipelineInputAssemblyStateCreateFlags=^TVkPipelineInputAssemblyStateCreateFlags;

     TVkPipelineVertexInputStateCreateFlags=TVkFlags;
     PPVkPipelineVertexInputStateCreateFlags=^PVkPipelineVertexInputStateCreateFlags;
     PVkPipelineVertexInputStateCreateFlags=^TVkPipelineVertexInputStateCreateFlags;

     TVkBufferViewCreateFlags=TVkFlags;
     PPVkBufferViewCreateFlags=^PVkBufferViewCreateFlags;
     PVkBufferViewCreateFlags=^TVkBufferViewCreateFlags;

     TVkInstanceCreateFlags=TVkFlags;
     PPVkInstanceCreateFlags=^PVkInstanceCreateFlags;
     PVkInstanceCreateFlags=^TVkInstanceCreateFlags;

     TVkDeviceCreateFlags=TVkFlags;
     PPVkDeviceCreateFlags=^PVkDeviceCreateFlags;
     PVkDeviceCreateFlags=^TVkDeviceCreateFlags;

     TVkSemaphoreCreateFlags=TVkFlags;
     PPVkSemaphoreCreateFlags=^PVkSemaphoreCreateFlags;
     PVkSemaphoreCreateFlags=^TVkSemaphoreCreateFlags;

     TVkEventCreateFlags=TVkFlags;
     PPVkEventCreateFlags=^PVkEventCreateFlags;
     PVkEventCreateFlags=^TVkEventCreateFlags;

     TVkMemoryMapFlags=TVkFlags;
     PPVkMemoryMapFlags=^PVkMemoryMapFlags;
     PVkMemoryMapFlags=^TVkMemoryMapFlags;

     TVkDescriptorPoolResetFlags=TVkFlags;
     PPVkDescriptorPoolResetFlags=^PVkDescriptorPoolResetFlags;
     PVkDescriptorPoolResetFlags=^TVkDescriptorPoolResetFlags;

     TVkDescriptorUpdateTemplateCreateFlags=TVkFlags;
     PPVkDescriptorUpdateTemplateCreateFlags=^PVkDescriptorUpdateTemplateCreateFlags;
     PVkDescriptorUpdateTemplateCreateFlags=^TVkDescriptorUpdateTemplateCreateFlags;

     TVkDisplayModeCreateFlagsKHR=TVkFlags;
     PPVkDisplayModeCreateFlagsKHR=^PVkDisplayModeCreateFlagsKHR;
     PVkDisplayModeCreateFlagsKHR=^TVkDisplayModeCreateFlagsKHR;

     TVkDisplaySurfaceCreateFlagsKHR=TVkFlags;
     PPVkDisplaySurfaceCreateFlagsKHR=^PVkDisplaySurfaceCreateFlagsKHR;
     PVkDisplaySurfaceCreateFlagsKHR=^TVkDisplaySurfaceCreateFlagsKHR;

     TVkAndroidSurfaceCreateFlagsKHR=TVkFlags;
     PPVkAndroidSurfaceCreateFlagsKHR=^PVkAndroidSurfaceCreateFlagsKHR;
     PVkAndroidSurfaceCreateFlagsKHR=^TVkAndroidSurfaceCreateFlagsKHR;

     TVkViSurfaceCreateFlagsNN=TVkFlags;
     PPVkViSurfaceCreateFlagsNN=^PVkViSurfaceCreateFlagsNN;
     PVkViSurfaceCreateFlagsNN=^TVkViSurfaceCreateFlagsNN;

     TVkWaylandSurfaceCreateFlagsKHR=TVkFlags;
     PPVkWaylandSurfaceCreateFlagsKHR=^PVkWaylandSurfaceCreateFlagsKHR;
     PVkWaylandSurfaceCreateFlagsKHR=^TVkWaylandSurfaceCreateFlagsKHR;

     TVkWin32SurfaceCreateFlagsKHR=TVkFlags;
     PPVkWin32SurfaceCreateFlagsKHR=^PVkWin32SurfaceCreateFlagsKHR;
     PVkWin32SurfaceCreateFlagsKHR=^TVkWin32SurfaceCreateFlagsKHR;

     TVkXlibSurfaceCreateFlagsKHR=TVkFlags;
     PPVkXlibSurfaceCreateFlagsKHR=^PVkXlibSurfaceCreateFlagsKHR;
     PVkXlibSurfaceCreateFlagsKHR=^TVkXlibSurfaceCreateFlagsKHR;

     TVkXcbSurfaceCreateFlagsKHR=TVkFlags;
     PPVkXcbSurfaceCreateFlagsKHR=^PVkXcbSurfaceCreateFlagsKHR;
     PVkXcbSurfaceCreateFlagsKHR=^TVkXcbSurfaceCreateFlagsKHR;

     TVkDirectFBSurfaceCreateFlagsEXT=TVkFlags;
     PPVkDirectFBSurfaceCreateFlagsEXT=^PVkDirectFBSurfaceCreateFlagsEXT;
     PVkDirectFBSurfaceCreateFlagsEXT=^TVkDirectFBSurfaceCreateFlagsEXT;

     TVkIOSSurfaceCreateFlagsMVK=TVkFlags;
     PPVkIOSSurfaceCreateFlagsMVK=^PVkIOSSurfaceCreateFlagsMVK;
     PVkIOSSurfaceCreateFlagsMVK=^TVkIOSSurfaceCreateFlagsMVK;

     TVkMacOSSurfaceCreateFlagsMVK=TVkFlags;
     PPVkMacOSSurfaceCreateFlagsMVK=^PVkMacOSSurfaceCreateFlagsMVK;
     PVkMacOSSurfaceCreateFlagsMVK=^TVkMacOSSurfaceCreateFlagsMVK;

     TVkMetalSurfaceCreateFlagsEXT=TVkFlags;
     PPVkMetalSurfaceCreateFlagsEXT=^PVkMetalSurfaceCreateFlagsEXT;
     PVkMetalSurfaceCreateFlagsEXT=^TVkMetalSurfaceCreateFlagsEXT;

     TVkImagePipeSurfaceCreateFlagsFUCHSIA=TVkFlags;
     PPVkImagePipeSurfaceCreateFlagsFUCHSIA=^PVkImagePipeSurfaceCreateFlagsFUCHSIA;
     PVkImagePipeSurfaceCreateFlagsFUCHSIA=^TVkImagePipeSurfaceCreateFlagsFUCHSIA;

     TVkStreamDescriptorSurfaceCreateFlagsGGP=TVkFlags;
     PPVkStreamDescriptorSurfaceCreateFlagsGGP=^PVkStreamDescriptorSurfaceCreateFlagsGGP;
     PVkStreamDescriptorSurfaceCreateFlagsGGP=^TVkStreamDescriptorSurfaceCreateFlagsGGP;

     TVkHeadlessSurfaceCreateFlagsEXT=TVkFlags;
     PPVkHeadlessSurfaceCreateFlagsEXT=^PVkHeadlessSurfaceCreateFlagsEXT;
     PVkHeadlessSurfaceCreateFlagsEXT=^TVkHeadlessSurfaceCreateFlagsEXT;

     TVkCommandPoolTrimFlags=TVkFlags;
     PPVkCommandPoolTrimFlags=^PVkCommandPoolTrimFlags;
     PVkCommandPoolTrimFlags=^TVkCommandPoolTrimFlags;

     TVkPipelineViewportSwizzleStateCreateFlagsNV=TVkFlags;
     PPVkPipelineViewportSwizzleStateCreateFlagsNV=^PVkPipelineViewportSwizzleStateCreateFlagsNV;
     PVkPipelineViewportSwizzleStateCreateFlagsNV=^TVkPipelineViewportSwizzleStateCreateFlagsNV;

     TVkPipelineDiscardRectangleStateCreateFlagsEXT=TVkFlags;
     PPVkPipelineDiscardRectangleStateCreateFlagsEXT=^PVkPipelineDiscardRectangleStateCreateFlagsEXT;
     PVkPipelineDiscardRectangleStateCreateFlagsEXT=^TVkPipelineDiscardRectangleStateCreateFlagsEXT;

     TVkPipelineCoverageToColorStateCreateFlagsNV=TVkFlags;
     PPVkPipelineCoverageToColorStateCreateFlagsNV=^PVkPipelineCoverageToColorStateCreateFlagsNV;
     PVkPipelineCoverageToColorStateCreateFlagsNV=^TVkPipelineCoverageToColorStateCreateFlagsNV;

     TVkPipelineCoverageModulationStateCreateFlagsNV=TVkFlags;
     PPVkPipelineCoverageModulationStateCreateFlagsNV=^PVkPipelineCoverageModulationStateCreateFlagsNV;
     PVkPipelineCoverageModulationStateCreateFlagsNV=^TVkPipelineCoverageModulationStateCreateFlagsNV;

     TVkPipelineCoverageReductionStateCreateFlagsNV=TVkFlags;
     PPVkPipelineCoverageReductionStateCreateFlagsNV=^PVkPipelineCoverageReductionStateCreateFlagsNV;
     PVkPipelineCoverageReductionStateCreateFlagsNV=^TVkPipelineCoverageReductionStateCreateFlagsNV;

     TVkValidationCacheCreateFlagsEXT=TVkFlags;
     PPVkValidationCacheCreateFlagsEXT=^PVkValidationCacheCreateFlagsEXT;
     PVkValidationCacheCreateFlagsEXT=^TVkValidationCacheCreateFlagsEXT;

     TVkDebugUtilsMessengerCreateFlagsEXT=TVkFlags;
     PPVkDebugUtilsMessengerCreateFlagsEXT=^PVkDebugUtilsMessengerCreateFlagsEXT;
     PVkDebugUtilsMessengerCreateFlagsEXT=^TVkDebugUtilsMessengerCreateFlagsEXT;

     TVkDebugUtilsMessengerCallbackDataFlagsEXT=TVkFlags;
     PPVkDebugUtilsMessengerCallbackDataFlagsEXT=^PVkDebugUtilsMessengerCallbackDataFlagsEXT;
     PVkDebugUtilsMessengerCallbackDataFlagsEXT=^TVkDebugUtilsMessengerCallbackDataFlagsEXT;

     TVkPipelineRasterizationConservativeStateCreateFlagsEXT=TVkFlags;
     PPVkPipelineRasterizationConservativeStateCreateFlagsEXT=^PVkPipelineRasterizationConservativeStateCreateFlagsEXT;
     PVkPipelineRasterizationConservativeStateCreateFlagsEXT=^TVkPipelineRasterizationConservativeStateCreateFlagsEXT;

     TVkPipelineRasterizationStateStreamCreateFlagsEXT=TVkFlags;
     PPVkPipelineRasterizationStateStreamCreateFlagsEXT=^PVkPipelineRasterizationStateStreamCreateFlagsEXT;
     PVkPipelineRasterizationStateStreamCreateFlagsEXT=^TVkPipelineRasterizationStateStreamCreateFlagsEXT;

     TVkPipelineRasterizationDepthClipStateCreateFlagsEXT=TVkFlags;
     PPVkPipelineRasterizationDepthClipStateCreateFlagsEXT=^PVkPipelineRasterizationDepthClipStateCreateFlagsEXT;
     PVkPipelineRasterizationDepthClipStateCreateFlagsEXT=^TVkPipelineRasterizationDepthClipStateCreateFlagsEXT;

     TVkInstance=TVkDispatchableHandle;
     PPVkInstance=^PVkInstance;
     PVkInstance=^TVkInstance;

     TVkPhysicalDevice=TVkDispatchableHandle;
     PPVkPhysicalDevice=^PVkPhysicalDevice;
     PVkPhysicalDevice=^TVkPhysicalDevice;

     TVkDevice=TVkDispatchableHandle;
     PPVkDevice=^PVkDevice;
     PVkDevice=^TVkDevice;

     TVkQueue=TVkDispatchableHandle;
     PPVkQueue=^PVkQueue;
     PVkQueue=^TVkQueue;

     TVkCommandBuffer=TVkDispatchableHandle;
     PPVkCommandBuffer=^PVkCommandBuffer;
     PVkCommandBuffer=^TVkCommandBuffer;

     TVkDeviceMemory=TVkNonDispatchableHandle;
     PPVkDeviceMemory=^PVkDeviceMemory;
     PVkDeviceMemory=^TVkDeviceMemory;

     TVkCommandPool=TVkNonDispatchableHandle;
     PPVkCommandPool=^PVkCommandPool;
     PVkCommandPool=^TVkCommandPool;

     TVkBuffer=TVkNonDispatchableHandle;
     PPVkBuffer=^PVkBuffer;
     PVkBuffer=^TVkBuffer;

     TVkBufferView=TVkNonDispatchableHandle;
     PPVkBufferView=^PVkBufferView;
     PVkBufferView=^TVkBufferView;

     TVkImage=TVkNonDispatchableHandle;
     PPVkImage=^PVkImage;
     PVkImage=^TVkImage;

     TVkImageView=TVkNonDispatchableHandle;
     PPVkImageView=^PVkImageView;
     PVkImageView=^TVkImageView;

     TVkShaderModule=TVkNonDispatchableHandle;
     PPVkShaderModule=^PVkShaderModule;
     PVkShaderModule=^TVkShaderModule;

     TVkPipeline=TVkNonDispatchableHandle;
     PPVkPipeline=^PVkPipeline;
     PVkPipeline=^TVkPipeline;

     TVkPipelineLayout=TVkNonDispatchableHandle;
     PPVkPipelineLayout=^PVkPipelineLayout;
     PVkPipelineLayout=^TVkPipelineLayout;

     TVkSampler=TVkNonDispatchableHandle;
     PPVkSampler=^PVkSampler;
     PVkSampler=^TVkSampler;

     TVkDescriptorSet=TVkNonDispatchableHandle;
     PPVkDescriptorSet=^PVkDescriptorSet;
     PVkDescriptorSet=^TVkDescriptorSet;

     TVkDescriptorSetLayout=TVkNonDispatchableHandle;
     PPVkDescriptorSetLayout=^PVkDescriptorSetLayout;
     PVkDescriptorSetLayout=^TVkDescriptorSetLayout;

     TVkDescriptorPool=TVkNonDispatchableHandle;
     PPVkDescriptorPool=^PVkDescriptorPool;
     PVkDescriptorPool=^TVkDescriptorPool;

     TVkFence=TVkNonDispatchableHandle;
     PPVkFence=^PVkFence;
     PVkFence=^TVkFence;

     TVkSemaphore=TVkNonDispatchableHandle;
     PPVkSemaphore=^PVkSemaphore;
     PVkSemaphore=^TVkSemaphore;

     TVkEvent=TVkNonDispatchableHandle;
     PPVkEvent=^PVkEvent;
     PVkEvent=^TVkEvent;

     TVkQueryPool=TVkNonDispatchableHandle;
     PPVkQueryPool=^PVkQueryPool;
     PVkQueryPool=^TVkQueryPool;

     TVkFramebuffer=TVkNonDispatchableHandle;
     PPVkFramebuffer=^PVkFramebuffer;
     PVkFramebuffer=^TVkFramebuffer;

     TVkRenderPass=TVkNonDispatchableHandle;
     PPVkRenderPass=^PVkRenderPass;
     PVkRenderPass=^TVkRenderPass;

     TVkPipelineCache=TVkNonDispatchableHandle;
     PPVkPipelineCache=^PVkPipelineCache;
     PVkPipelineCache=^TVkPipelineCache;

     TVkIndirectCommandsLayoutNV=TVkNonDispatchableHandle;
     PPVkIndirectCommandsLayoutNV=^PVkIndirectCommandsLayoutNV;
     PVkIndirectCommandsLayoutNV=^TVkIndirectCommandsLayoutNV;

     TVkDescriptorUpdateTemplate=TVkNonDispatchableHandle;
     PPVkDescriptorUpdateTemplate=^PVkDescriptorUpdateTemplate;
     PVkDescriptorUpdateTemplate=^TVkDescriptorUpdateTemplate;

     PPVkDescriptorUpdateTemplateKHR=PPVkDescriptorUpdateTemplate;
     PVkDescriptorUpdateTemplateKHR=PVkDescriptorUpdateTemplate;
     TVkDescriptorUpdateTemplateKHR=TVkDescriptorUpdateTemplate;

     TVkSamplerYcbcrConversion=TVkNonDispatchableHandle;
     PPVkSamplerYcbcrConversion=^PVkSamplerYcbcrConversion;
     PVkSamplerYcbcrConversion=^TVkSamplerYcbcrConversion;

     PPVkSamplerYcbcrConversionKHR=PPVkSamplerYcbcrConversion;
     PVkSamplerYcbcrConversionKHR=PVkSamplerYcbcrConversion;
     TVkSamplerYcbcrConversionKHR=TVkSamplerYcbcrConversion;

     TVkValidationCacheEXT=TVkNonDispatchableHandle;
     PPVkValidationCacheEXT=^PVkValidationCacheEXT;
     PVkValidationCacheEXT=^TVkValidationCacheEXT;

     TVkAccelerationStructureKHR=TVkNonDispatchableHandle;
     PPVkAccelerationStructureKHR=^PVkAccelerationStructureKHR;
     PVkAccelerationStructureKHR=^TVkAccelerationStructureKHR;

     PPVkAccelerationStructureNV=PPVkAccelerationStructureKHR;
     PVkAccelerationStructureNV=PVkAccelerationStructureKHR;
     TVkAccelerationStructureNV=TVkAccelerationStructureKHR;

     TVkPerformanceConfigurationINTEL=TVkNonDispatchableHandle;
     PPVkPerformanceConfigurationINTEL=^PVkPerformanceConfigurationINTEL;
     PVkPerformanceConfigurationINTEL=^TVkPerformanceConfigurationINTEL;

     TVkDeferredOperationKHR=TVkNonDispatchableHandle;
     PPVkDeferredOperationKHR=^PVkDeferredOperationKHR;
     PVkDeferredOperationKHR=^TVkDeferredOperationKHR;

     TVkPrivateDataSlotEXT=TVkNonDispatchableHandle;
     PPVkPrivateDataSlotEXT=^PVkPrivateDataSlotEXT;
     PVkPrivateDataSlotEXT=^TVkPrivateDataSlotEXT;

     TVkDisplayKHR=TVkNonDispatchableHandle;
     PPVkDisplayKHR=^PVkDisplayKHR;
     PVkDisplayKHR=^TVkDisplayKHR;

     TVkDisplayModeKHR=TVkNonDispatchableHandle;
     PPVkDisplayModeKHR=^PVkDisplayModeKHR;
     PVkDisplayModeKHR=^TVkDisplayModeKHR;

     TVkSurfaceKHR=TVkNonDispatchableHandle;
     PPVkSurfaceKHR=^PVkSurfaceKHR;
     PVkSurfaceKHR=^TVkSurfaceKHR;

     TVkSwapchainKHR=TVkNonDispatchableHandle;
     PPVkSwapchainKHR=^PVkSwapchainKHR;
     PVkSwapchainKHR=^TVkSwapchainKHR;

     TVkDebugReportCallbackEXT=TVkNonDispatchableHandle;
     PPVkDebugReportCallbackEXT=^PVkDebugReportCallbackEXT;
     PVkDebugReportCallbackEXT=^TVkDebugReportCallbackEXT;

     TVkDebugUtilsMessengerEXT=TVkNonDispatchableHandle;
     PPVkDebugUtilsMessengerEXT=^PVkDebugUtilsMessengerEXT;
     PVkDebugUtilsMessengerEXT=^TVkDebugUtilsMessengerEXT;

     TVkImageLayout=
      (
       VK_IMAGE_LAYOUT_UNDEFINED=0,                                              // Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)
       VK_IMAGE_LAYOUT_GENERAL=1,                                                // General layout when image can be used for any kind of access
       VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL=2,                               // Optimal layout when image is only used for color attachment read/write
       VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL=3,                       // Optimal layout when image is only used for depth/stencil attachment read/write
       VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL=4,                        // Optimal layout when image is used for read only depth/stencil attachment and shader access
       VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL=5,                               // Optimal layout when image is used for read only shader access
       VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL=6,                                   // Optimal layout when image is used only as source of transfer operations
       VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL=7,                                   // Optimal layout when image is used only as destination of transfer operations
       VK_IMAGE_LAYOUT_PREINITIALIZED=8,                                         // Initial layout used when the data is populated by the CPU
       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL=999999000,
       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL=999999000,
       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL=999999001,
       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL=999999001,
       VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL=999999002,
       VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL=999999003,
       VK_IMAGE_LAYOUT_PRESENT_SRC_KHR=1000001002,
       VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR=1000111000,
       VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV=1000164003,
       VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT=1000218000,
       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR=VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR=VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR=VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR=VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
       VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR=VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
       VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR=VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL
      );
     PPVkImageLayout=^PVkImageLayout;
     PVkImageLayout=^TVkImageLayout;

     TVkAttachmentLoadOp=
      (
       VK_ATTACHMENT_LOAD_OP_LOAD=0,
       VK_ATTACHMENT_LOAD_OP_CLEAR=1,
       VK_ATTACHMENT_LOAD_OP_DONT_CARE=2
      );
     PPVkAttachmentLoadOp=^PVkAttachmentLoadOp;
     PVkAttachmentLoadOp=^TVkAttachmentLoadOp;

     TVkAttachmentStoreOp=
      (
       VK_ATTACHMENT_STORE_OP_STORE=0,
       VK_ATTACHMENT_STORE_OP_DONT_CARE=1,
       VK_ATTACHMENT_STORE_OP_NONE_QCOM=1000301000
      );
     PPVkAttachmentStoreOp=^PVkAttachmentStoreOp;
     PVkAttachmentStoreOp=^TVkAttachmentStoreOp;

     TVkImageType=
      (
       VK_IMAGE_TYPE_1D=0,
       VK_IMAGE_TYPE_2D=1,
       VK_IMAGE_TYPE_3D=2
      );
     PPVkImageType=^PVkImageType;
     PVkImageType=^TVkImageType;

     TVkImageTiling=
      (
       VK_IMAGE_TILING_OPTIMAL=0,
       VK_IMAGE_TILING_LINEAR=1,
       VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT=1000158000
      );
     PPVkImageTiling=^PVkImageTiling;
     PVkImageTiling=^TVkImageTiling;

     TVkImageViewType=
      (
       VK_IMAGE_VIEW_TYPE_1D=0,
       VK_IMAGE_VIEW_TYPE_2D=1,
       VK_IMAGE_VIEW_TYPE_3D=2,
       VK_IMAGE_VIEW_TYPE_CUBE=3,
       VK_IMAGE_VIEW_TYPE_1D_ARRAY=4,
       VK_IMAGE_VIEW_TYPE_2D_ARRAY=5,
       VK_IMAGE_VIEW_TYPE_CUBE_ARRAY=6
      );
     PPVkImageViewType=^PVkImageViewType;
     PVkImageViewType=^TVkImageViewType;

     TVkCommandBufferLevel=
      (
       VK_COMMAND_BUFFER_LEVEL_PRIMARY=0,
       VK_COMMAND_BUFFER_LEVEL_SECONDARY=1
      );
     PPVkCommandBufferLevel=^PVkCommandBufferLevel;
     PVkCommandBufferLevel=^TVkCommandBufferLevel;

     TVkComponentSwizzle=
      (
       VK_COMPONENT_SWIZZLE_IDENTITY=0,
       VK_COMPONENT_SWIZZLE_ZERO=1,
       VK_COMPONENT_SWIZZLE_ONE=2,
       VK_COMPONENT_SWIZZLE_R=3,
       VK_COMPONENT_SWIZZLE_G=4,
       VK_COMPONENT_SWIZZLE_B=5,
       VK_COMPONENT_SWIZZLE_A=6
      );
     PPVkComponentSwizzle=^PVkComponentSwizzle;
     PVkComponentSwizzle=^TVkComponentSwizzle;

     TVkDescriptorType=
      (
       VK_DESCRIPTOR_TYPE_SAMPLER=0,
       VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER=1,
       VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE=2,
       VK_DESCRIPTOR_TYPE_STORAGE_IMAGE=3,
       VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER=4,
       VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER=5,
       VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER=6,
       VK_DESCRIPTOR_TYPE_STORAGE_BUFFER=7,
       VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC=8,
       VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC=9,
       VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT=10,
       VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT=1000138000,
       VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR=1000150000,
       VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV=VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR
      );
     PPVkDescriptorType=^PVkDescriptorType;
     PVkDescriptorType=^TVkDescriptorType;

     TVkQueryType=
      (
       VK_QUERY_TYPE_OCCLUSION=0,
       VK_QUERY_TYPE_PIPELINE_STATISTICS=1,                                      // Optional
       VK_QUERY_TYPE_TIMESTAMP=2,
       VK_QUERY_TYPE_RESERVED_8=1000023008,
       VK_QUERY_TYPE_RESERVED_4=1000024004,
       VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT=1000028004,
       VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR=1000116000,
       VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR=1000150000,
       VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR=1000150000,
       VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL=1000210000,
       VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV=VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR
      );
     PPVkQueryType=^PVkQueryType;
     PVkQueryType=^TVkQueryType;

     TVkBorderColor=
      (
       VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK=0,
       VK_BORDER_COLOR_INT_TRANSPARENT_BLACK=1,
       VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK=2,
       VK_BORDER_COLOR_INT_OPAQUE_BLACK=3,
       VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE=4,
       VK_BORDER_COLOR_INT_OPAQUE_WHITE=5,
       VK_BORDER_COLOR_FLOAT_CUSTOM_EXT=1000287003,
       VK_BORDER_COLOR_INT_CUSTOM_EXT=1000287004
      );
     PPVkBorderColor=^PVkBorderColor;
     PVkBorderColor=^TVkBorderColor;

     TVkPipelineBindPoint=
      (
       VK_PIPELINE_BIND_POINT_GRAPHICS=0,
       VK_PIPELINE_BIND_POINT_COMPUTE=1,
       VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR=1000150000,
       VK_PIPELINE_BIND_POINT_RAY_TRACING_NV=VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR
      );
     PPVkPipelineBindPoint=^PVkPipelineBindPoint;
     PVkPipelineBindPoint=^TVkPipelineBindPoint;

     TVkPipelineCacheHeaderVersion=
      (
       VK_PIPELINE_CACHE_HEADER_VERSION_ONE=1
      );
     PPVkPipelineCacheHeaderVersion=^PVkPipelineCacheHeaderVersion;
     PVkPipelineCacheHeaderVersion=^TVkPipelineCacheHeaderVersion;

     VkPipelineCacheCreateFlagBits_=
      (
       VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT=0,
       VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT=1
      );
     TVkPipelineCacheCreateFlagBit=VkPipelineCacheCreateFlagBits_;
     PPVkPipelineCacheCreateFlagBit=^PVkPipelineCacheCreateFlagBit;
     PVkPipelineCacheCreateFlagBit=^TVkPipelineCacheCreateFlagBit;

     TVkPipelineCacheCreateFlagBits= Set of TVkPipelineCacheCreateFlagBit; // This is SET OF
     PPVkPipelineCacheCreateFlagBits=^PVkPipelineCacheCreateFlagBits;
     PVkPipelineCacheCreateFlagBits=^TVkPipelineCacheCreateFlagBits;

     TVkPrimitiveTopology=
      (
       VK_PRIMITIVE_TOPOLOGY_POINT_LIST=0,
       VK_PRIMITIVE_TOPOLOGY_LINE_LIST=1,
       VK_PRIMITIVE_TOPOLOGY_LINE_STRIP=2,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST=3,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP=4,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN=5,
       VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY=6,
       VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY=7,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY=8,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY=9,
       VK_PRIMITIVE_TOPOLOGY_PATCH_LIST=10
      );
     PPVkPrimitiveTopology=^PVkPrimitiveTopology;
     PVkPrimitiveTopology=^TVkPrimitiveTopology;

     TVkSharingMode=
      (
       VK_SHARING_MODE_EXCLUSIVE=0,
       VK_SHARING_MODE_CONCURRENT=1
      );
     PPVkSharingMode=^PVkSharingMode;
     PVkSharingMode=^TVkSharingMode;

     TVkIndexType=
      (
       VK_INDEX_TYPE_UINT16=0,
       VK_INDEX_TYPE_UINT32=1,
       VK_INDEX_TYPE_NONE_KHR=1000150000,
       VK_INDEX_TYPE_UINT8_EXT=1000265000,
       VK_INDEX_TYPE_NONE_NV=VK_INDEX_TYPE_NONE_KHR
      );
     PPVkIndexType=^PVkIndexType;
     PVkIndexType=^TVkIndexType;

     TVkFilter=
      (
       VK_FILTER_NEAREST=0,
       VK_FILTER_LINEAR=1,
       VK_FILTER_CUBIC_IMG=1000015000,
       VK_FILTER_CUBIC_EXT=VK_FILTER_CUBIC_IMG
      );
     PPVkFilter=^PVkFilter;
     PVkFilter=^TVkFilter;

     TVkSamplerMipmapMode=
      (
       VK_SAMPLER_MIPMAP_MODE_NEAREST=0,                                         // Choose nearest mip level
       VK_SAMPLER_MIPMAP_MODE_LINEAR=1                                           // Linear filter between mip levels
      );
     PPVkSamplerMipmapMode=^PVkSamplerMipmapMode;
     PVkSamplerMipmapMode=^TVkSamplerMipmapMode;

     TVkSamplerAddressMode=
      (
       VK_SAMPLER_ADDRESS_MODE_REPEAT=0,
       VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT=1,
       VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE=2,
       VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER=3,
       VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE=4,
       VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR=VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE
      );
     PPVkSamplerAddressMode=^PVkSamplerAddressMode;
     PVkSamplerAddressMode=^TVkSamplerAddressMode;

     TVkCompareOp=
      (
       VK_COMPARE_OP_NEVER=0,
       VK_COMPARE_OP_LESS=1,
       VK_COMPARE_OP_EQUAL=2,
       VK_COMPARE_OP_LESS_OR_EQUAL=3,
       VK_COMPARE_OP_GREATER=4,
       VK_COMPARE_OP_NOT_EQUAL=5,
       VK_COMPARE_OP_GREATER_OR_EQUAL=6,
       VK_COMPARE_OP_ALWAYS=7
      );
     PPVkCompareOp=^PVkCompareOp;
     PVkCompareOp=^TVkCompareOp;

     TVkPolygonMode=
      (
       VK_POLYGON_MODE_FILL=0,
       VK_POLYGON_MODE_LINE=1,
       VK_POLYGON_MODE_POINT=2,
       VK_POLYGON_MODE_FILL_RECTANGLE_NV=1000153000
      );
     PPVkPolygonMode=^PVkPolygonMode;
     PVkPolygonMode=^TVkPolygonMode;

     VkCullModeFlagBits_=
      (
       VK_CULL_MODE_NONE=0,
       VK_CULL_MODE_FRONT_BIT=1,
       VK_CULL_MODE_BACK_BIT=2,
       VK_CULL_MODE_FRONT_AND_BACK=3
      );
     TVkCullModeFlagBit=VkCullModeFlagBits_;
     PPVkCullModeFlagBit=^PVkCullModeFlagBit;
     PVkCullModeFlagBit=^TVkCullModeFlagBit;

     TVkCullModeFlagBits= Set of TVkCullModeFlagBit; // This is SET OF
     PPVkCullModeFlagBits=^PVkCullModeFlagBits;
     PVkCullModeFlagBits=^TVkCullModeFlagBits;

     TVkFrontFace=
      (
       VK_FRONT_FACE_COUNTER_CLOCKWISE=0,
       VK_FRONT_FACE_CLOCKWISE=1
      );
     PPVkFrontFace=^PVkFrontFace;
     PVkFrontFace=^TVkFrontFace;

     TVkBlendFactor=
      (
       VK_BLEND_FACTOR_ZERO=0,
       VK_BLEND_FACTOR_ONE=1,
       VK_BLEND_FACTOR_SRC_COLOR=2,
       VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR=3,
       VK_BLEND_FACTOR_DST_COLOR=4,
       VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR=5,
       VK_BLEND_FACTOR_SRC_ALPHA=6,
       VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA=7,
       VK_BLEND_FACTOR_DST_ALPHA=8,
       VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA=9,
       VK_BLEND_FACTOR_CONSTANT_COLOR=10,
       VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR=11,
       VK_BLEND_FACTOR_CONSTANT_ALPHA=12,
       VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA=13,
       VK_BLEND_FACTOR_SRC_ALPHA_SATURATE=14,
       VK_BLEND_FACTOR_SRC1_COLOR=15,
       VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR=16,
       VK_BLEND_FACTOR_SRC1_ALPHA=17,
       VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA=18
      );
     PPVkBlendFactor=^PVkBlendFactor;
     PVkBlendFactor=^TVkBlendFactor;

     TVkBlendOp=
      (
       VK_BLEND_OP_ADD=0,
       VK_BLEND_OP_SUBTRACT=1,
       VK_BLEND_OP_REVERSE_SUBTRACT=2,
       VK_BLEND_OP_MIN=3,
       VK_BLEND_OP_MAX=4,
       VK_BLEND_OP_ZERO_EXT=1000148000,
       VK_BLEND_OP_SRC_EXT=1000148001,
       VK_BLEND_OP_DST_EXT=1000148002,
       VK_BLEND_OP_SRC_OVER_EXT=1000148003,
       VK_BLEND_OP_DST_OVER_EXT=1000148004,
       VK_BLEND_OP_SRC_IN_EXT=1000148005,
       VK_BLEND_OP_DST_IN_EXT=1000148006,
       VK_BLEND_OP_SRC_OUT_EXT=1000148007,
       VK_BLEND_OP_DST_OUT_EXT=1000148008,
       VK_BLEND_OP_SRC_ATOP_EXT=1000148009,
       VK_BLEND_OP_DST_ATOP_EXT=1000148010,
       VK_BLEND_OP_XOR_EXT=1000148011,
       VK_BLEND_OP_MULTIPLY_EXT=1000148012,
       VK_BLEND_OP_SCREEN_EXT=1000148013,
       VK_BLEND_OP_OVERLAY_EXT=1000148014,
       VK_BLEND_OP_DARKEN_EXT=1000148015,
       VK_BLEND_OP_LIGHTEN_EXT=1000148016,
       VK_BLEND_OP_COLORDODGE_EXT=1000148017,
       VK_BLEND_OP_COLORBURN_EXT=1000148018,
       VK_BLEND_OP_HARDLIGHT_EXT=1000148019,
       VK_BLEND_OP_SOFTLIGHT_EXT=1000148020,
       VK_BLEND_OP_DIFFERENCE_EXT=1000148021,
       VK_BLEND_OP_EXCLUSION_EXT=1000148022,
       VK_BLEND_OP_INVERT_EXT=1000148023,
       VK_BLEND_OP_INVERT_RGB_EXT=1000148024,
       VK_BLEND_OP_LINEARDODGE_EXT=1000148025,
       VK_BLEND_OP_LINEARBURN_EXT=1000148026,
       VK_BLEND_OP_VIVIDLIGHT_EXT=1000148027,
       VK_BLEND_OP_LINEARLIGHT_EXT=1000148028,
       VK_BLEND_OP_PINLIGHT_EXT=1000148029,
       VK_BLEND_OP_HARDMIX_EXT=1000148030,
       VK_BLEND_OP_HSL_HUE_EXT=1000148031,
       VK_BLEND_OP_HSL_SATURATION_EXT=1000148032,
       VK_BLEND_OP_HSL_COLOR_EXT=1000148033,
       VK_BLEND_OP_HSL_LUMINOSITY_EXT=1000148034,
       VK_BLEND_OP_PLUS_EXT=1000148035,
       VK_BLEND_OP_PLUS_CLAMPED_EXT=1000148036,
       VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT=1000148037,
       VK_BLEND_OP_PLUS_DARKER_EXT=1000148038,
       VK_BLEND_OP_MINUS_EXT=1000148039,
       VK_BLEND_OP_MINUS_CLAMPED_EXT=1000148040,
       VK_BLEND_OP_CONTRAST_EXT=1000148041,
       VK_BLEND_OP_INVERT_OVG_EXT=1000148042,
       VK_BLEND_OP_RED_EXT=1000148043,
       VK_BLEND_OP_GREEN_EXT=1000148044,
       VK_BLEND_OP_BLUE_EXT=1000148045
      );
     PPVkBlendOp=^PVkBlendOp;
     PVkBlendOp=^TVkBlendOp;

     TVkStencilOp=
      (
       VK_STENCIL_OP_KEEP=0,
       VK_STENCIL_OP_ZERO=1,
       VK_STENCIL_OP_REPLACE=2,
       VK_STENCIL_OP_INCREMENT_AND_CLAMP=3,
       VK_STENCIL_OP_DECREMENT_AND_CLAMP=4,
       VK_STENCIL_OP_INVERT=5,
       VK_STENCIL_OP_INCREMENT_AND_WRAP=6,
       VK_STENCIL_OP_DECREMENT_AND_WRAP=7
      );
     PPVkStencilOp=^PVkStencilOp;
     PVkStencilOp=^TVkStencilOp;

     TVkLogicOp=
      (
       VK_LOGIC_OP_CLEAR=0,
       VK_LOGIC_OP_AND=1,
       VK_LOGIC_OP_AND_REVERSE=2,
       VK_LOGIC_OP_COPY=3,
       VK_LOGIC_OP_AND_INVERTED=4,
       VK_LOGIC_OP_NO_OP=5,
       VK_LOGIC_OP_XOR=6,
       VK_LOGIC_OP_OR=7,
       VK_LOGIC_OP_NOR=8,
       VK_LOGIC_OP_EQUIVALENT=9,
       VK_LOGIC_OP_INVERT=10,
       VK_LOGIC_OP_OR_REVERSE=11,
       VK_LOGIC_OP_COPY_INVERTED=12,
       VK_LOGIC_OP_OR_INVERTED=13,
       VK_LOGIC_OP_NAND=14,
       VK_LOGIC_OP_SET=15
      );
     PPVkLogicOp=^PVkLogicOp;
     PVkLogicOp=^TVkLogicOp;

     TVkInternalAllocationType=
      (
       VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE=0
      );
     PPVkInternalAllocationType=^PVkInternalAllocationType;
     PVkInternalAllocationType=^TVkInternalAllocationType;

     TVkSystemAllocationScope=
      (
       VK_SYSTEM_ALLOCATION_SCOPE_COMMAND=0,
       VK_SYSTEM_ALLOCATION_SCOPE_OBJECT=1,
       VK_SYSTEM_ALLOCATION_SCOPE_CACHE=2,
       VK_SYSTEM_ALLOCATION_SCOPE_DEVICE=3,
       VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE=4
      );
     PPVkSystemAllocationScope=^PVkSystemAllocationScope;
     PVkSystemAllocationScope=^TVkSystemAllocationScope;

     TVkPhysicalDeviceType=
      (
       VK_PHYSICAL_DEVICE_TYPE_OTHER=0,
       VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU=1,
       VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU=2,
       VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU=3,
       VK_PHYSICAL_DEVICE_TYPE_CPU=4
      );
     PPVkPhysicalDeviceType=^PVkPhysicalDeviceType;
     PVkPhysicalDeviceType=^TVkPhysicalDeviceType;

     TVkVertexInputRate=
      (
       VK_VERTEX_INPUT_RATE_VERTEX=0,
       VK_VERTEX_INPUT_RATE_INSTANCE=1
      );
     PPVkVertexInputRate=^PVkVertexInputRate;
     PVkVertexInputRate=^TVkVertexInputRate;

     TVkFormat=
      (
       VK_FORMAT_UNDEFINED=0,
       VK_FORMAT_R4G4_UNORM_PACK8=1,
       VK_FORMAT_R4G4B4A4_UNORM_PACK16=2,
       VK_FORMAT_B4G4R4A4_UNORM_PACK16=3,
       VK_FORMAT_R5G6B5_UNORM_PACK16=4,
       VK_FORMAT_B5G6R5_UNORM_PACK16=5,
       VK_FORMAT_R5G5B5A1_UNORM_PACK16=6,
       VK_FORMAT_B5G5R5A1_UNORM_PACK16=7,
       VK_FORMAT_A1R5G5B5_UNORM_PACK16=8,
       VK_FORMAT_R8_UNORM=9,
       VK_FORMAT_R8_SNORM=10,
       VK_FORMAT_R8_USCALED=11,
       VK_FORMAT_R8_SSCALED=12,
       VK_FORMAT_R8_UINT=13,
       VK_FORMAT_R8_SINT=14,
       VK_FORMAT_R8_SRGB=15,
       VK_FORMAT_R8G8_UNORM=16,
       VK_FORMAT_R8G8_SNORM=17,
       VK_FORMAT_R8G8_USCALED=18,
       VK_FORMAT_R8G8_SSCALED=19,
       VK_FORMAT_R8G8_UINT=20,
       VK_FORMAT_R8G8_SINT=21,
       VK_FORMAT_R8G8_SRGB=22,
       VK_FORMAT_R8G8B8_UNORM=23,
       VK_FORMAT_R8G8B8_SNORM=24,
       VK_FORMAT_R8G8B8_USCALED=25,
       VK_FORMAT_R8G8B8_SSCALED=26,
       VK_FORMAT_R8G8B8_UINT=27,
       VK_FORMAT_R8G8B8_SINT=28,
       VK_FORMAT_R8G8B8_SRGB=29,
       VK_FORMAT_B8G8R8_UNORM=30,
       VK_FORMAT_B8G8R8_SNORM=31,
       VK_FORMAT_B8G8R8_USCALED=32,
       VK_FORMAT_B8G8R8_SSCALED=33,
       VK_FORMAT_B8G8R8_UINT=34,
       VK_FORMAT_B8G8R8_SINT=35,
       VK_FORMAT_B8G8R8_SRGB=36,
       VK_FORMAT_R8G8B8A8_UNORM=37,
       VK_FORMAT_R8G8B8A8_SNORM=38,
       VK_FORMAT_R8G8B8A8_USCALED=39,
       VK_FORMAT_R8G8B8A8_SSCALED=40,
       VK_FORMAT_R8G8B8A8_UINT=41,
       VK_FORMAT_R8G8B8A8_SINT=42,
       VK_FORMAT_R8G8B8A8_SRGB=43,
       VK_FORMAT_B8G8R8A8_UNORM=44,
       VK_FORMAT_B8G8R8A8_SNORM=45,
       VK_FORMAT_B8G8R8A8_USCALED=46,
       VK_FORMAT_B8G8R8A8_SSCALED=47,
       VK_FORMAT_B8G8R8A8_UINT=48,
       VK_FORMAT_B8G8R8A8_SINT=49,
       VK_FORMAT_B8G8R8A8_SRGB=50,
       VK_FORMAT_A8B8G8R8_UNORM_PACK32=51,
       VK_FORMAT_A8B8G8R8_SNORM_PACK32=52,
       VK_FORMAT_A8B8G8R8_USCALED_PACK32=53,
       VK_FORMAT_A8B8G8R8_SSCALED_PACK32=54,
       VK_FORMAT_A8B8G8R8_UINT_PACK32=55,
       VK_FORMAT_A8B8G8R8_SINT_PACK32=56,
       VK_FORMAT_A8B8G8R8_SRGB_PACK32=57,
       VK_FORMAT_A2R10G10B10_UNORM_PACK32=58,
       VK_FORMAT_A2R10G10B10_SNORM_PACK32=59,
       VK_FORMAT_A2R10G10B10_USCALED_PACK32=60,
       VK_FORMAT_A2R10G10B10_SSCALED_PACK32=61,
       VK_FORMAT_A2R10G10B10_UINT_PACK32=62,
       VK_FORMAT_A2R10G10B10_SINT_PACK32=63,
       VK_FORMAT_A2B10G10R10_UNORM_PACK32=64,
       VK_FORMAT_A2B10G10R10_SNORM_PACK32=65,
       VK_FORMAT_A2B10G10R10_USCALED_PACK32=66,
       VK_FORMAT_A2B10G10R10_SSCALED_PACK32=67,
       VK_FORMAT_A2B10G10R10_UINT_PACK32=68,
       VK_FORMAT_A2B10G10R10_SINT_PACK32=69,
       VK_FORMAT_R16_UNORM=70,
       VK_FORMAT_R16_SNORM=71,
       VK_FORMAT_R16_USCALED=72,
       VK_FORMAT_R16_SSCALED=73,
       VK_FORMAT_R16_UINT=74,
       VK_FORMAT_R16_SINT=75,
       VK_FORMAT_R16_SFLOAT=76,
       VK_FORMAT_R16G16_UNORM=77,
       VK_FORMAT_R16G16_SNORM=78,
       VK_FORMAT_R16G16_USCALED=79,
       VK_FORMAT_R16G16_SSCALED=80,
       VK_FORMAT_R16G16_UINT=81,
       VK_FORMAT_R16G16_SINT=82,
       VK_FORMAT_R16G16_SFLOAT=83,
       VK_FORMAT_R16G16B16_UNORM=84,
       VK_FORMAT_R16G16B16_SNORM=85,
       VK_FORMAT_R16G16B16_USCALED=86,
       VK_FORMAT_R16G16B16_SSCALED=87,
       VK_FORMAT_R16G16B16_UINT=88,
       VK_FORMAT_R16G16B16_SINT=89,
       VK_FORMAT_R16G16B16_SFLOAT=90,
       VK_FORMAT_R16G16B16A16_UNORM=91,
       VK_FORMAT_R16G16B16A16_SNORM=92,
       VK_FORMAT_R16G16B16A16_USCALED=93,
       VK_FORMAT_R16G16B16A16_SSCALED=94,
       VK_FORMAT_R16G16B16A16_UINT=95,
       VK_FORMAT_R16G16B16A16_SINT=96,
       VK_FORMAT_R16G16B16A16_SFLOAT=97,
       VK_FORMAT_R32_UINT=98,
       VK_FORMAT_R32_SINT=99,
       VK_FORMAT_R32_SFLOAT=100,
       VK_FORMAT_R32G32_UINT=101,
       VK_FORMAT_R32G32_SINT=102,
       VK_FORMAT_R32G32_SFLOAT=103,
       VK_FORMAT_R32G32B32_UINT=104,
       VK_FORMAT_R32G32B32_SINT=105,
       VK_FORMAT_R32G32B32_SFLOAT=106,
       VK_FORMAT_R32G32B32A32_UINT=107,
       VK_FORMAT_R32G32B32A32_SINT=108,
       VK_FORMAT_R32G32B32A32_SFLOAT=109,
       VK_FORMAT_R64_UINT=110,
       VK_FORMAT_R64_SINT=111,
       VK_FORMAT_R64_SFLOAT=112,
       VK_FORMAT_R64G64_UINT=113,
       VK_FORMAT_R64G64_SINT=114,
       VK_FORMAT_R64G64_SFLOAT=115,
       VK_FORMAT_R64G64B64_UINT=116,
       VK_FORMAT_R64G64B64_SINT=117,
       VK_FORMAT_R64G64B64_SFLOAT=118,
       VK_FORMAT_R64G64B64A64_UINT=119,
       VK_FORMAT_R64G64B64A64_SINT=120,
       VK_FORMAT_R64G64B64A64_SFLOAT=121,
       VK_FORMAT_B10G11R11_UFLOAT_PACK32=122,
       VK_FORMAT_E5B9G9R9_UFLOAT_PACK32=123,
       VK_FORMAT_D16_UNORM=124,
       VK_FORMAT_X8_D24_UNORM_PACK32=125,
       VK_FORMAT_D32_SFLOAT=126,
       VK_FORMAT_S8_UINT=127,
       VK_FORMAT_D16_UNORM_S8_UINT=128,
       VK_FORMAT_D24_UNORM_S8_UINT=129,
       VK_FORMAT_D32_SFLOAT_S8_UINT=130,
       VK_FORMAT_BC1_RGB_UNORM_BLOCK=131,
       VK_FORMAT_BC1_RGB_SRGB_BLOCK=132,
       VK_FORMAT_BC1_RGBA_UNORM_BLOCK=133,
       VK_FORMAT_BC1_RGBA_SRGB_BLOCK=134,
       VK_FORMAT_BC2_UNORM_BLOCK=135,
       VK_FORMAT_BC2_SRGB_BLOCK=136,
       VK_FORMAT_BC3_UNORM_BLOCK=137,
       VK_FORMAT_BC3_SRGB_BLOCK=138,
       VK_FORMAT_BC4_UNORM_BLOCK=139,
       VK_FORMAT_BC4_SNORM_BLOCK=140,
       VK_FORMAT_BC5_UNORM_BLOCK=141,
       VK_FORMAT_BC5_SNORM_BLOCK=142,
       VK_FORMAT_BC6H_UFLOAT_BLOCK=143,
       VK_FORMAT_BC6H_SFLOAT_BLOCK=144,
       VK_FORMAT_BC7_UNORM_BLOCK=145,
       VK_FORMAT_BC7_SRGB_BLOCK=146,
       VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK=147,
       VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK=148,
       VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK=149,
       VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK=150,
       VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK=151,
       VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK=152,
       VK_FORMAT_EAC_R11_UNORM_BLOCK=153,
       VK_FORMAT_EAC_R11_SNORM_BLOCK=154,
       VK_FORMAT_EAC_R11G11_UNORM_BLOCK=155,
       VK_FORMAT_EAC_R11G11_SNORM_BLOCK=156,
       VK_FORMAT_ASTC_4x4_UNORM_BLOCK=157,
       VK_FORMAT_ASTC_4x4_SRGB_BLOCK=158,
       VK_FORMAT_ASTC_5x4_UNORM_BLOCK=159,
       VK_FORMAT_ASTC_5x4_SRGB_BLOCK=160,
       VK_FORMAT_ASTC_5x5_UNORM_BLOCK=161,
       VK_FORMAT_ASTC_5x5_SRGB_BLOCK=162,
       VK_FORMAT_ASTC_6x5_UNORM_BLOCK=163,
       VK_FORMAT_ASTC_6x5_SRGB_BLOCK=164,
       VK_FORMAT_ASTC_6x6_UNORM_BLOCK=165,
       VK_FORMAT_ASTC_6x6_SRGB_BLOCK=166,
       VK_FORMAT_ASTC_8x5_UNORM_BLOCK=167,
       VK_FORMAT_ASTC_8x5_SRGB_BLOCK=168,
       VK_FORMAT_ASTC_8x6_UNORM_BLOCK=169,
       VK_FORMAT_ASTC_8x6_SRGB_BLOCK=170,
       VK_FORMAT_ASTC_8x8_UNORM_BLOCK=171,
       VK_FORMAT_ASTC_8x8_SRGB_BLOCK=172,
       VK_FORMAT_ASTC_10x5_UNORM_BLOCK=173,
       VK_FORMAT_ASTC_10x5_SRGB_BLOCK=174,
       VK_FORMAT_ASTC_10x6_UNORM_BLOCK=175,
       VK_FORMAT_ASTC_10x6_SRGB_BLOCK=176,
       VK_FORMAT_ASTC_10x8_UNORM_BLOCK=177,
       VK_FORMAT_ASTC_10x8_SRGB_BLOCK=178,
       VK_FORMAT_ASTC_10x10_UNORM_BLOCK=179,
       VK_FORMAT_ASTC_10x10_SRGB_BLOCK=180,
       VK_FORMAT_ASTC_12x10_UNORM_BLOCK=181,
       VK_FORMAT_ASTC_12x10_SRGB_BLOCK=182,
       VK_FORMAT_ASTC_12x12_UNORM_BLOCK=183,
       VK_FORMAT_ASTC_12x12_SRGB_BLOCK=184,
       VK_FORMAT_G8B8G8R8_422_UNORM=999999000,
       VK_FORMAT_B8G8R8G8_422_UNORM=999999001,
       VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM=999999002,
       VK_FORMAT_G8_B8R8_2PLANE_420_UNORM=999999003,
       VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM=999999004,
       VK_FORMAT_G8_B8R8_2PLANE_422_UNORM=999999005,
       VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM=999999006,
       VK_FORMAT_R10X6_UNORM_PACK16=999999007,
       VK_FORMAT_R10X6G10X6_UNORM_2PACK16=999999008,
       VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16=999999009,
       VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16=999999010,
       VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16=999999011,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16=999999012,
       VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16=999999013,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16=999999014,
       VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16=999999015,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16=999999016,
       VK_FORMAT_R12X4_UNORM_PACK16=999999017,
       VK_FORMAT_R12X4G12X4_UNORM_2PACK16=999999018,
       VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16=999999019,
       VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16=999999020,
       VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16=999999021,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16=999999022,
       VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16=999999023,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16=999999024,
       VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16=999999025,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16=999999026,
       VK_FORMAT_G16B16G16R16_422_UNORM=999999027,
       VK_FORMAT_B16G16R16G16_422_UNORM=999999028,
       VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM=999999029,
       VK_FORMAT_G16_B16R16_2PLANE_420_UNORM=999999030,
       VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM=999999031,
       VK_FORMAT_G16_B16R16_2PLANE_422_UNORM=999999032,
       VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM=999999033,
       VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG=1000054000,
       VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG=1000054001,
       VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG=1000054002,
       VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG=1000054003,
       VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG=1000054004,
       VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG=1000054005,
       VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG=1000054006,
       VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG=1000054007,
       VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT=1000066000,
       VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT=1000066001,
       VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT=1000066002,
       VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT=1000066003,
       VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT=1000066004,
       VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT=1000066005,
       VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT=1000066006,
       VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT=1000066007,
       VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT=1000066008,
       VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT=1000066009,
       VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT=1000066010,
       VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT=1000066011,
       VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT=1000066012,
       VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT=1000066013,
       VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT=1000288000,
       VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT=1000288001,
       VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT=1000288002,
       VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT=1000288003,
       VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT=1000288004,
       VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT=1000288005,
       VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT=1000288006,
       VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT=1000288007,
       VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT=1000288008,
       VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT=1000288009,
       VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT=1000288010,
       VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT=1000288011,
       VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT=1000288012,
       VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT=1000288013,
       VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT=1000288014,
       VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT=1000288015,
       VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT=1000288016,
       VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT=1000288017,
       VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT=1000288018,
       VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT=1000288019,
       VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT=1000288020,
       VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT=1000288021,
       VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT=1000288022,
       VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT=1000288023,
       VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT=1000288024,
       VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT=1000288025,
       VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT=1000288026,
       VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT=1000288027,
       VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT=1000288028,
       VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT=1000288029,
       VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT=1000340000,
       VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT=1000340001,
       VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR=VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
       VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR=VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
       VK_FORMAT_B16G16R16G16_422_UNORM_KHR=VK_FORMAT_B16G16R16G16_422_UNORM,
       VK_FORMAT_B8G8R8G8_422_UNORM_KHR=VK_FORMAT_B8G8R8G8_422_UNORM,
       VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR=VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
       VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR=VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
       VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR=VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR=VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR=VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR=VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
       VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR=VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
       VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR=VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
       VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR=VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR=VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR=VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR=VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
       VK_FORMAT_G16B16G16R16_422_UNORM_KHR=VK_FORMAT_G16B16G16R16_422_UNORM,
       VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR=VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
       VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR=VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
       VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR=VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
       VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR=VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
       VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR=VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
       VK_FORMAT_G8B8G8R8_422_UNORM_KHR=VK_FORMAT_G8B8G8R8_422_UNORM,
       VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR=VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
       VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR=VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
       VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR=VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
       VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR=VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
       VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR=VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
       VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR=VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
       VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR=VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
       VK_FORMAT_R10X6_UNORM_PACK16_KHR=VK_FORMAT_R10X6_UNORM_PACK16,
       VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR=VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
       VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR=VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
       VK_FORMAT_R12X4_UNORM_PACK16_KHR=VK_FORMAT_R12X4_UNORM_PACK16
      );
     PPVkFormat=^PVkFormat;
     PVkFormat=^TVkFormat;

     TVkStructureType=
      (
       VK_STRUCTURE_TYPE_APPLICATION_INFO=0,
       VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO=1,
       VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO=2,
       VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO=3,
       VK_STRUCTURE_TYPE_SUBMIT_INFO=4,
       VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO=5,
       VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE=6,
       VK_STRUCTURE_TYPE_BIND_SPARSE_INFO=7,
       VK_STRUCTURE_TYPE_FENCE_CREATE_INFO=8,
       VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO=9,
       VK_STRUCTURE_TYPE_EVENT_CREATE_INFO=10,
       VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO=11,
       VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO=12,
       VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO=13,
       VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO=14,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO=15,
       VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO=16,
       VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO=17,
       VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO=18,
       VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO=19,
       VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO=20,
       VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO=21,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO=22,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO=23,
       VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO=24,
       VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO=25,
       VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO=26,
       VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO=27,
       VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO=28,
       VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO=29,
       VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO=30,
       VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO=31,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO=32,
       VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO=33,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO=34,
       VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET=35,
       VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET=36,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO=37,
       VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO=38,
       VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO=39,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO=40,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO=41,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO=42,
       VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO=43,
       VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER=44,
       VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER=45,
       VK_STRUCTURE_TYPE_MEMORY_BARRIER=46,
       VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO=47,                         // Reserved for internal use by the loader, layers, and ICDs
       VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO=48,                           // Reserved for internal use by the loader, layers, and ICDs
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES=49,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES=50,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES=51,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES=52,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES=999999000,
       VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES=999999000,
       VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS=999999000,
       VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES=999999000,
       VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES=999999000,
       VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO=999999000,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO=999999000,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO=999999000,
       VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES=999999000,
       VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES=999999000,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES=999999000,
       VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES=999999000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES=999999000,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO=999999001,
       VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO=999999001,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO=999999001,
       VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2=999999001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2=999999001,
       VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO=999999001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES=999999001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES=999999001,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO=999999001,
       VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES=999999001,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO=999999001,
       VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES=999999001,
       VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES=999999001,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT=999999001,
       VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2=999999001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES=999999001,
       VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE=999999001,
       VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO=999999001,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO=999999001,
       VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT=999999001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES=999999001,
       VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO=999999001,
       VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2=999999002,
       VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2=999999002,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO=999999002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES=999999002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES=999999002,
       VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO=999999002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO=999999002,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO=999999002,
       VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2=999999002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES=999999002,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO=999999002,
       VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT=999999002,
       VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO=999999002,
       VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO=999999002,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO=999999003,
       VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2=999999003,
       VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2=999999003,
       VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO=999999003,
       VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2=999999003,
       VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO=999999003,
       VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES=999999003,
       VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2=999999003,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO=999999003,
       VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO=999999003,
       VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO=999999003,
       VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO=999999003,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO=999999004,
       VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2=999999004,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2=999999004,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES=999999004,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES=999999004,
       VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2=999999004,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT=999999004,
       VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO=999999004,
       VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO=999999004,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO=999999005,
       VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2=999999005,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES=999999005,
       VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO=999999005,
       VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO=999999005,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO=999999006,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2=999999006,
       VK_STRUCTURE_TYPE_SUBPASS_END_INFO=999999006,
       VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2=999999007,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2=999999008,
       VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO=999999013,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO=999999014,
       VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR=1000001000,
       VK_STRUCTURE_TYPE_PRESENT_INFO_KHR=1000001001,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR=1000001007,
       VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR=1000001008,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR=1000001009,
       VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR=1000001010,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR=1000001011,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR=1000001012,
       VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR=1000002000,
       VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR=1000002001,
       VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR=1000003000,
       VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR=1000004000,
       VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR=1000005000,
       VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR=1000006000,
       VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR=1000008000,
       VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR=1000009000,
       VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID=1000010000,
       VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID=1000010001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID=1000010002,
       VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT=1000011000,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD=1000018000,
       VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT=1000022000,
       VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT=1000022001,
       VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT=1000022002,
       VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV=1000026000,
       VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV=1000026001,
       VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV=1000026002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT=1000028000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT=1000028001,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT=1000028002,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX=1000030000,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX=1000030001,
       VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD=1000041000,
       VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP=1000049000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV=1000050000,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV=1000056000,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV=1000056001,
       VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV=1000057000,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV=1000057001,
       VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV=1000058000,
       VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT=1000061000,
       VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN=1000062000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT=1000066000,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT=1000067000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT=1000067001,
       VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR=1000073000,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR=1000073001,
       VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR=1000073002,
       VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR=1000073003,
       VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR=1000074000,
       VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR=1000074001,
       VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR=1000074002,
       VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR=1000075000,
       VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR=1000078000,
       VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR=1000078001,
       VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR=1000078002,
       VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR=1000078003,
       VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR=1000079000,
       VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR=1000079001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR=1000080000,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT=1000081000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT=1000081001,
       VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT=1000081002,
       VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR=1000084000,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV=1000087000,
       VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT=1000090000,
       VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT=1000091000,
       VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT=1000091001,
       VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT=1000091002,
       VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT=1000091003,
       VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE=1000092000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX=1000097000,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV=1000098000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT=1000099000,
       VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT=1000099001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT=1000101000,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT=1000101001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT=1000102000,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT=1000102001,
       VK_STRUCTURE_TYPE_HDR_METADATA_EXT=1000105000,
       VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR=1000111000,
       VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR=1000114000,
       VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR=1000114001,
       VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR=1000114002,
       VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR=1000115000,
       VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR=1000115001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR=1000116000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR=1000116001,
       VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR=1000116002,
       VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR=1000116003,
       VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR=1000116004,
       VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR=1000116005,
       VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR=1000116006,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR=1000119000,
       VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR=1000119001,
       VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR=1000119002,
       VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR=1000121000,
       VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR=1000121001,
       VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR=1000121002,
       VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR=1000121003,
       VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR=1000121004,
       VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK=1000122000,
       VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK=1000123000,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT=1000128000,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT=1000128001,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT=1000128002,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT=1000128003,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT=1000128004,
       VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID=1000129000,
       VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID=1000129001,
       VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID=1000129002,
       VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID=1000129003,
       VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID=1000129004,
       VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID=1000129005,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT=1000138000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT=1000138001,
       VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT=1000138002,
       VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT=1000138003,
       VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT=1000143000,
       VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT=1000143001,
       VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT=1000143002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT=1000143003,
       VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT=1000143004,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT=1000148000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT=1000148001,
       VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT=1000148002,
       VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV=1000149000,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR=1000150000,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR=1000150001,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR=1000150002,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR=1000150003,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR=1000150004,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR=1000150005,
       VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR=1000150006,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR=1000150006,
       VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR=1000150007,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR=1000150008,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR=1000150009,
       VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR=1000150010,
       VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR=1000150011,
       VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR=1000150012,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR=1000150013,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR=1000150014,
       VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR=1000150015,
       VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR=1000150016,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR=1000150017,
       VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR=1000150018,
       VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV=1000152000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV=1000154000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV=1000154001,
       VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT=1000158000,
       VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT=1000158001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT=1000158002,
       VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT=1000158003,
       VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT=1000158004,
       VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT=1000158005,
       VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT=1000160000,
       VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT=1000160001,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV=1000164000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV=1000164001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV=1000164002,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV=1000164005,
       VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV=1000165000,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV=1000165001,
       VK_STRUCTURE_TYPE_GEOMETRY_NV=1000165003,
       VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV=1000165004,
       VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV=1000165005,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV=1000165008,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV=1000165009,
       VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV=1000165011,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV=1000165012,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV=1000166000,
       VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV=1000166001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT=1000170000,
       VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT=1000170001,
       VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT=1000174000,
       VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT=1000178000,
       VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT=1000178001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT=1000178002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR=1000181000,
       VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD=1000183000,
       VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT=1000184000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD=1000185000,
       VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD=1000189000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT=1000190000,
       VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT=1000190001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT=1000190002,
       VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP=1000191000,
       VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT=1000192000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV=1000201000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV=1000202000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV=1000202001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV=1000203000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV=1000204000,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV=1000205000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV=1000205002,
       VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV=1000206000,
       VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV=1000206001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL=1000209000,
       VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL=1000210000,
       VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL=1000210001,
       VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL=1000210002,
       VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL=1000210003,
       VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL=1000210004,
       VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL=1000210005,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT=1000212000,
       VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD=1000213000,
       VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD=1000213001,
       VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA=1000214000,
       VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT=1000217000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT=1000218000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT=1000218001,
       VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT=1000218002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT=1000225000,
       VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT=1000225001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT=1000225002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD=1000227000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD=1000229000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT=1000237000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT=1000238000,
       VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT=1000238001,
       VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR=1000239000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV=1000240000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT=1000244000,
       VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT=1000244002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT=1000245000,
       VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT=1000247000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV=1000249000,
       VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV=1000249001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV=1000249002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV=1000250000,
       VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV=1000250001,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV=1000250002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT=1000251000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT=1000252000,
       VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT=1000255000,
       VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT=1000255001,
       VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT=1000255002,
       VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT=1000256000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT=1000259000,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT=1000259001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT=1000259002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT=1000260000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT=1000265000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT=1000267000,
       VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR=1000268000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR=1000269000,
       VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR=1000269001,
       VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR=1000269002,
       VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR=1000269003,
       VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR=1000269004,
       VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR=1000269005,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT=1000276000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV=1000277000,
       VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV=1000277001,
       VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV=1000277002,
       VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV=1000277003,
       VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV=1000277004,
       VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV=1000277005,
       VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV=1000277006,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV=1000277007,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT=1000281000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT=1000281001,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM=1000282000,
       VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM=1000282001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT=1000286000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT=1000286001,
       VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT=1000287000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT=1000287001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT=1000287002,
       VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR=1000290000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT=1000295000,
       VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT=1000295001,
       VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT=1000295002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT=1000297000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV=1000300000,
       VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV=1000300001,
       VK_STRUCTURE_TYPE_RESERVED_QCOM=1000309000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT=1000332000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT=1000332001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT=1000335000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT=1000340000,
       VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT=1000346000,
       VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR=VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
       VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR=VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
       VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR=VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
       VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR=VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
       VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV=VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
       VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR=VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
       VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR=VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR=VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR=VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
       VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR=VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
       VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT=VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
       VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR=VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
       VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR=VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
       VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
       VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT=VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
       VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR=VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR=VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR=VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR=VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
       VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR=VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
       VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR=VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
       VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
       VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR=VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
       VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR=VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
       VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR=VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
       VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR=VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
       VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR=VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR=VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
       VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
       VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR=VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
       VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR=VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
       VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR=VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
       VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR=VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
       VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT=VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
       VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR=VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
       VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR=VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
       VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR=VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
       VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR=VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
       VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR=VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
       VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
       VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL=VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
       VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR=VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
       VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR=VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
       VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR=VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
       VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
       VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
       VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT=VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR=VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR=VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
       VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR=VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
       VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR=VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
       VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR=VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
       VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR=VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
       VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR=VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
       VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR=VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
       VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR=VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
       VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR=VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
       VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR=VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
       VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR=VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
       VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT=VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
       VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR=VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
       VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV=VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR
      );
     PPVkStructureType=^PVkStructureType;
     PVkStructureType=^TVkStructureType;

     TVkSubpassContents=
      (
       VK_SUBPASS_CONTENTS_INLINE=0,
       VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS=1
      );
     PPVkSubpassContents=^PVkSubpassContents;
     PVkSubpassContents=^TVkSubpassContents;

     TVkResult=
      (
       VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT=-1000255000,
       VK_ERROR_NOT_PERMITTED_EXT=-1000174001,
       VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT=-1000158000,
       VK_ERROR_INCOMPATIBLE_VERSION_KHR=-1000150000,
       VK_ERROR_INVALID_SHADER_NV=-1000012000,
       VK_ERROR_VALIDATION_FAILED_EXT=-1000011001,
       VK_ERROR_INCOMPATIBLE_DISPLAY_KHR=-1000003001,
       VK_ERROR_OUT_OF_DATE_KHR=-1000001004,
       VK_ERROR_NATIVE_WINDOW_IN_USE_KHR=-1000000001,
       VK_ERROR_SURFACE_LOST_KHR=-1000000000,
       VK_ERROR_INVALID_EXTERNAL_HANDLE=-999999003,
       VK_ERROR_OUT_OF_POOL_MEMORY=-999999000,
       VK_ERROR_FRAGMENTATION=-999999000,
       VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS=-999999000,
       VK_ERROR_UNUSED_START=-14,                                                // This is the next unused available error code (negative value)
       VK_ERROR_UNKNOWN=-13,                                                     // An unknown error has occurred, due to an implementation or application bug
       VK_ERROR_FRAGMENTED_POOL=-12,                                             // A requested pool allocation has failed due to fragmentation of the pool's memory
       VK_ERROR_FORMAT_NOT_SUPPORTED=-11,                                        // Requested format is not supported on this device
       VK_ERROR_TOO_MANY_OBJECTS=-10,                                            // Too many objects of the type have already been created
       VK_ERROR_INCOMPATIBLE_DRIVER=-9,                                          // Unable to find a Vulkan driver
       VK_ERROR_FEATURE_NOT_PRESENT=-8,                                          // Requested feature is not available on this device
       VK_ERROR_EXTENSION_NOT_PRESENT=-7,                                        // Extension specified does not exist
       VK_ERROR_LAYER_NOT_PRESENT=-6,                                            // Layer specified does not exist
       VK_ERROR_MEMORY_MAP_FAILED=-5,                                            // Mapping of a memory object has failed
       VK_ERROR_DEVICE_LOST=-4,                                                  // The logical device has been lost. See <<devsandqueues-lost-device>>
       VK_ERROR_INITIALIZATION_FAILED=-3,                                        // Initialization of a object has failed
       VK_ERROR_OUT_OF_DEVICE_MEMORY=-2,                                         // A device memory allocation has failed
       VK_ERROR_OUT_OF_HOST_MEMORY=-1,                                           // A host memory allocation has failed
       VK_SUCCESS=0,                                                             // Command completed successfully
       VK_NOT_READY=1,                                                           // A fence or query has not yet completed
       VK_TIMEOUT=2,                                                             // A wait operation has not completed in the specified time
       VK_EVENT_SET=3,                                                           // An event is signaled
       VK_EVENT_RESET=4,                                                         // An event is unsignaled
       VK_INCOMPLETE=5,                                                          // A return array was too small for the result
       VK_SUBOPTIMAL_KHR=1000001003,
       VK_THREAD_IDLE_KHR=1000268000,
       VK_THREAD_DONE_KHR=1000268001,
       VK_OPERATION_DEFERRED_KHR=1000268002,
       VK_OPERATION_NOT_DEFERRED_KHR=1000268003,
       VK_PIPELINE_COMPILE_REQUIRED_EXT=1000297000,
       VK_ERROR_FRAGMENTATION_EXT=VK_ERROR_FRAGMENTATION,
       VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR=VK_ERROR_INVALID_EXTERNAL_HANDLE,
       VK_ERROR_INVALID_DEVICE_ADDRESS_EXT=VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
       VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR=VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
       VK_ERROR_OUT_OF_POOL_MEMORY_KHR=VK_ERROR_OUT_OF_POOL_MEMORY,
       VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT=VK_PIPELINE_COMPILE_REQUIRED_EXT
      );
     PPVkResult=^PVkResult;
     PVkResult=^TVkResult;

     TVkDynamicState=
      (
       VK_DYNAMIC_STATE_VIEWPORT=0,
       VK_DYNAMIC_STATE_SCISSOR=1,
       VK_DYNAMIC_STATE_LINE_WIDTH=2,
       VK_DYNAMIC_STATE_DEPTH_BIAS=3,
       VK_DYNAMIC_STATE_BLEND_CONSTANTS=4,
       VK_DYNAMIC_STATE_DEPTH_BOUNDS=5,
       VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK=6,
       VK_DYNAMIC_STATE_STENCIL_WRITE_MASK=7,
       VK_DYNAMIC_STATE_STENCIL_REFERENCE=8,
       VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV=1000087000,
       VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT=1000099000,
       VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT=1000143000,
       VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV=1000164004,
       VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV=1000164006,
       VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV=1000205001,
       VK_DYNAMIC_STATE_LINE_STIPPLE_EXT=1000259000,
       VK_DYNAMIC_STATE_CULL_MODE_EXT=1000267000,
       VK_DYNAMIC_STATE_FRONT_FACE_EXT=1000267001,
       VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT=1000267002,
       VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT=1000267003,
       VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT=1000267004,
       VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT=1000267005,
       VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT=1000267006,
       VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT=1000267007,
       VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT=1000267008,
       VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT=1000267009,
       VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT=1000267010,
       VK_DYNAMIC_STATE_STENCIL_OP_EXT=1000267011
      );
     PPVkDynamicState=^PVkDynamicState;
     PVkDynamicState=^TVkDynamicState;

     TVkDescriptorUpdateTemplateType=
      (
       VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET=0,                      // Create descriptor update template for descriptor set updates
       VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR=1,
       VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR=VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET
      );
     PPVkDescriptorUpdateTemplateType=^PVkDescriptorUpdateTemplateType;
     PVkDescriptorUpdateTemplateType=^TVkDescriptorUpdateTemplateType;

     TVkObjectType=
      (
       VK_OBJECT_TYPE_UNKNOWN=0,
       VK_OBJECT_TYPE_INSTANCE=1,                                                // VkInstance
       VK_OBJECT_TYPE_PHYSICAL_DEVICE=2,                                         // VkPhysicalDevice
       VK_OBJECT_TYPE_DEVICE=3,                                                  // VkDevice
       VK_OBJECT_TYPE_QUEUE=4,                                                   // VkQueue
       VK_OBJECT_TYPE_SEMAPHORE=5,                                               // VkSemaphore
       VK_OBJECT_TYPE_COMMAND_BUFFER=6,                                          // VkCommandBuffer
       VK_OBJECT_TYPE_FENCE=7,                                                   // VkFence
       VK_OBJECT_TYPE_DEVICE_MEMORY=8,                                           // VkDeviceMemory
       VK_OBJECT_TYPE_BUFFER=9,                                                  // VkBuffer
       VK_OBJECT_TYPE_IMAGE=10,                                                  // VkImage
       VK_OBJECT_TYPE_EVENT=11,                                                  // VkEvent
       VK_OBJECT_TYPE_QUERY_POOL=12,                                             // VkQueryPool
       VK_OBJECT_TYPE_BUFFER_VIEW=13,                                            // VkBufferView
       VK_OBJECT_TYPE_IMAGE_VIEW=14,                                             // VkImageView
       VK_OBJECT_TYPE_SHADER_MODULE=15,                                          // VkShaderModule
       VK_OBJECT_TYPE_PIPELINE_CACHE=16,                                         // VkPipelineCache
       VK_OBJECT_TYPE_PIPELINE_LAYOUT=17,                                        // VkPipelineLayout
       VK_OBJECT_TYPE_RENDER_PASS=18,                                            // VkRenderPass
       VK_OBJECT_TYPE_PIPELINE=19,                                               // VkPipeline
       VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT=20,                                  // VkDescriptorSetLayout
       VK_OBJECT_TYPE_SAMPLER=21,                                                // VkSampler
       VK_OBJECT_TYPE_DESCRIPTOR_POOL=22,                                        // VkDescriptorPool
       VK_OBJECT_TYPE_DESCRIPTOR_SET=23,                                         // VkDescriptorSet
       VK_OBJECT_TYPE_FRAMEBUFFER=24,                                            // VkFramebuffer
       VK_OBJECT_TYPE_COMMAND_POOL=25,                                           // VkCommandPool
       VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION=999999000,
       VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE=999999000,
       VK_OBJECT_TYPE_SURFACE_KHR=1000000000,
       VK_OBJECT_TYPE_SWAPCHAIN_KHR=1000001000,
       VK_OBJECT_TYPE_DISPLAY_KHR=1000002000,
       VK_OBJECT_TYPE_DISPLAY_MODE_KHR=1000002001,
       VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT=1000011000,
       VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT=1000128000,
       VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR=1000150000,
       VK_OBJECT_TYPE_VALIDATION_CACHE_EXT=1000160000,
       VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL=1000210000,
       VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR=1000268000,
       VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV=1000277000,
       VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT=1000295000,
       VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV=VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
       VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR=VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
       VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR=VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION
      );
     PPVkObjectType=^PVkObjectType;
     PVkObjectType=^TVkObjectType;

     VkQueueFlagBits_=
      (
       VK_QUEUE_GRAPHICS_BIT=0,                                                  // Queue supports graphics operations
       VK_QUEUE_COMPUTE_BIT=1,                                                   // Queue supports compute operations
       VK_QUEUE_TRANSFER_BIT=2,                                                  // Queue supports transfer operations
       VK_QUEUE_SPARSE_BINDING_BIT=3,                                            // Queue supports sparse resource memory management operations
       VK_QUEUE_PROTECTED_BIT=4,
       VK_QUEUE_RESERVED_5_BIT_KHR=5,
       VK_QUEUE_RESERVED_6_BIT_KHR=6
      );
     TVkQueueFlagBit=VkQueueFlagBits_;
     PPVkQueueFlagBit=^PVkQueueFlagBit;
     PVkQueueFlagBit=^TVkQueueFlagBit;

     TVkQueueFlagBits= Set of TVkQueueFlagBit; // This is SET OF
     PPVkQueueFlagBits=^PVkQueueFlagBits;
     PVkQueueFlagBits=^TVkQueueFlagBits;

     VkRenderPassCreateFlagBits_=
      (
       VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR=0,
       VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM=1
      );
     TVkRenderPassCreateFlagBit=VkRenderPassCreateFlagBits_;
     PPVkRenderPassCreateFlagBit=^PVkRenderPassCreateFlagBit;
     PVkRenderPassCreateFlagBit=^TVkRenderPassCreateFlagBit;

     TVkRenderPassCreateFlagBits= Set of TVkRenderPassCreateFlagBit; // This is SET OF
     PPVkRenderPassCreateFlagBits=^PVkRenderPassCreateFlagBits;
     PVkRenderPassCreateFlagBits=^TVkRenderPassCreateFlagBits;

     VkDeviceQueueCreateFlagBits_=
      (
       VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT=0
      );
     TVkDeviceQueueCreateFlagBit=VkDeviceQueueCreateFlagBits_;
     PPVkDeviceQueueCreateFlagBit=^PVkDeviceQueueCreateFlagBit;
     PVkDeviceQueueCreateFlagBit=^TVkDeviceQueueCreateFlagBit;

     TVkDeviceQueueCreateFlagBits= Set of TVkDeviceQueueCreateFlagBit; // This is SET OF
     PPVkDeviceQueueCreateFlagBits=^PVkDeviceQueueCreateFlagBits;
     PVkDeviceQueueCreateFlagBits=^TVkDeviceQueueCreateFlagBits;

     VkMemoryPropertyFlagBits_=
      (
       VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT=0,                                    // If otherwise stated, then allocate memory on device
       VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT=1,                                    // Memory is mappable by host
       VK_MEMORY_PROPERTY_HOST_COHERENT_BIT=2,                                   // Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
       VK_MEMORY_PROPERTY_HOST_CACHED_BIT=3,                                     // Memory will be cached by the host
       VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT=4,                                // Memory may be allocated by the driver when it is required
       VK_MEMORY_PROPERTY_PROTECTED_BIT=5,
       VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD=6,
       VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD=7
      );
     TVkMemoryPropertyFlagBit=VkMemoryPropertyFlagBits_;
     PPVkMemoryPropertyFlagBit=^PVkMemoryPropertyFlagBit;
     PVkMemoryPropertyFlagBit=^TVkMemoryPropertyFlagBit;

     TVkMemoryPropertyFlagBits= Set of TVkMemoryPropertyFlagBit; // This is SET OF
     PPVkMemoryPropertyFlagBits=^PVkMemoryPropertyFlagBits;
     PVkMemoryPropertyFlagBits=^TVkMemoryPropertyFlagBits;

     VkMemoryHeapFlagBits_=
      (
       VK_MEMORY_HEAP_DEVICE_LOCAL_BIT=0,                                        // If set, heap represents device memory
       VK_MEMORY_HEAP_MULTI_INSTANCE_BIT=1,
       VK_MEMORY_HEAP_RESERVED_2_BIT_KHR=2,
       VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR=3
      );
     TVkMemoryHeapFlagBit=VkMemoryHeapFlagBits_;
     PPVkMemoryHeapFlagBit=^PVkMemoryHeapFlagBit;
     PVkMemoryHeapFlagBit=^TVkMemoryHeapFlagBit;

     TVkMemoryHeapFlagBits= Set of TVkMemoryHeapFlagBit; // This is SET OF
     PPVkMemoryHeapFlagBits=^PVkMemoryHeapFlagBits;
     PVkMemoryHeapFlagBits=^TVkMemoryHeapFlagBits;

     VkAccessFlagBits_=
      (
       VK_ACCESS_INDIRECT_COMMAND_READ_BIT=0,                                    // Controls coherency of indirect command reads
       VK_ACCESS_INDEX_READ_BIT=1,                                               // Controls coherency of index reads
       VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT=2,                                    // Controls coherency of vertex attribute reads
       VK_ACCESS_UNIFORM_READ_BIT=3,                                             // Controls coherency of uniform buffer reads
       VK_ACCESS_INPUT_ATTACHMENT_READ_BIT=4,                                    // Controls coherency of input attachment reads
       VK_ACCESS_SHADER_READ_BIT=5,                                              // Controls coherency of shader reads
       VK_ACCESS_SHADER_WRITE_BIT=6,                                             // Controls coherency of shader writes
       VK_ACCESS_COLOR_ATTACHMENT_READ_BIT=7,                                    // Controls coherency of color attachment reads
       VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT=8,                                   // Controls coherency of color attachment writes
       VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT=9,                            // Controls coherency of depth/stencil attachment reads
       VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT=10,                          // Controls coherency of depth/stencil attachment writes
       VK_ACCESS_TRANSFER_READ_BIT=11,                                           // Controls coherency of transfer reads
       VK_ACCESS_TRANSFER_WRITE_BIT=12,                                          // Controls coherency of transfer writes
       VK_ACCESS_HOST_READ_BIT=13,                                               // Controls coherency of host reads
       VK_ACCESS_HOST_WRITE_BIT=14,                                              // Controls coherency of host writes
       VK_ACCESS_MEMORY_READ_BIT=15,                                             // Controls coherency of memory reads
       VK_ACCESS_MEMORY_WRITE_BIT=16,                                            // Controls coherency of memory writes
       VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV=17,
       VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV=18,
       VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT=19,
       VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT=20,
       VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR=21,
       VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR=22,
       VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV=23,
       VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT=24,
       VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT=25,
       VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT=26,
       VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT=27,
       VK_ACCESS_RESERVED_28_BIT_KHR=28,
       VK_ACCESS_RESERVED_29_BIT_KHR=29,
       VK_ACCESS_RESERVED_30_BIT_KHR=30,
       VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV=31,
       VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV=32
      );
     TVkAccessFlagBit=VkAccessFlagBits_;
     PPVkAccessFlagBit=^PVkAccessFlagBit;
     PVkAccessFlagBit=^TVkAccessFlagBit;

     TVkAccessFlagBits= Set of TVkAccessFlagBit; // This is SET OF
     PPVkAccessFlagBits=^PVkAccessFlagBits;
     PVkAccessFlagBits=^TVkAccessFlagBits;

     VkBufferUsageFlagBits_=
      (
       VK_BUFFER_USAGE_TRANSFER_SRC_BIT=0,                                       // Can be used as a source of transfer operations
       VK_BUFFER_USAGE_TRANSFER_DST_BIT=1,                                       // Can be used as a destination of transfer operations
       VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT=2,                               // Can be used as TBO
       VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT=3,                               // Can be used as IBO
       VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT=4,                                     // Can be used as UBO
       VK_BUFFER_USAGE_STORAGE_BUFFER_BIT=5,                                     // Can be used as SSBO
       VK_BUFFER_USAGE_INDEX_BUFFER_BIT=6,                                       // Can be used as source of fixed-function index fetch (index buffer)
       VK_BUFFER_USAGE_VERTEX_BUFFER_BIT=7,                                      // Can be used as source of fixed-function vertex fetch (VBO)
       VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT=8,                                    // Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)
       VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT=9,
       VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR=10,
       VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT=11,
       VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT=12,
       VK_BUFFER_USAGE_RESERVED_13_BIT_KHR=13,
       VK_BUFFER_USAGE_RESERVED_14_BIT_KHR=14,
       VK_BUFFER_USAGE_RESERVED_15_BIT_KHR=15,
       VK_BUFFER_USAGE_RESERVED_16_BIT_KHR=16,
       VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT=17,
       VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM=18,
       VK_BUFFER_USAGE_RESERVED_19_BIT_KHR=19,
       VK_BUFFER_USAGE_RESERVED_20_BIT_KHR=20,
       VK_BUFFER_USAGE_RAY_TRACING_BIT_NV=21,
       VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT=22,
       VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR=23
      );
     TVkBufferUsageFlagBit=VkBufferUsageFlagBits_;
     PPVkBufferUsageFlagBit=^PVkBufferUsageFlagBit;
     PVkBufferUsageFlagBit=^TVkBufferUsageFlagBit;

     TVkBufferUsageFlagBits= Set of TVkBufferUsageFlagBit; // This is SET OF
     PPVkBufferUsageFlagBits=^PVkBufferUsageFlagBits;
     PVkBufferUsageFlagBits=^TVkBufferUsageFlagBits;

     VkBufferCreateFlagBits_=
      (
       VK_BUFFER_CREATE_SPARSE_BINDING_BIT=0,                                    // Buffer should support sparse backing
       VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT=1,                                  // Buffer should support sparse backing with partial residency
       VK_BUFFER_CREATE_SPARSE_ALIASED_BIT=2,                                    // Buffer should support constent data access to physical memory ranges mapped into multiple locations of sparse buffers
       VK_BUFFER_CREATE_PROTECTED_BIT=3,
       VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT=4,
       VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT=5,
       VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR=6
      );
     TVkBufferCreateFlagBit=VkBufferCreateFlagBits_;
     PPVkBufferCreateFlagBit=^PVkBufferCreateFlagBit;
     PVkBufferCreateFlagBit=^TVkBufferCreateFlagBit;

     TVkBufferCreateFlagBits= Set of TVkBufferCreateFlagBit; // This is SET OF
     PPVkBufferCreateFlagBits=^PVkBufferCreateFlagBits;
     PVkBufferCreateFlagBits=^TVkBufferCreateFlagBits;

     VkShaderStageFlagBits_=
      (
       VK_SHADER_STAGE_VERTEX_BIT=0,
       VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT=1,
       VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT=2,
       VK_SHADER_STAGE_GEOMETRY_BIT=3,
       VK_SHADER_STAGE_FRAGMENT_BIT=4,
       VK_SHADER_STAGE_ALL_GRAPHICS=5,
       VK_SHADER_STAGE_COMPUTE_BIT=6,
       VK_SHADER_STAGE_TASK_BIT_NV=7,
       VK_SHADER_STAGE_MESH_BIT_NV=8,
       VK_SHADER_STAGE_RAYGEN_BIT_KHR=9,
       VK_SHADER_STAGE_ANY_HIT_BIT_KHR=10,
       VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR=11,
       VK_SHADER_STAGE_MISS_BIT_KHR=12,
       VK_SHADER_STAGE_INTERSECTION_BIT_KHR=13,
       VK_SHADER_STAGE_CALLABLE_BIT_KHR=14,
       VK_SHADER_STAGE_ALL=15,
       VK_SHADER_STAGE_ANY_HIT_BIT_NV=16,
       VK_SHADER_STAGE_CALLABLE_BIT_NV=17,
       VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV=18,
       VK_SHADER_STAGE_INTERSECTION_BIT_NV=19,
       VK_SHADER_STAGE_MISS_BIT_NV=20,
       VK_SHADER_STAGE_RAYGEN_BIT_NV=21
      );
     TVkShaderStageFlagBit=VkShaderStageFlagBits_;
     PPVkShaderStageFlagBit=^PVkShaderStageFlagBit;
     PVkShaderStageFlagBit=^TVkShaderStageFlagBit;

     TVkShaderStageFlagBits= Set of TVkShaderStageFlagBit; // This is SET OF
     PPVkShaderStageFlagBits=^PVkShaderStageFlagBits;
     PVkShaderStageFlagBits=^TVkShaderStageFlagBits;

     VkImageUsageFlagBits_=
      (
       VK_IMAGE_USAGE_TRANSFER_SRC_BIT=0,                                        // Can be used as a source of transfer operations
       VK_IMAGE_USAGE_TRANSFER_DST_BIT=1,                                        // Can be used as a destination of transfer operations
       VK_IMAGE_USAGE_SAMPLED_BIT=2,                                             // Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
       VK_IMAGE_USAGE_STORAGE_BIT=3,                                             // Can be used as storage image (STORAGE_IMAGE descriptor type)
       VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT=4,                                    // Can be used as framebuffer color attachment
       VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT=5,                            // Can be used as framebuffer depth/stencil attachment
       VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT=6,                                // Image data not needed outside of rendering
       VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT=7,                                    // Can be used as framebuffer input attachment
       VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV=8,
       VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT=9,
       VK_IMAGE_USAGE_RESERVED_10_BIT_KHR=10,
       VK_IMAGE_USAGE_RESERVED_11_BIT_KHR=11,
       VK_IMAGE_USAGE_RESERVED_12_BIT_KHR=12,
       VK_IMAGE_USAGE_RESERVED_13_BIT_KHR=13,
       VK_IMAGE_USAGE_RESERVED_14_BIT_KHR=14,
       VK_IMAGE_USAGE_RESERVED_15_BIT_KHR=15,
       VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM=16,
       VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM=17
      );
     TVkImageUsageFlagBit=VkImageUsageFlagBits_;
     PPVkImageUsageFlagBit=^PVkImageUsageFlagBit;
     PVkImageUsageFlagBit=^TVkImageUsageFlagBit;

     TVkImageUsageFlagBits= Set of TVkImageUsageFlagBit; // This is SET OF
     PPVkImageUsageFlagBits=^PVkImageUsageFlagBits;
     PVkImageUsageFlagBits=^TVkImageUsageFlagBits;

     VkImageCreateFlagBits_=
      (
       VK_IMAGE_CREATE_SPARSE_BINDING_BIT=0,                                     // Image should support sparse backing
       VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT=1,                                   // Image should support sparse backing with partial residency
       VK_IMAGE_CREATE_SPARSE_ALIASED_BIT=2,                                     // Image should support constent data access to physical memory ranges mapped into multiple locations of sparse images
       VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT=3,                                     // Allows image views to have different format than the base image
       VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT=4,                                    // Allows creating image views with cube type from the created image
       VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT=5,
       VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT=6,
       VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT=7,
       VK_IMAGE_CREATE_EXTENDED_USAGE_BIT=8,
       VK_IMAGE_CREATE_DISJOINT_BIT=9,
       VK_IMAGE_CREATE_ALIAS_BIT=10,
       VK_IMAGE_CREATE_PROTECTED_BIT=11,
       VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT=12,
       VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV=13,
       VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT=14,
       VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR=15,
       VK_IMAGE_CREATE_ALIAS_BIT_KHR=16,
       VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR=17,
       VK_IMAGE_CREATE_DISJOINT_BIT_KHR=18,
       VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR=19,
       VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR=20
      );
     TVkImageCreateFlagBit=VkImageCreateFlagBits_;
     PPVkImageCreateFlagBit=^PVkImageCreateFlagBit;
     PVkImageCreateFlagBit=^TVkImageCreateFlagBit;

     TVkImageCreateFlagBits= Set of TVkImageCreateFlagBit; // This is SET OF
     PPVkImageCreateFlagBits=^PVkImageCreateFlagBits;
     PVkImageCreateFlagBits=^TVkImageCreateFlagBits;

     VkImageViewCreateFlagBits_=
      (
       VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT=0,
       VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT=1
      );
     TVkImageViewCreateFlagBit=VkImageViewCreateFlagBits_;
     PPVkImageViewCreateFlagBit=^PVkImageViewCreateFlagBit;
     PVkImageViewCreateFlagBit=^TVkImageViewCreateFlagBit;

     TVkImageViewCreateFlagBits= Set of TVkImageViewCreateFlagBit; // This is SET OF
     PPVkImageViewCreateFlagBits=^PVkImageViewCreateFlagBits;
     PVkImageViewCreateFlagBits=^TVkImageViewCreateFlagBits;

     VkSamplerCreateFlagBits_=
      (
       VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT=0,
       VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT=1
      );
     TVkSamplerCreateFlagBit=VkSamplerCreateFlagBits_;
     PPVkSamplerCreateFlagBit=^PVkSamplerCreateFlagBit;
     PVkSamplerCreateFlagBit=^TVkSamplerCreateFlagBit;

     TVkSamplerCreateFlagBits= Set of TVkSamplerCreateFlagBit; // This is SET OF
     PPVkSamplerCreateFlagBits=^PVkSamplerCreateFlagBits;
     PVkSamplerCreateFlagBits=^TVkSamplerCreateFlagBits;

     VkPipelineCreateFlagBits_=
      (
       VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT=0,
       VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT=1,
       VK_PIPELINE_CREATE_DERIVATIVE_BIT=2,
       VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT=3,
       VK_PIPELINE_CREATE_DISPATCH_BASE_BIT=4,
       VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV=5,
       VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR=6,
       VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR=7,
       VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT=8,
       VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT=9,
       VK_PIPELINE_CREATE_LIBRARY_BIT_KHR=10,
       VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR=11,
       VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR=12,
       VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR=13,
       VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR=14,
       VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR=15,
       VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR=16,
       VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV=17,
       VK_PIPELINE_CREATE_RESERVED_19_BIT_KHR=18,
       VK_PIPELINE_CREATE_DISPATCH_BASE_KHR=19,
       VK_PIPELINE_CREATE_DISPATCH_BASE=20,
       VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR=21
      );
     TVkPipelineCreateFlagBit=VkPipelineCreateFlagBits_;
     PPVkPipelineCreateFlagBit=^PVkPipelineCreateFlagBit;
     PVkPipelineCreateFlagBit=^TVkPipelineCreateFlagBit;

     TVkPipelineCreateFlagBits= Set of TVkPipelineCreateFlagBit; // This is SET OF
     PPVkPipelineCreateFlagBits=^PVkPipelineCreateFlagBits;
     PVkPipelineCreateFlagBits=^TVkPipelineCreateFlagBits;

     VkPipelineShaderStageCreateFlagBits_=
      (
       VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT=0,
       VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT=1,
       VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV=2,
       VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR=3
      );
     TVkPipelineShaderStageCreateFlagBit=VkPipelineShaderStageCreateFlagBits_;
     PPVkPipelineShaderStageCreateFlagBit=^PVkPipelineShaderStageCreateFlagBit;
     PVkPipelineShaderStageCreateFlagBit=^TVkPipelineShaderStageCreateFlagBit;

     TVkPipelineShaderStageCreateFlagBits= Set of TVkPipelineShaderStageCreateFlagBit; // This is SET OF
     PPVkPipelineShaderStageCreateFlagBits=^PVkPipelineShaderStageCreateFlagBits;
     PVkPipelineShaderStageCreateFlagBits=^TVkPipelineShaderStageCreateFlagBits;

     VkColorComponentFlagBits_=
      (
       VK_COLOR_COMPONENT_R_BIT=0,
       VK_COLOR_COMPONENT_G_BIT=1,
       VK_COLOR_COMPONENT_B_BIT=2,
       VK_COLOR_COMPONENT_A_BIT=3
      );
     TVkColorComponentFlagBit=VkColorComponentFlagBits_;
     PPVkColorComponentFlagBit=^PVkColorComponentFlagBit;
     PVkColorComponentFlagBit=^TVkColorComponentFlagBit;

     TVkColorComponentFlagBits= Set of TVkColorComponentFlagBit; // This is SET OF
     PPVkColorComponentFlagBits=^PVkColorComponentFlagBits;
     PVkColorComponentFlagBits=^TVkColorComponentFlagBits;

     VkFenceCreateFlagBits_=
      (
       VK_FENCE_CREATE_SIGNALED_BIT=0
      );
     TVkFenceCreateFlagBit=VkFenceCreateFlagBits_;
     PPVkFenceCreateFlagBit=^PVkFenceCreateFlagBit;
     PVkFenceCreateFlagBit=^TVkFenceCreateFlagBit;

     TVkFenceCreateFlagBits= Set of TVkFenceCreateFlagBit; // This is SET OF
     PPVkFenceCreateFlagBits=^PVkFenceCreateFlagBits;
     PVkFenceCreateFlagBits=^TVkFenceCreateFlagBits;

     VkSemaphoreCreateFlagBits_=
      (
       VkSemaphoreCreateFlagBits_dummy=0    // Added from apiBuilderVulkan      
      );
     TVkSemaphoreCreateFlagBit=VkSemaphoreCreateFlagBits_;
     PPVkSemaphoreCreateFlagBit=^PVkSemaphoreCreateFlagBit;
     PVkSemaphoreCreateFlagBit=^TVkSemaphoreCreateFlagBit;

     TVkSemaphoreCreateFlagBits= Set of TVkSemaphoreCreateFlagBit; // This is SET OF
     PPVkSemaphoreCreateFlagBits=^PVkSemaphoreCreateFlagBits;
     PVkSemaphoreCreateFlagBits=^TVkSemaphoreCreateFlagBits;

     VkFormatFeatureFlagBits_=
      (
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT=0,                                    // Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
       VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT=1,                                    // Format can be used for storage images (STORAGE_IMAGE descriptor type)
       VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT=2,                             // Format supports atomic operations in case it is used for storage images
       VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT=3,                             // Format can be used for uniform texel buffers (TBOs)
       VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT=4,                             // Format can be used for storage texel buffers (IBOs)
       VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT=5,                      // Format supports atomic operations in case it is used for storage texel buffers
       VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT=6,                                    // Format can be used for vertex buffers (VBOs)
       VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT=7,                                 // Format can be used for color attachment images
       VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT=8,                           // Format supports blending in case it is used for color attachment images
       VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT=9,                         // Format can be used for depth/stencil attachment images
       VK_FORMAT_FEATURE_BLIT_SRC_BIT=10,                                        // Format can be used as the source image of blits with vkCmdBlitImage
       VK_FORMAT_FEATURE_BLIT_DST_BIT=11,                                        // Format can be used as the destination image of blits with vkCmdBlitImage
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT=12,                     // Format can be filtered with VK_FILTER_LINEAR when being sampled
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG=13,
       VK_FORMAT_FEATURE_TRANSFER_SRC_BIT=14,
       VK_FORMAT_FEATURE_TRANSFER_DST_BIT=15,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT=16,
       VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT=17,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT=18,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT=19,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT=20,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT=21,
       VK_FORMAT_FEATURE_DISJOINT_BIT=22,
       VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT=23,
       VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT=24,
       VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR=25,
       VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR=26,
       VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR=27,
       VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR=28,
       VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR=29,
       VK_FORMAT_FEATURE_AMD_RESERVED_30_BIT=30,
       VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR=31,
       VK_FORMAT_FEATURE_DISJOINT_BIT_KHR=32,
       VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR=33,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT=34,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT=35,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR=36,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR=37,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR=38,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR=39,
       VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR=40,
       VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR=41
      );
     TVkFormatFeatureFlagBit=VkFormatFeatureFlagBits_;
     PPVkFormatFeatureFlagBit=^PVkFormatFeatureFlagBit;
     PVkFormatFeatureFlagBit=^TVkFormatFeatureFlagBit;

     TVkFormatFeatureFlagBits= Set of TVkFormatFeatureFlagBit; // This is SET OF
     PPVkFormatFeatureFlagBits=^PVkFormatFeatureFlagBits;
     PVkFormatFeatureFlagBits=^TVkFormatFeatureFlagBits;

     VkQueryControlFlagBits_=
      (
       VK_QUERY_CONTROL_PRECISE_BIT=0                                            // Require precise results to be collected by the query
      );
     TVkQueryControlFlagBit=VkQueryControlFlagBits_;
     PPVkQueryControlFlagBit=^PVkQueryControlFlagBit;
     PVkQueryControlFlagBit=^TVkQueryControlFlagBit;

     TVkQueryControlFlagBits= Set of TVkQueryControlFlagBit; // This is SET OF
     PPVkQueryControlFlagBits=^PVkQueryControlFlagBits;
     PVkQueryControlFlagBits=^TVkQueryControlFlagBits;

     VkQueryResultFlagBits_=
      (
       VK_QUERY_RESULT_64_BIT=0,                                                 // Results of the queries are written to the destination buffer as 64-bit values
       VK_QUERY_RESULT_WAIT_BIT=1,                                               // Results of the queries are waited on before proceeding with the result copy
       VK_QUERY_RESULT_WITH_AVAILABILITY_BIT=2,                                  // Besides the results of the query, the availability of the results is also written
       VK_QUERY_RESULT_PARTIAL_BIT=3                                             // Copy the partial results of the query even if the final results are not available
      );
     TVkQueryResultFlagBit=VkQueryResultFlagBits_;
     PPVkQueryResultFlagBit=^PVkQueryResultFlagBit;
     PVkQueryResultFlagBit=^TVkQueryResultFlagBit;

     TVkQueryResultFlagBits= Set of TVkQueryResultFlagBit; // This is SET OF
     PPVkQueryResultFlagBits=^PVkQueryResultFlagBits;
     PVkQueryResultFlagBits=^TVkQueryResultFlagBits;

     VkCommandBufferUsageFlagBits_=
      (
       VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT=0,
       VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT=1,
       VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT=2                            // Command buffer may be submitted/executed more than once simultaneously
      );
     TVkCommandBufferUsageFlagBit=VkCommandBufferUsageFlagBits_;
     PPVkCommandBufferUsageFlagBit=^PVkCommandBufferUsageFlagBit;
     PVkCommandBufferUsageFlagBit=^TVkCommandBufferUsageFlagBit;

     TVkCommandBufferUsageFlagBits= Set of TVkCommandBufferUsageFlagBit; // This is SET OF
     PPVkCommandBufferUsageFlagBits=^PVkCommandBufferUsageFlagBits;
     PVkCommandBufferUsageFlagBits=^TVkCommandBufferUsageFlagBits;

     VkQueryPipelineStatisticFlagBits_=
      (
       VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT=0,                // Optional
       VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT=1,              // Optional
       VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT=2,              // Optional
       VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT=3,            // Optional
       VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT=4,             // Optional
       VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT=5,                   // Optional
       VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT=6,                    // Optional
       VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT=7,            // Optional
       VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT=8,    // Optional
       VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT=9, // Optional
       VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT=10             // Optional
      );
     TVkQueryPipelineStatisticFlagBit=VkQueryPipelineStatisticFlagBits_;
     PPVkQueryPipelineStatisticFlagBit=^PVkQueryPipelineStatisticFlagBit;
     PVkQueryPipelineStatisticFlagBit=^TVkQueryPipelineStatisticFlagBit;

     TVkQueryPipelineStatisticFlagBits= Set of TVkQueryPipelineStatisticFlagBit; // This is SET OF
     PPVkQueryPipelineStatisticFlagBits=^PVkQueryPipelineStatisticFlagBits;
     PVkQueryPipelineStatisticFlagBits=^TVkQueryPipelineStatisticFlagBits;

     VkImageAspectFlagBits_=
      (
       VK_IMAGE_ASPECT_COLOR_BIT=0,
       VK_IMAGE_ASPECT_DEPTH_BIT=1,
       VK_IMAGE_ASPECT_STENCIL_BIT=2,
       VK_IMAGE_ASPECT_METADATA_BIT=3,
       VK_IMAGE_ASPECT_PLANE_0_BIT=4,
       VK_IMAGE_ASPECT_PLANE_1_BIT=5,
       VK_IMAGE_ASPECT_PLANE_2_BIT=6,
       VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT=7,
       VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT=8,
       VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT=9,
       VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT=10,
       VK_IMAGE_ASPECT_PLANE_0_BIT_KHR=11,
       VK_IMAGE_ASPECT_PLANE_1_BIT_KHR=12,
       VK_IMAGE_ASPECT_PLANE_2_BIT_KHR=13
      );
     TVkImageAspectFlagBit=VkImageAspectFlagBits_;
     PPVkImageAspectFlagBit=^PVkImageAspectFlagBit;
     PVkImageAspectFlagBit=^TVkImageAspectFlagBit;

     TVkImageAspectFlagBits= Set of TVkImageAspectFlagBit; // This is SET OF
     PPVkImageAspectFlagBits=^PVkImageAspectFlagBits;
     PVkImageAspectFlagBits=^TVkImageAspectFlagBits;

     VkSparseImageFormatFlagBits_=
      (
       VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT=0,                              // Image uses a single mip tail region for all array layers
       VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT=1,                            // Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
       VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT=2                       // Image uses a non-standard sparse image block dimensions
      );
     TVkSparseImageFormatFlagBit=VkSparseImageFormatFlagBits_;
     PPVkSparseImageFormatFlagBit=^PVkSparseImageFormatFlagBit;
     PVkSparseImageFormatFlagBit=^TVkSparseImageFormatFlagBit;

     TVkSparseImageFormatFlagBits= Set of TVkSparseImageFormatFlagBit; // This is SET OF
     PPVkSparseImageFormatFlagBits=^PVkSparseImageFormatFlagBits;
     PVkSparseImageFormatFlagBits=^TVkSparseImageFormatFlagBits;

     VkSparseMemoryBindFlagBits_=
      (
       VK_SPARSE_MEMORY_BIND_METADATA_BIT=0                                      // Operation binds resource metadata to memory
      );
     TVkSparseMemoryBindFlagBit=VkSparseMemoryBindFlagBits_;
     PPVkSparseMemoryBindFlagBit=^PVkSparseMemoryBindFlagBit;
     PVkSparseMemoryBindFlagBit=^TVkSparseMemoryBindFlagBit;

     TVkSparseMemoryBindFlagBits= Set of TVkSparseMemoryBindFlagBit; // This is SET OF
     PPVkSparseMemoryBindFlagBits=^PVkSparseMemoryBindFlagBits;
     PVkSparseMemoryBindFlagBits=^TVkSparseMemoryBindFlagBits;

     VkPipelineStageFlagBits_=
      (
       VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT=0,                                      // Before subsequent commands are processed
       VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT=1,                                    // Draw/DispatchIndirect command fetch
       VK_PIPELINE_STAGE_VERTEX_INPUT_BIT=2,                                     // Vertex/index fetch
       VK_PIPELINE_STAGE_VERTEX_SHADER_BIT=3,                                    // Vertex shading
       VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT=4,                      // Tessellation control shading
       VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT=5,                   // Tessellation evaluation shading
       VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT=6,                                  // Geometry shading
       VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT=7,                                  // Fragment shading
       VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT=8,                             // Early fragment (depth and stencil) tests
       VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT=9,                              // Late fragment (depth and stencil) tests
       VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT=10,                         // Color attachment writes
       VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT=11,                                  // Compute shading
       VK_PIPELINE_STAGE_TRANSFER_BIT=12,                                        // Transfer/copy operations
       VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT=13,                                  // After previous commands have completed
       VK_PIPELINE_STAGE_HOST_BIT=14,                                            // Indicates host (CPU) is a source/sink of the dependency
       VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT=15,                                    // All stages of the graphics pipeline
       VK_PIPELINE_STAGE_ALL_COMMANDS_BIT=16,                                    // All stages supported on the queue
       VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV=17,
       VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT=18,
       VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV=19,
       VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV=20,
       VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR=21,
       VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV=22,
       VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT=23,
       VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT=24,
       VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR=25,
       VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR=26,
       VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR=27,
       VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV=28,
       VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV=29
      );
     TVkPipelineStageFlagBit=VkPipelineStageFlagBits_;
     PPVkPipelineStageFlagBit=^PVkPipelineStageFlagBit;
     PVkPipelineStageFlagBit=^TVkPipelineStageFlagBit;

     TVkPipelineStageFlagBits= Set of TVkPipelineStageFlagBit; // This is SET OF
     PPVkPipelineStageFlagBits=^PVkPipelineStageFlagBits;
     PVkPipelineStageFlagBits=^TVkPipelineStageFlagBits;

     VkCommandPoolCreateFlagBits_=
      (
       VK_COMMAND_POOL_CREATE_TRANSIENT_BIT=0,                                   // Command buffers have a short lifetime
       VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT=1,                        // Command buffers may release their memory individually
       VK_COMMAND_POOL_CREATE_PROTECTED_BIT=2
      );
     TVkCommandPoolCreateFlagBit=VkCommandPoolCreateFlagBits_;
     PPVkCommandPoolCreateFlagBit=^PVkCommandPoolCreateFlagBit;
     PVkCommandPoolCreateFlagBit=^TVkCommandPoolCreateFlagBit;

     TVkCommandPoolCreateFlagBits= Set of TVkCommandPoolCreateFlagBit; // This is SET OF
     PPVkCommandPoolCreateFlagBits=^PVkCommandPoolCreateFlagBits;
     PVkCommandPoolCreateFlagBits=^TVkCommandPoolCreateFlagBits;

     VkCommandPoolResetFlagBits_=
      (
       VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT=0                             // Release resources owned by the pool
      );
     TVkCommandPoolResetFlagBit=VkCommandPoolResetFlagBits_;
     PPVkCommandPoolResetFlagBit=^PVkCommandPoolResetFlagBit;
     PVkCommandPoolResetFlagBit=^TVkCommandPoolResetFlagBit;

     TVkCommandPoolResetFlagBits= Set of TVkCommandPoolResetFlagBit; // This is SET OF
     PPVkCommandPoolResetFlagBits=^PVkCommandPoolResetFlagBits;
     PVkCommandPoolResetFlagBits=^TVkCommandPoolResetFlagBits;

     VkCommandBufferResetFlagBits_=
      (
       VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT=0                           // Release resources owned by the buffer
      );
     TVkCommandBufferResetFlagBit=VkCommandBufferResetFlagBits_;
     PPVkCommandBufferResetFlagBit=^PVkCommandBufferResetFlagBit;
     PVkCommandBufferResetFlagBit=^TVkCommandBufferResetFlagBit;

     TVkCommandBufferResetFlagBits= Set of TVkCommandBufferResetFlagBit; // This is SET OF
     PPVkCommandBufferResetFlagBits=^PVkCommandBufferResetFlagBits;
     PVkCommandBufferResetFlagBits=^TVkCommandBufferResetFlagBits;

     VkSampleCountFlagBits_=
      (
       VK_SAMPLE_COUNT_1_BIT=0,                                                  // Sample count 1 supported
       VK_SAMPLE_COUNT_2_BIT=1,                                                  // Sample count 2 supported
       VK_SAMPLE_COUNT_4_BIT=2,                                                  // Sample count 4 supported
       VK_SAMPLE_COUNT_8_BIT=3,                                                  // Sample count 8 supported
       VK_SAMPLE_COUNT_16_BIT=4,                                                 // Sample count 16 supported
       VK_SAMPLE_COUNT_32_BIT=5,                                                 // Sample count 32 supported
       VK_SAMPLE_COUNT_64_BIT=6                                                  // Sample count 64 supported
      );
     TVkSampleCountFlagBit=VkSampleCountFlagBits_;
     PPVkSampleCountFlagBit=^PVkSampleCountFlagBit;
     PVkSampleCountFlagBit=^TVkSampleCountFlagBit;

     TVkSampleCountFlagBits= Set of TVkSampleCountFlagBit; // This is SET OF
     PPVkSampleCountFlagBits=^PVkSampleCountFlagBits;
     PVkSampleCountFlagBits=^TVkSampleCountFlagBits;

     VkAttachmentDescriptionFlagBits_=
      (
       VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT=0                                 // The attachment may alias physical memory of another attachment in the same render pass
      );
     TVkAttachmentDescriptionFlagBit=VkAttachmentDescriptionFlagBits_;
     PPVkAttachmentDescriptionFlagBit=^PVkAttachmentDescriptionFlagBit;
     PVkAttachmentDescriptionFlagBit=^TVkAttachmentDescriptionFlagBit;

     TVkAttachmentDescriptionFlagBits= Set of TVkAttachmentDescriptionFlagBit; // This is SET OF
     PPVkAttachmentDescriptionFlagBits=^PVkAttachmentDescriptionFlagBits;
     PVkAttachmentDescriptionFlagBits=^TVkAttachmentDescriptionFlagBits;

     VkStencilFaceFlagBits_=
      (
       VK_STENCIL_FACE_FRONT_BIT=0,                                              // Front face
       VK_STENCIL_FACE_BACK_BIT=1,                                               // Back face
       VK_STENCIL_FACE_FRONT_AND_BACK=2,                                         // Front and back faces
       VK_STENCIL_FRONT_AND_BACK=3                                               // Alias for backwards compatibility
      );
     TVkStencilFaceFlagBit=VkStencilFaceFlagBits_;
     PPVkStencilFaceFlagBit=^PVkStencilFaceFlagBit;
     PVkStencilFaceFlagBit=^TVkStencilFaceFlagBit;

     TVkStencilFaceFlagBits= Set of TVkStencilFaceFlagBit; // This is SET OF
     PPVkStencilFaceFlagBits=^PVkStencilFaceFlagBits;
     PVkStencilFaceFlagBits=^TVkStencilFaceFlagBits;

     VkDescriptorPoolCreateFlagBits_=
      (
       VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT=0,                      // Descriptor sets may be freed individually
       VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT=1,
       VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT=2
      );
     TVkDescriptorPoolCreateFlagBit=VkDescriptorPoolCreateFlagBits_;
     PPVkDescriptorPoolCreateFlagBit=^PVkDescriptorPoolCreateFlagBit;
     PVkDescriptorPoolCreateFlagBit=^TVkDescriptorPoolCreateFlagBit;

     TVkDescriptorPoolCreateFlagBits= Set of TVkDescriptorPoolCreateFlagBit; // This is SET OF
     PPVkDescriptorPoolCreateFlagBits=^PVkDescriptorPoolCreateFlagBits;
     PVkDescriptorPoolCreateFlagBits=^TVkDescriptorPoolCreateFlagBits;

     VkDependencyFlagBits_=
      (
       VK_DEPENDENCY_BY_REGION_BIT=0,                                            // Dependency is per pixel region 
       VK_DEPENDENCY_VIEW_LOCAL_BIT=1,
       VK_DEPENDENCY_DEVICE_GROUP_BIT=2,
       VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR=3,
       VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR=4
      );
     TVkDependencyFlagBit=VkDependencyFlagBits_;
     PPVkDependencyFlagBit=^PVkDependencyFlagBit;
     PVkDependencyFlagBit=^TVkDependencyFlagBit;

     TVkDependencyFlagBits= Set of TVkDependencyFlagBit; // This is SET OF
     PPVkDependencyFlagBits=^PVkDependencyFlagBits;
     PVkDependencyFlagBits=^TVkDependencyFlagBits;

     TVkSemaphoreType=
      (
       VK_SEMAPHORE_TYPE_BINARY=0,
       VK_SEMAPHORE_TYPE_TIMELINE=1,
       VK_SEMAPHORE_TYPE_BINARY_KHR=VK_SEMAPHORE_TYPE_BINARY,
       VK_SEMAPHORE_TYPE_TIMELINE_KHR=VK_SEMAPHORE_TYPE_TIMELINE
      );
     PPVkSemaphoreType=^PVkSemaphoreType;
     PVkSemaphoreType=^TVkSemaphoreType;

     VkSemaphoreWaitFlagBits_=
      (
       VK_SEMAPHORE_WAIT_ANY_BIT=0,
       VK_SEMAPHORE_WAIT_ANY_BIT_KHR=1
      );
     TVkSemaphoreWaitFlagBit=VkSemaphoreWaitFlagBits_;
     PPVkSemaphoreWaitFlagBit=^PVkSemaphoreWaitFlagBit;
     PVkSemaphoreWaitFlagBit=^TVkSemaphoreWaitFlagBit;

     TVkSemaphoreWaitFlagBits= Set of TVkSemaphoreWaitFlagBit; // This is SET OF
     PPVkSemaphoreWaitFlagBits=^PVkSemaphoreWaitFlagBits;
     PVkSemaphoreWaitFlagBits=^TVkSemaphoreWaitFlagBits;

     TVkPresentModeKHR=
      (
       VK_PRESENT_MODE_IMMEDIATE_KHR=0,
       VK_PRESENT_MODE_MAILBOX_KHR=1,
       VK_PRESENT_MODE_FIFO_KHR=2,
       VK_PRESENT_MODE_FIFO_RELAXED_KHR=3,
       VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR=1000111000,
       VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR=1000111001
      );
     PPVkPresentModeKHR=^PVkPresentModeKHR;
     PVkPresentModeKHR=^TVkPresentModeKHR;

     TVkColorSpaceKHR=
      (
       VK_COLOR_SPACE_SRGB_NONLINEAR_KHR=0,
       VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT=1000104001,
       VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT=1000104002,
       VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT=1000104003,
       VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT=1000104004,
       VK_COLOR_SPACE_BT709_LINEAR_EXT=1000104005,
       VK_COLOR_SPACE_BT709_NONLINEAR_EXT=1000104006,
       VK_COLOR_SPACE_BT2020_LINEAR_EXT=1000104007,
       VK_COLOR_SPACE_HDR10_ST2084_EXT=1000104008,
       VK_COLOR_SPACE_DOLBYVISION_EXT=1000104009,
       VK_COLOR_SPACE_HDR10_HLG_EXT=1000104010,
       VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT=1000104011,
       VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT=1000104012,
       VK_COLOR_SPACE_PASS_THROUGH_EXT=1000104013,
       VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT=1000104014,
       VK_COLOR_SPACE_DISPLAY_NATIVE_AMD=1000213000,
       VK_COLOR_SPACE_DCI_P3_LINEAR_EXT=VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
       VK_COLORSPACE_SRGB_NONLINEAR_KHR=VK_COLOR_SPACE_SRGB_NONLINEAR_KHR        // Backwards-compatible alias containing a typo
      );
     PPVkColorSpaceKHR=^PVkColorSpaceKHR;
     PVkColorSpaceKHR=^TVkColorSpaceKHR;

     VkDisplayPlaneAlphaFlagBitsKHR_=
      (
       VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR=0,
       VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR=1,
       VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR=2,
       VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR=3
      );
     TVkDisplayPlaneAlphaFlagBitsKH=VkDisplayPlaneAlphaFlagBitsKHR_;
     PPVkDisplayPlaneAlphaFlagBitsKH=^PVkDisplayPlaneAlphaFlagBitsKH;
     PVkDisplayPlaneAlphaFlagBitsKH=^TVkDisplayPlaneAlphaFlagBitsKH;

     TVkDisplayPlaneAlphaFlagBitsKHR= Set of TVkDisplayPlaneAlphaFlagBitsKH; // This is SET OF
     PPVkDisplayPlaneAlphaFlagBitsKHR=^PVkDisplayPlaneAlphaFlagBitsKHR;
     PVkDisplayPlaneAlphaFlagBitsKHR=^TVkDisplayPlaneAlphaFlagBitsKHR;

     VkCompositeAlphaFlagBitsKHR_=
      (
       VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR=0,
       VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR=1,
       VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR=2,
       VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR=3
      );
     TVkCompositeAlphaFlagBitsKH=VkCompositeAlphaFlagBitsKHR_;
     PPVkCompositeAlphaFlagBitsKH=^PVkCompositeAlphaFlagBitsKH;
     PVkCompositeAlphaFlagBitsKH=^TVkCompositeAlphaFlagBitsKH;

     TVkCompositeAlphaFlagBitsKHR= Set of TVkCompositeAlphaFlagBitsKH; // This is SET OF
     PPVkCompositeAlphaFlagBitsKHR=^PVkCompositeAlphaFlagBitsKHR;
     PVkCompositeAlphaFlagBitsKHR=^TVkCompositeAlphaFlagBitsKHR;

     VkSurfaceTransformFlagBitsKHR_=
      (
       VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR=0,
       VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR=1,
       VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR=2,
       VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR=3,
       VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR=4,
       VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR=5,
       VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR=6,
       VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR=7,
       VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR=8
      );
     TVkSurfaceTransformFlagBitsKH=VkSurfaceTransformFlagBitsKHR_;
     PPVkSurfaceTransformFlagBitsKH=^PVkSurfaceTransformFlagBitsKH;
     PVkSurfaceTransformFlagBitsKH=^TVkSurfaceTransformFlagBitsKH;

     TVkSurfaceTransformFlagBitsKHR= Set of TVkSurfaceTransformFlagBitsKH; // This is SET OF
     PPVkSurfaceTransformFlagBitsKHR=^PVkSurfaceTransformFlagBitsKHR;
     PVkSurfaceTransformFlagBitsKHR=^TVkSurfaceTransformFlagBitsKHR;

     VkSwapchainImageUsageFlagBitsANDROID_=
      (
       VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID=0
      );
     TVkSwapchainImageUsageFlagBitsANDROI=VkSwapchainImageUsageFlagBitsANDROID_;
     PPVkSwapchainImageUsageFlagBitsANDROI=^PVkSwapchainImageUsageFlagBitsANDROI;
     PVkSwapchainImageUsageFlagBitsANDROI=^TVkSwapchainImageUsageFlagBitsANDROI;

     TVkSwapchainImageUsageFlagBitsANDROID= Set of TVkSwapchainImageUsageFlagBitsANDROI; // This is SET OF
     PPVkSwapchainImageUsageFlagBitsANDROID=^PVkSwapchainImageUsageFlagBitsANDROID;
     PVkSwapchainImageUsageFlagBitsANDROID=^TVkSwapchainImageUsageFlagBitsANDROID;

     TVkTimeDomainEXT=
      (
       VK_TIME_DOMAIN_DEVICE_EXT=0,
       VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT=1,
       VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT=2,
       VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT=3
      );
     PPVkTimeDomainEXT=^PVkTimeDomainEXT;
     PVkTimeDomainEXT=^TVkTimeDomainEXT;

     VkDebugReportFlagBitsEXT_=
      (
       VK_DEBUG_REPORT_INFORMATION_BIT_EXT=0,
       VK_DEBUG_REPORT_WARNING_BIT_EXT=1,
       VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT=2,
       VK_DEBUG_REPORT_ERROR_BIT_EXT=3,
       VK_DEBUG_REPORT_DEBUG_BIT_EXT=4
      );
     TVkDebugReportFlagBitsEX=VkDebugReportFlagBitsEXT_;
     PPVkDebugReportFlagBitsEX=^PVkDebugReportFlagBitsEX;
     PVkDebugReportFlagBitsEX=^TVkDebugReportFlagBitsEX;

     TVkDebugReportFlagBitsEXT= Set of TVkDebugReportFlagBitsEX; // This is SET OF
     PPVkDebugReportFlagBitsEXT=^PVkDebugReportFlagBitsEXT;
     PVkDebugReportFlagBitsEXT=^TVkDebugReportFlagBitsEXT;

     TVkDebugReportObjectTypeEXT=
      (
       VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT=0,
       VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT=1,
       VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT=2,
       VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT=3,
       VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT=4,
       VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT=5,
       VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT=6,
       VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT=7,
       VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT=8,
       VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT=9,
       VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT=10,
       VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT=11,
       VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT=12,
       VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT=13,
       VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT=14,
       VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT=15,
       VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT=16,
       VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT=17,
       VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT=18,
       VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT=19,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT=20,
       VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT=21,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT=22,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT=23,
       VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT=24,
       VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT=25,
       VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT=26,
       VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT=27,
       VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT=28,
       VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT=29,
       VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT=30,
       VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT=33,
       VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT=1000011000,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT=1000011000,
       VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT=1000150000,
       VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT=VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
       VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT=VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT, // Backwards-compatible alias containing a typo
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT=VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
       VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT=VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
       VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT=VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT // Backwards-compatible alias containing a typo
      );
     PPVkDebugReportObjectTypeEXT=^PVkDebugReportObjectTypeEXT;
     PVkDebugReportObjectTypeEXT=^TVkDebugReportObjectTypeEXT;

     TVkRasterizationOrderAMD=
      (
       VK_RASTERIZATION_ORDER_STRICT_AMD=0,
       VK_RASTERIZATION_ORDER_RELAXED_AMD=1
      );
     PPVkRasterizationOrderAMD=^PVkRasterizationOrderAMD;
     PVkRasterizationOrderAMD=^TVkRasterizationOrderAMD;

     VkExternalMemoryHandleTypeFlagBitsNV_=
      (
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV=0,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV=1,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV=2,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV=3
      );
     TVkExternalMemoryHandleTypeFlagBitsN=VkExternalMemoryHandleTypeFlagBitsNV_;
     PPVkExternalMemoryHandleTypeFlagBitsN=^PVkExternalMemoryHandleTypeFlagBitsN;
     PVkExternalMemoryHandleTypeFlagBitsN=^TVkExternalMemoryHandleTypeFlagBitsN;

     TVkExternalMemoryHandleTypeFlagBitsNV= Set of TVkExternalMemoryHandleTypeFlagBitsN; // This is SET OF
     PPVkExternalMemoryHandleTypeFlagBitsNV=^PVkExternalMemoryHandleTypeFlagBitsNV;
     PVkExternalMemoryHandleTypeFlagBitsNV=^TVkExternalMemoryHandleTypeFlagBitsNV;

     VkExternalMemoryFeatureFlagBitsNV_=
      (
       VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV=0,
       VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV=1,
       VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV=2
      );
     TVkExternalMemoryFeatureFlagBitsN=VkExternalMemoryFeatureFlagBitsNV_;
     PPVkExternalMemoryFeatureFlagBitsN=^PVkExternalMemoryFeatureFlagBitsN;
     PVkExternalMemoryFeatureFlagBitsN=^TVkExternalMemoryFeatureFlagBitsN;

     TVkExternalMemoryFeatureFlagBitsNV= Set of TVkExternalMemoryFeatureFlagBitsN; // This is SET OF
     PPVkExternalMemoryFeatureFlagBitsNV=^PVkExternalMemoryFeatureFlagBitsNV;
     PVkExternalMemoryFeatureFlagBitsNV=^TVkExternalMemoryFeatureFlagBitsNV;

     TVkValidationCheckEXT=
      (
       VK_VALIDATION_CHECK_ALL_EXT=0,
       VK_VALIDATION_CHECK_SHADERS_EXT=1
      );
     PPVkValidationCheckEXT=^PVkValidationCheckEXT;
     PVkValidationCheckEXT=^TVkValidationCheckEXT;

     TVkValidationFeatureEnableEXT=
      (
       VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT=0,
       VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT=1,
       VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT=2,
       VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT=3,
       VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT=4
      );
     PPVkValidationFeatureEnableEXT=^PVkValidationFeatureEnableEXT;
     PVkValidationFeatureEnableEXT=^TVkValidationFeatureEnableEXT;

     TVkValidationFeatureDisableEXT=
      (
       VK_VALIDATION_FEATURE_DISABLE_ALL_EXT=0,
       VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT=1,
       VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT=2,
       VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT=3,
       VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT=4,
       VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT=5,
       VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT=6
      );
     PPVkValidationFeatureDisableEXT=^PVkValidationFeatureDisableEXT;
     PVkValidationFeatureDisableEXT=^TVkValidationFeatureDisableEXT;

     VkSubgroupFeatureFlagBits_=
      (
       VK_SUBGROUP_FEATURE_BASIC_BIT=0,                                          // Basic subgroup operations
       VK_SUBGROUP_FEATURE_VOTE_BIT=1,                                           // Vote subgroup operations
       VK_SUBGROUP_FEATURE_ARITHMETIC_BIT=2,                                     // Arithmetic subgroup operations
       VK_SUBGROUP_FEATURE_BALLOT_BIT=3,                                         // Ballot subgroup operations
       VK_SUBGROUP_FEATURE_SHUFFLE_BIT=4,                                        // Shuffle subgroup operations
       VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT=5,                               // Shuffle relative subgroup operations
       VK_SUBGROUP_FEATURE_CLUSTERED_BIT=6,                                      // Clustered subgroup operations
       VK_SUBGROUP_FEATURE_QUAD_BIT=7,                                           // Quad subgroup operations
       VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV=8
      );
     TVkSubgroupFeatureFlagBit=VkSubgroupFeatureFlagBits_;
     PPVkSubgroupFeatureFlagBit=^PVkSubgroupFeatureFlagBit;
     PVkSubgroupFeatureFlagBit=^TVkSubgroupFeatureFlagBit;

     TVkSubgroupFeatureFlagBits= Set of TVkSubgroupFeatureFlagBit; // This is SET OF
     PPVkSubgroupFeatureFlagBits=^PVkSubgroupFeatureFlagBits;
     PVkSubgroupFeatureFlagBits=^TVkSubgroupFeatureFlagBits;

     VkIndirectCommandsLayoutUsageFlagBitsNV_=
      (
       VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV=0,
       VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV=1,
       VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV=2
      );
     TVkIndirectCommandsLayoutUsageFlagBitsN=VkIndirectCommandsLayoutUsageFlagBitsNV_;
     PPVkIndirectCommandsLayoutUsageFlagBitsN=^PVkIndirectCommandsLayoutUsageFlagBitsN;
     PVkIndirectCommandsLayoutUsageFlagBitsN=^TVkIndirectCommandsLayoutUsageFlagBitsN;

     TVkIndirectCommandsLayoutUsageFlagBitsNV= Set of TVkIndirectCommandsLayoutUsageFlagBitsN; // This is SET OF
     PPVkIndirectCommandsLayoutUsageFlagBitsNV=^PVkIndirectCommandsLayoutUsageFlagBitsNV;
     PVkIndirectCommandsLayoutUsageFlagBitsNV=^TVkIndirectCommandsLayoutUsageFlagBitsNV;

     VkIndirectStateFlagBitsNV_=
      (
       VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV=0
      );
     TVkIndirectStateFlagBitsN=VkIndirectStateFlagBitsNV_;
     PPVkIndirectStateFlagBitsN=^PVkIndirectStateFlagBitsN;
     PVkIndirectStateFlagBitsN=^TVkIndirectStateFlagBitsN;

     TVkIndirectStateFlagBitsNV= Set of TVkIndirectStateFlagBitsN; // This is SET OF
     PPVkIndirectStateFlagBitsNV=^PVkIndirectStateFlagBitsNV;
     PVkIndirectStateFlagBitsNV=^TVkIndirectStateFlagBitsNV;

     TVkIndirectCommandsTokenTypeNV=
      (
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV=0,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV=1,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV=2,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV=3,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV=4,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV=5,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV=6,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV=7
      );
     PPVkIndirectCommandsTokenTypeNV=^PVkIndirectCommandsTokenTypeNV;
     PVkIndirectCommandsTokenTypeNV=^TVkIndirectCommandsTokenTypeNV;

     VkPrivateDataSlotCreateFlagBitsEXT_=
      (
       VkPrivateDataSlotCreateFlagBitsEXT_dummy=0    // Added from apiBuilderVulkan
      );
     TVkPrivateDataSlotCreateFlagBitsEX=VkPrivateDataSlotCreateFlagBitsEXT_;
     PPVkPrivateDataSlotCreateFlagBitsEX=^PVkPrivateDataSlotCreateFlagBitsEX;
     PVkPrivateDataSlotCreateFlagBitsEX=^TVkPrivateDataSlotCreateFlagBitsEX;

     TVkPrivateDataSlotCreateFlagBitsEXT= Set of TVkPrivateDataSlotCreateFlagBitsEX; // This is SET OF
     PPVkPrivateDataSlotCreateFlagBitsEXT=^PVkPrivateDataSlotCreateFlagBitsEXT;
     PVkPrivateDataSlotCreateFlagBitsEXT=^TVkPrivateDataSlotCreateFlagBitsEXT;

     VkDescriptorSetLayoutCreateFlagBits_=
      (
       VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR=0,
       VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT=1,
       VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT=2
      );
     TVkDescriptorSetLayoutCreateFlagBit=VkDescriptorSetLayoutCreateFlagBits_;
     PPVkDescriptorSetLayoutCreateFlagBit=^PVkDescriptorSetLayoutCreateFlagBit;
     PVkDescriptorSetLayoutCreateFlagBit=^TVkDescriptorSetLayoutCreateFlagBit;

     TVkDescriptorSetLayoutCreateFlagBits= Set of TVkDescriptorSetLayoutCreateFlagBit; // This is SET OF
     PPVkDescriptorSetLayoutCreateFlagBits=^PVkDescriptorSetLayoutCreateFlagBits;
     PVkDescriptorSetLayoutCreateFlagBits=^TVkDescriptorSetLayoutCreateFlagBits;

     VkExternalMemoryHandleTypeFlagBits_=
      (
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT=0,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT=1,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT=2,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT=3,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT=4,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT=5,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT=6,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT=7,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT=8,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT=9,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID=10,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR=11,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR=12,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR=13,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR=14,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR=15,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR=16,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR=17
      );
     TVkExternalMemoryHandleTypeFlagBit=VkExternalMemoryHandleTypeFlagBits_;
     PPVkExternalMemoryHandleTypeFlagBit=^PVkExternalMemoryHandleTypeFlagBit;
     PVkExternalMemoryHandleTypeFlagBit=^TVkExternalMemoryHandleTypeFlagBit;

     TVkExternalMemoryHandleTypeFlagBits= Set of TVkExternalMemoryHandleTypeFlagBit; // This is SET OF
     PPVkExternalMemoryHandleTypeFlagBits=^PVkExternalMemoryHandleTypeFlagBits;
     PVkExternalMemoryHandleTypeFlagBits=^TVkExternalMemoryHandleTypeFlagBits;

     VkExternalMemoryFeatureFlagBits_=
      (
       VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT=0,
       VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT=1,
       VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT=2,
       VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR=3,
       VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR=4,
       VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR=5
      );
     TVkExternalMemoryFeatureFlagBit=VkExternalMemoryFeatureFlagBits_;
     PPVkExternalMemoryFeatureFlagBit=^PVkExternalMemoryFeatureFlagBit;
     PVkExternalMemoryFeatureFlagBit=^TVkExternalMemoryFeatureFlagBit;

     TVkExternalMemoryFeatureFlagBits= Set of TVkExternalMemoryFeatureFlagBit; // This is SET OF
     PPVkExternalMemoryFeatureFlagBits=^PVkExternalMemoryFeatureFlagBits;
     PVkExternalMemoryFeatureFlagBits=^TVkExternalMemoryFeatureFlagBits;

     VkExternalSemaphoreHandleTypeFlagBits_=
      (
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT=0,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT=1,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT=2,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT=3,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT=4,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT=5,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR=6,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR=7,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR=8,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR=9,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR=10
      );
     TVkExternalSemaphoreHandleTypeFlagBit=VkExternalSemaphoreHandleTypeFlagBits_;
     PPVkExternalSemaphoreHandleTypeFlagBit=^PVkExternalSemaphoreHandleTypeFlagBit;
     PVkExternalSemaphoreHandleTypeFlagBit=^TVkExternalSemaphoreHandleTypeFlagBit;

     TVkExternalSemaphoreHandleTypeFlagBits= Set of TVkExternalSemaphoreHandleTypeFlagBit; // This is SET OF
     PPVkExternalSemaphoreHandleTypeFlagBits=^PVkExternalSemaphoreHandleTypeFlagBits;
     PVkExternalSemaphoreHandleTypeFlagBits=^TVkExternalSemaphoreHandleTypeFlagBits;

     VkExternalSemaphoreFeatureFlagBits_=
      (
       VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT=0,
       VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT=1,
       VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR=2,
       VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR=3
      );
     TVkExternalSemaphoreFeatureFlagBit=VkExternalSemaphoreFeatureFlagBits_;
     PPVkExternalSemaphoreFeatureFlagBit=^PVkExternalSemaphoreFeatureFlagBit;
     PVkExternalSemaphoreFeatureFlagBit=^TVkExternalSemaphoreFeatureFlagBit;

     TVkExternalSemaphoreFeatureFlagBits= Set of TVkExternalSemaphoreFeatureFlagBit; // This is SET OF
     PPVkExternalSemaphoreFeatureFlagBits=^PVkExternalSemaphoreFeatureFlagBits;
     PVkExternalSemaphoreFeatureFlagBits=^TVkExternalSemaphoreFeatureFlagBits;

     VkSemaphoreImportFlagBits_=
      (
       VK_SEMAPHORE_IMPORT_TEMPORARY_BIT=0,
       VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR=1
      );
     TVkSemaphoreImportFlagBit=VkSemaphoreImportFlagBits_;
     PPVkSemaphoreImportFlagBit=^PVkSemaphoreImportFlagBit;
     PVkSemaphoreImportFlagBit=^TVkSemaphoreImportFlagBit;

     TVkSemaphoreImportFlagBits= Set of TVkSemaphoreImportFlagBit; // This is SET OF
     PPVkSemaphoreImportFlagBits=^PVkSemaphoreImportFlagBits;
     PVkSemaphoreImportFlagBits=^TVkSemaphoreImportFlagBits;

     VkExternalFenceHandleTypeFlagBits_=
      (
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT=0,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT=1,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT=2,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT=3,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR=4,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR=5,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR=6,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR=7
      );
     TVkExternalFenceHandleTypeFlagBit=VkExternalFenceHandleTypeFlagBits_;
     PPVkExternalFenceHandleTypeFlagBit=^PVkExternalFenceHandleTypeFlagBit;
     PVkExternalFenceHandleTypeFlagBit=^TVkExternalFenceHandleTypeFlagBit;

     TVkExternalFenceHandleTypeFlagBits= Set of TVkExternalFenceHandleTypeFlagBit; // This is SET OF
     PPVkExternalFenceHandleTypeFlagBits=^PVkExternalFenceHandleTypeFlagBits;
     PVkExternalFenceHandleTypeFlagBits=^TVkExternalFenceHandleTypeFlagBits;

     VkExternalFenceFeatureFlagBits_=
      (
       VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT=0,
       VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT=1,
       VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR=2,
       VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR=3
      );
     TVkExternalFenceFeatureFlagBit=VkExternalFenceFeatureFlagBits_;
     PPVkExternalFenceFeatureFlagBit=^PVkExternalFenceFeatureFlagBit;
     PVkExternalFenceFeatureFlagBit=^TVkExternalFenceFeatureFlagBit;

     TVkExternalFenceFeatureFlagBits= Set of TVkExternalFenceFeatureFlagBit; // This is SET OF
     PPVkExternalFenceFeatureFlagBits=^PVkExternalFenceFeatureFlagBits;
     PVkExternalFenceFeatureFlagBits=^TVkExternalFenceFeatureFlagBits;

     VkFenceImportFlagBits_=
      (
       VK_FENCE_IMPORT_TEMPORARY_BIT=0,
       VK_FENCE_IMPORT_TEMPORARY_BIT_KHR=1
      );
     TVkFenceImportFlagBit=VkFenceImportFlagBits_;
     PPVkFenceImportFlagBit=^PVkFenceImportFlagBit;
     PVkFenceImportFlagBit=^TVkFenceImportFlagBit;

     TVkFenceImportFlagBits= Set of TVkFenceImportFlagBit; // This is SET OF
     PPVkFenceImportFlagBits=^PVkFenceImportFlagBits;
     PVkFenceImportFlagBits=^TVkFenceImportFlagBits;

     VkSurfaceCounterFlagBitsEXT_=
      (
       VK_SURFACE_COUNTER_VBLANK_EXT=0
      );
     TVkSurfaceCounterFlagBitsEX=VkSurfaceCounterFlagBitsEXT_;
     PPVkSurfaceCounterFlagBitsEX=^PVkSurfaceCounterFlagBitsEX;
     PVkSurfaceCounterFlagBitsEX=^TVkSurfaceCounterFlagBitsEX;

     TVkSurfaceCounterFlagBitsEXT= Set of TVkSurfaceCounterFlagBitsEX; // This is SET OF
     PPVkSurfaceCounterFlagBitsEXT=^PVkSurfaceCounterFlagBitsEXT;
     PVkSurfaceCounterFlagBitsEXT=^TVkSurfaceCounterFlagBitsEXT;

     TVkDisplayPowerStateEXT=
      (
       VK_DISPLAY_POWER_STATE_OFF_EXT=0,
       VK_DISPLAY_POWER_STATE_SUSPEND_EXT=1,
       VK_DISPLAY_POWER_STATE_ON_EXT=2
      );
     PPVkDisplayPowerStateEXT=^PVkDisplayPowerStateEXT;
     PVkDisplayPowerStateEXT=^TVkDisplayPowerStateEXT;

     TVkDeviceEventTypeEXT=
      (
       VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT=0
      );
     PPVkDeviceEventTypeEXT=^PVkDeviceEventTypeEXT;
     PVkDeviceEventTypeEXT=^TVkDeviceEventTypeEXT;

     TVkDisplayEventTypeEXT=
      (
       VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT=0
      );
     PPVkDisplayEventTypeEXT=^PVkDisplayEventTypeEXT;
     PVkDisplayEventTypeEXT=^TVkDisplayEventTypeEXT;

     VkPeerMemoryFeatureFlagBits_=
      (
       VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT=0,                                    // Can read with vkCmdCopy commands
       VK_PEER_MEMORY_FEATURE_COPY_DST_BIT=1,                                    // Can write with vkCmdCopy commands
       VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT=2,                                 // Can read with any access type/command
       VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT=3,                                 // Can write with and access type/command
       VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR=4,
       VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR=5,
       VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR=6,
       VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR=7
      );
     TVkPeerMemoryFeatureFlagBit=VkPeerMemoryFeatureFlagBits_;
     PPVkPeerMemoryFeatureFlagBit=^PVkPeerMemoryFeatureFlagBit;
     PVkPeerMemoryFeatureFlagBit=^TVkPeerMemoryFeatureFlagBit;

     TVkPeerMemoryFeatureFlagBits= Set of TVkPeerMemoryFeatureFlagBit; // This is SET OF
     PPVkPeerMemoryFeatureFlagBits=^PVkPeerMemoryFeatureFlagBits;
     PVkPeerMemoryFeatureFlagBits=^TVkPeerMemoryFeatureFlagBits;

     VkMemoryAllocateFlagBits_=
      (
       VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT=0,                                     // Force allocation on specific devices
       VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT=1,
       VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT=2,
       VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR=3,
       VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR=4,
       VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR=5
      );
     TVkMemoryAllocateFlagBit=VkMemoryAllocateFlagBits_;
     PPVkMemoryAllocateFlagBit=^PVkMemoryAllocateFlagBit;
     PVkMemoryAllocateFlagBit=^TVkMemoryAllocateFlagBit;

     TVkMemoryAllocateFlagBits= Set of TVkMemoryAllocateFlagBit; // This is SET OF
     PPVkMemoryAllocateFlagBits=^PVkMemoryAllocateFlagBits;
     PVkMemoryAllocateFlagBits=^TVkMemoryAllocateFlagBits;

     VkDeviceGroupPresentModeFlagBitsKHR_=
      (
       VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR=0,                             // Present from local memory
       VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR=1,                            // Present from remote memory
       VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR=2,                               // Present sum of local and/or remote memory
       VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR=3                 // Each physical device presents from local memory
      );
     TVkDeviceGroupPresentModeFlagBitsKH=VkDeviceGroupPresentModeFlagBitsKHR_;
     PPVkDeviceGroupPresentModeFlagBitsKH=^PVkDeviceGroupPresentModeFlagBitsKH;
     PVkDeviceGroupPresentModeFlagBitsKH=^TVkDeviceGroupPresentModeFlagBitsKH;

     TVkDeviceGroupPresentModeFlagBitsKHR= Set of TVkDeviceGroupPresentModeFlagBitsKH; // This is SET OF
     PPVkDeviceGroupPresentModeFlagBitsKHR=^PVkDeviceGroupPresentModeFlagBitsKHR;
     PVkDeviceGroupPresentModeFlagBitsKHR=^TVkDeviceGroupPresentModeFlagBitsKHR;

     VkSwapchainCreateFlagBitsKHR_=
      (
       VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR=0,
       VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR=1,
       VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR=2
      );
     TVkSwapchainCreateFlagBitsKH=VkSwapchainCreateFlagBitsKHR_;
     PPVkSwapchainCreateFlagBitsKH=^PVkSwapchainCreateFlagBitsKH;
     PVkSwapchainCreateFlagBitsKH=^TVkSwapchainCreateFlagBitsKH;

     TVkSwapchainCreateFlagBitsKHR= Set of TVkSwapchainCreateFlagBitsKH; // This is SET OF
     PPVkSwapchainCreateFlagBitsKHR=^PVkSwapchainCreateFlagBitsKHR;
     PVkSwapchainCreateFlagBitsKHR=^TVkSwapchainCreateFlagBitsKHR;

     TVkViewportCoordinateSwizzleNV=
      (
       VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV=0,
       VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV=1,
       VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV=2,
       VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV=3,
       VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV=4,
       VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV=5,
       VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV=6,
       VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV=7
      );
     PPVkViewportCoordinateSwizzleNV=^PVkViewportCoordinateSwizzleNV;
     PVkViewportCoordinateSwizzleNV=^TVkViewportCoordinateSwizzleNV;

     TVkDiscardRectangleModeEXT=
      (
       VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT=0,
       VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT=1
      );
     PPVkDiscardRectangleModeEXT=^PVkDiscardRectangleModeEXT;
     PVkDiscardRectangleModeEXT=^TVkDiscardRectangleModeEXT;

     VkSubpassDescriptionFlagBits_=
      (
       VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX=0,
       VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX=1,
       VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM=2,
       VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM=3
      );
     TVkSubpassDescriptionFlagBit=VkSubpassDescriptionFlagBits_;
     PPVkSubpassDescriptionFlagBit=^PVkSubpassDescriptionFlagBit;
     PVkSubpassDescriptionFlagBit=^TVkSubpassDescriptionFlagBit;

     TVkSubpassDescriptionFlagBits= Set of TVkSubpassDescriptionFlagBit; // This is SET OF
     PPVkSubpassDescriptionFlagBits=^PVkSubpassDescriptionFlagBits;
     PVkSubpassDescriptionFlagBits=^TVkSubpassDescriptionFlagBits;

     TVkPointClippingBehavior=
      (
       VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES=0,
       VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY=1,
       VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR=VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
       VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR=VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY
      );
     PPVkPointClippingBehavior=^PVkPointClippingBehavior;
     PVkPointClippingBehavior=^TVkPointClippingBehavior;

     TVkSamplerReductionMode=
      (
       VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE=0,
       VK_SAMPLER_REDUCTION_MODE_MIN=1,
       VK_SAMPLER_REDUCTION_MODE_MAX=2,
       VK_SAMPLER_REDUCTION_MODE_MAX_EXT=VK_SAMPLER_REDUCTION_MODE_MAX,
       VK_SAMPLER_REDUCTION_MODE_MIN_EXT=VK_SAMPLER_REDUCTION_MODE_MIN,
       VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT=VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE
      );
     PPVkSamplerReductionMode=^PVkSamplerReductionMode;
     PVkSamplerReductionMode=^TVkSamplerReductionMode;

     TVkTessellationDomainOrigin=
      (
       VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT=0,
       VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT=1,
       VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR=VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
       VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR=VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT
      );
     PPVkTessellationDomainOrigin=^PVkTessellationDomainOrigin;
     PVkTessellationDomainOrigin=^TVkTessellationDomainOrigin;

     TVkSamplerYcbcrModelConversion=
      (
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY=0,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY=1,                       // just range expansion
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709=2,                            // aka HD YUV
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601=3,                            // aka SD YUV
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020=4,                           // aka UHD YUV
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR=VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR=VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR=VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR=VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR=VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY
      );
     PPVkSamplerYcbcrModelConversion=^PVkSamplerYcbcrModelConversion;
     PVkSamplerYcbcrModelConversion=^TVkSamplerYcbcrModelConversion;

     TVkSamplerYcbcrRange=
      (
       VK_SAMPLER_YCBCR_RANGE_ITU_FULL=0,                                        // Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)
       VK_SAMPLER_YCBCR_RANGE_ITU_NARROW=1,                                      // Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240
       VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR=VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
       VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR=VK_SAMPLER_YCBCR_RANGE_ITU_NARROW
      );
     PPVkSamplerYcbcrRange=^PVkSamplerYcbcrRange;
     PVkSamplerYcbcrRange=^TVkSamplerYcbcrRange;

     TVkChromaLocation=
      (
       VK_CHROMA_LOCATION_COSITED_EVEN=0,
       VK_CHROMA_LOCATION_MIDPOINT=1,
       VK_CHROMA_LOCATION_COSITED_EVEN_KHR=VK_CHROMA_LOCATION_COSITED_EVEN,
       VK_CHROMA_LOCATION_MIDPOINT_KHR=VK_CHROMA_LOCATION_MIDPOINT
      );
     PPVkChromaLocation=^PVkChromaLocation;
     PVkChromaLocation=^TVkChromaLocation;

     TVkBlendOverlapEXT=
      (
       VK_BLEND_OVERLAP_UNCORRELATED_EXT=0,
       VK_BLEND_OVERLAP_DISJOINT_EXT=1,
       VK_BLEND_OVERLAP_CONJOINT_EXT=2
      );
     PPVkBlendOverlapEXT=^PVkBlendOverlapEXT;
     PVkBlendOverlapEXT=^TVkBlendOverlapEXT;

     TVkCoverageModulationModeNV=
      (
       VK_COVERAGE_MODULATION_MODE_NONE_NV=0,
       VK_COVERAGE_MODULATION_MODE_RGB_NV=1,
       VK_COVERAGE_MODULATION_MODE_ALPHA_NV=2,
       VK_COVERAGE_MODULATION_MODE_RGBA_NV=3
      );
     PPVkCoverageModulationModeNV=^PVkCoverageModulationModeNV;
     PVkCoverageModulationModeNV=^TVkCoverageModulationModeNV;

     TVkCoverageReductionModeNV=
      (
       VK_COVERAGE_REDUCTION_MODE_MERGE_NV=0,
       VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV=1
      );
     PPVkCoverageReductionModeNV=^PVkCoverageReductionModeNV;
     PVkCoverageReductionModeNV=^TVkCoverageReductionModeNV;

     TVkValidationCacheHeaderVersionEXT=
      (
       VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT=1
      );
     PPVkValidationCacheHeaderVersionEXT=^PVkValidationCacheHeaderVersionEXT;
     PVkValidationCacheHeaderVersionEXT=^TVkValidationCacheHeaderVersionEXT;

     TVkShaderInfoTypeAMD=
      (
       VK_SHADER_INFO_TYPE_STATISTICS_AMD=0,
       VK_SHADER_INFO_TYPE_BINARY_AMD=1,
       VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD=2
      );
     PPVkShaderInfoTypeAMD=^PVkShaderInfoTypeAMD;
     PVkShaderInfoTypeAMD=^TVkShaderInfoTypeAMD;

     TVkQueueGlobalPriorityEXT=
      (
       VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT=128,
       VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT=256,
       VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT=512,
       VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT=1024
      );
     PPVkQueueGlobalPriorityEXT=^PVkQueueGlobalPriorityEXT;
     PVkQueueGlobalPriorityEXT=^TVkQueueGlobalPriorityEXT;

     VkDebugUtilsMessageSeverityFlagBitsEXT_=
      (
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT=0,
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT=1,
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT=2,
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT=3
      );
     TVkDebugUtilsMessageSeverityFlagBitsEX=VkDebugUtilsMessageSeverityFlagBitsEXT_;
     PPVkDebugUtilsMessageSeverityFlagBitsEX=^PVkDebugUtilsMessageSeverityFlagBitsEX;
     PVkDebugUtilsMessageSeverityFlagBitsEX=^TVkDebugUtilsMessageSeverityFlagBitsEX;

     TVkDebugUtilsMessageSeverityFlagBitsEXT= Set of TVkDebugUtilsMessageSeverityFlagBitsEX; // This is SET OF
     PPVkDebugUtilsMessageSeverityFlagBitsEXT=^PVkDebugUtilsMessageSeverityFlagBitsEXT;
     PVkDebugUtilsMessageSeverityFlagBitsEXT=^TVkDebugUtilsMessageSeverityFlagBitsEXT;

     VkDebugUtilsMessageTypeFlagBitsEXT_=
      (
       VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT=0,
       VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT=1,
       VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT=2
      );
     TVkDebugUtilsMessageTypeFlagBitsEX=VkDebugUtilsMessageTypeFlagBitsEXT_;
     PPVkDebugUtilsMessageTypeFlagBitsEX=^PVkDebugUtilsMessageTypeFlagBitsEX;
     PVkDebugUtilsMessageTypeFlagBitsEX=^TVkDebugUtilsMessageTypeFlagBitsEX;

     TVkDebugUtilsMessageTypeFlagBitsEXT= Set of TVkDebugUtilsMessageTypeFlagBitsEX; // This is SET OF
     PPVkDebugUtilsMessageTypeFlagBitsEXT=^PVkDebugUtilsMessageTypeFlagBitsEXT;
     PVkDebugUtilsMessageTypeFlagBitsEXT=^TVkDebugUtilsMessageTypeFlagBitsEXT;

     TVkConservativeRasterizationModeEXT=
      (
       VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT=0,
       VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT=1,
       VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT=2
      );
     PPVkConservativeRasterizationModeEXT=^PVkConservativeRasterizationModeEXT;
     PVkConservativeRasterizationModeEXT=^TVkConservativeRasterizationModeEXT;

     VkDescriptorBindingFlagBits_=
      (
       VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT=0,
       VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT=1,
       VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT=2,
       VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT=3,
       VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT=4,
       VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT=5,
       VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT=6,
       VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT=7
      );
     TVkDescriptorBindingFlagBit=VkDescriptorBindingFlagBits_;
     PPVkDescriptorBindingFlagBit=^PVkDescriptorBindingFlagBit;
     PVkDescriptorBindingFlagBit=^TVkDescriptorBindingFlagBit;

     TVkDescriptorBindingFlagBits= Set of TVkDescriptorBindingFlagBit; // This is SET OF
     PPVkDescriptorBindingFlagBits=^PVkDescriptorBindingFlagBits;
     PVkDescriptorBindingFlagBits=^TVkDescriptorBindingFlagBits;

     TVkVendorId=
      (
       VK_VENDOR_ID_VIV=65537,                                                   // Vivante vendor ID
       VK_VENDOR_ID_VSI=65538,                                                   // VeriSilicon vendor ID
       VK_VENDOR_ID_KAZAN=65539,                                                 // Kazan Software Renderer
       VK_VENDOR_ID_CODEPLAY=65540,                                              // Codeplay Software Ltd. vendor ID
       VK_VENDOR_ID_MESA=65541,                                                  // Mesa vendor ID
       VK_VENDOR_ID_UNUSED_START=65542                                           // This is the next unused available Khronos vendor ID
      );
     PPVkVendorId=^PVkVendorId;
     PVkVendorId=^TVkVendorId;

     TVkDriverId=
      (
       VK_DRIVER_ID_AMD_PROPRIETARY=1,                                           // Advanced Micro Devices, Inc.
       VK_DRIVER_ID_AMD_OPEN_SOURCE=2,                                           // Advanced Micro Devices, Inc.
       VK_DRIVER_ID_MESA_RADV=3,                                                 // Mesa open source project
       VK_DRIVER_ID_NVIDIA_PROPRIETARY=4,                                        // NVIDIA Corporation
       VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS=5,                                 // Intel Corporation
       VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA=6,                                    // Intel Corporation
       VK_DRIVER_ID_IMAGINATION_PROPRIETARY=7,                                   // Imagination Technologies
       VK_DRIVER_ID_QUALCOMM_PROPRIETARY=8,                                      // Qualcomm Technologies, Inc.
       VK_DRIVER_ID_ARM_PROPRIETARY=9,                                           // Arm Limited
       VK_DRIVER_ID_GOOGLE_SWIFTSHADER=10,                                       // Google LLC
       VK_DRIVER_ID_GGP_PROPRIETARY=11,                                          // Google LLC
       VK_DRIVER_ID_BROADCOM_PROPRIETARY=12,                                     // Broadcom Inc.
       VK_DRIVER_ID_MESA_LLVMPIPE=13,                                            // Mesa
       VK_DRIVER_ID_MOLTENVK=14,                                                 // MoltenVK
       VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR=VK_DRIVER_ID_AMD_OPEN_SOURCE,
       VK_DRIVER_ID_AMD_PROPRIETARY_KHR=VK_DRIVER_ID_AMD_PROPRIETARY,
       VK_DRIVER_ID_ARM_PROPRIETARY_KHR=VK_DRIVER_ID_ARM_PROPRIETARY,
       VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR=VK_DRIVER_ID_BROADCOM_PROPRIETARY,
       VK_DRIVER_ID_GGP_PROPRIETARY_KHR=VK_DRIVER_ID_GGP_PROPRIETARY,
       VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR=VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
       VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR=VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
       VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR=VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
       VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR=VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
       VK_DRIVER_ID_MESA_RADV_KHR=VK_DRIVER_ID_MESA_RADV,
       VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR=VK_DRIVER_ID_NVIDIA_PROPRIETARY,
       VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR=VK_DRIVER_ID_QUALCOMM_PROPRIETARY
      );
     PPVkDriverId=^PVkDriverId;
     PVkDriverId=^TVkDriverId;

     VkConditionalRenderingFlagBitsEXT_=
      (
       VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT=0
      );
     TVkConditionalRenderingFlagBitsEX=VkConditionalRenderingFlagBitsEXT_;
     PPVkConditionalRenderingFlagBitsEX=^PVkConditionalRenderingFlagBitsEX;
     PVkConditionalRenderingFlagBitsEX=^TVkConditionalRenderingFlagBitsEX;

     TVkConditionalRenderingFlagBitsEXT= Set of TVkConditionalRenderingFlagBitsEX; // This is SET OF
     PPVkConditionalRenderingFlagBitsEXT=^PVkConditionalRenderingFlagBitsEXT;
     PVkConditionalRenderingFlagBitsEXT=^TVkConditionalRenderingFlagBitsEXT;

     VkResolveModeFlagBits_=
      (
       VK_RESOLVE_MODE_NONE=0,
       VK_RESOLVE_MODE_SAMPLE_ZERO_BIT=1,
       VK_RESOLVE_MODE_AVERAGE_BIT=2,
       VK_RESOLVE_MODE_MIN_BIT=3,
       VK_RESOLVE_MODE_MAX_BIT=4,
       VK_RESOLVE_MODE_AVERAGE_BIT_KHR=5,
       VK_RESOLVE_MODE_MAX_BIT_KHR=6,
       VK_RESOLVE_MODE_MIN_BIT_KHR=7,
       VK_RESOLVE_MODE_NONE_KHR=8,
       VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR=9
      );
     TVkResolveModeFlagBit=VkResolveModeFlagBits_;
     PPVkResolveModeFlagBit=^PVkResolveModeFlagBit;
     PVkResolveModeFlagBit=^TVkResolveModeFlagBit;

     TVkResolveModeFlagBits= Set of TVkResolveModeFlagBit; // This is SET OF
     PPVkResolveModeFlagBits=^PVkResolveModeFlagBits;
     PVkResolveModeFlagBits=^TVkResolveModeFlagBits;

     TVkShadingRatePaletteEntryNV=
      (
       VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV=0,
       VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV=1,
       VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV=2,
       VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV=3,
       VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV=4,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV=5,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV=6,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV=7,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV=8,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV=9,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV=10,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV=11
      );
     PPVkShadingRatePaletteEntryNV=^PVkShadingRatePaletteEntryNV;
     PVkShadingRatePaletteEntryNV=^TVkShadingRatePaletteEntryNV;

     TVkCoarseSampleOrderTypeNV=
      (
       VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV=0,
       VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV=1,
       VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV=2,
       VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV=3
      );
     PPVkCoarseSampleOrderTypeNV=^PVkCoarseSampleOrderTypeNV;
     PVkCoarseSampleOrderTypeNV=^TVkCoarseSampleOrderTypeNV;

     VkGeometryInstanceFlagBitsKHR_=
      (
       VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR=0,
       VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR=1,
       VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR=2,
       VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR=3,
       VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV=4,
       VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV=5,
       VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV=6,
       VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV=7
      );
     TVkGeometryInstanceFlagBitsKH=VkGeometryInstanceFlagBitsKHR_;
     PPVkGeometryInstanceFlagBitsKH=^PVkGeometryInstanceFlagBitsKH;
     PVkGeometryInstanceFlagBitsKH=^TVkGeometryInstanceFlagBitsKH;

     TVkGeometryInstanceFlagBitsKHR= Set of TVkGeometryInstanceFlagBitsKH; // This is SET OF
     PPVkGeometryInstanceFlagBitsKHR=^PVkGeometryInstanceFlagBitsKHR;
     PVkGeometryInstanceFlagBitsKHR=^TVkGeometryInstanceFlagBitsKHR;

     VkGeometryFlagBitsKHR_=
      (
       VK_GEOMETRY_OPAQUE_BIT_KHR=0,
       VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR=1,
       VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV=2,
       VK_GEOMETRY_OPAQUE_BIT_NV=3
      );
     TVkGeometryFlagBitsKH=VkGeometryFlagBitsKHR_;
     PPVkGeometryFlagBitsKH=^PVkGeometryFlagBitsKH;
     PVkGeometryFlagBitsKH=^TVkGeometryFlagBitsKH;

     TVkGeometryFlagBitsKHR= Set of TVkGeometryFlagBitsKH; // This is SET OF
     PPVkGeometryFlagBitsKHR=^PVkGeometryFlagBitsKHR;
     PVkGeometryFlagBitsKHR=^TVkGeometryFlagBitsKHR;

     VkBuildAccelerationStructureFlagBitsKHR_=
      (
       VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR=0,
       VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR=1,
       VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR=2,
       VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR=3,
       VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR=4,
       VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV=5,
       VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV=6,
       VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV=7,
       VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV=8,
       VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV=9
      );
     TVkBuildAccelerationStructureFlagBitsKH=VkBuildAccelerationStructureFlagBitsKHR_;
     PPVkBuildAccelerationStructureFlagBitsKH=^PVkBuildAccelerationStructureFlagBitsKH;
     PVkBuildAccelerationStructureFlagBitsKH=^TVkBuildAccelerationStructureFlagBitsKH;

     TVkBuildAccelerationStructureFlagBitsKHR= Set of TVkBuildAccelerationStructureFlagBitsKH; // This is SET OF
     PPVkBuildAccelerationStructureFlagBitsKHR=^PVkBuildAccelerationStructureFlagBitsKHR;
     PVkBuildAccelerationStructureFlagBitsKHR=^TVkBuildAccelerationStructureFlagBitsKHR;

     TVkCopyAccelerationStructureModeKHR=
      (
       VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR=0,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR=1,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR=2,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR=3,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV=VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV=VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR
      );
     PPVkCopyAccelerationStructureModeKHR=^PVkCopyAccelerationStructureModeKHR;
     PVkCopyAccelerationStructureModeKHR=^TVkCopyAccelerationStructureModeKHR;

     TVkAccelerationStructureTypeKHR=
      (
       VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR=0,
       VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR=1,
       VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV=VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
       VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV=VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR
      );
     PPVkAccelerationStructureTypeKHR=^PVkAccelerationStructureTypeKHR;
     PVkAccelerationStructureTypeKHR=^TVkAccelerationStructureTypeKHR;

     TVkGeometryTypeKHR=
      (
       VK_GEOMETRY_TYPE_TRIANGLES_KHR=0,
       VK_GEOMETRY_TYPE_AABBS_KHR=1,
       VK_GEOMETRY_TYPE_INSTANCES_KHR=1000150000,
       VK_GEOMETRY_TYPE_AABBS_NV=VK_GEOMETRY_TYPE_AABBS_KHR,
       VK_GEOMETRY_TYPE_TRIANGLES_NV=VK_GEOMETRY_TYPE_TRIANGLES_KHR
      );
     PPVkGeometryTypeKHR=^PVkGeometryTypeKHR;
     PVkGeometryTypeKHR=^TVkGeometryTypeKHR;

     TVkAccelerationStructureMemoryRequirementsTypeKHR=
      (
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR=0,
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR=1,
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR=2,
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV=VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR,
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV=VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR,
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV=VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR
      );
     PPVkAccelerationStructureMemoryRequirementsTypeKHR=^PVkAccelerationStructureMemoryRequirementsTypeKHR;
     PVkAccelerationStructureMemoryRequirementsTypeKHR=^TVkAccelerationStructureMemoryRequirementsTypeKHR;

     TVkAccelerationStructureBuildTypeKHR=
      (
       VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR=0,
       VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR=1,
       VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR=2
      );
     PPVkAccelerationStructureBuildTypeKHR=^PVkAccelerationStructureBuildTypeKHR;
     PVkAccelerationStructureBuildTypeKHR=^TVkAccelerationStructureBuildTypeKHR;

     TVkRayTracingShaderGroupTypeKHR=
      (
       VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR=0,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR=1,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR=2,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV=VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV=VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV=VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR
      );
     PPVkRayTracingShaderGroupTypeKHR=^PVkRayTracingShaderGroupTypeKHR;
     PVkRayTracingShaderGroupTypeKHR=^TVkRayTracingShaderGroupTypeKHR;

     TVkMemoryOverallocationBehaviorAMD=
      (
       VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD=0,
       VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD=1,
       VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD=2
      );
     PPVkMemoryOverallocationBehaviorAMD=^PVkMemoryOverallocationBehaviorAMD;
     PVkMemoryOverallocationBehaviorAMD=^TVkMemoryOverallocationBehaviorAMD;

     VkFramebufferCreateFlagBits_=
      (
       VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT=0,
       VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR=1
      );
     TVkFramebufferCreateFlagBit=VkFramebufferCreateFlagBits_;
     PPVkFramebufferCreateFlagBit=^PVkFramebufferCreateFlagBit;
     PVkFramebufferCreateFlagBit=^TVkFramebufferCreateFlagBit;

     TVkFramebufferCreateFlagBits= Set of TVkFramebufferCreateFlagBit; // This is SET OF
     PPVkFramebufferCreateFlagBits=^PVkFramebufferCreateFlagBits;
     PVkFramebufferCreateFlagBits=^TVkFramebufferCreateFlagBits;

     TVkScopeNV=
      (
       VK_SCOPE_DEVICE_NV=1,
       VK_SCOPE_WORKGROUP_NV=2,
       VK_SCOPE_SUBGROUP_NV=3,
       VK_SCOPE_QUEUE_FAMILY_NV=5
      );
     PPVkScopeNV=^PVkScopeNV;
     PVkScopeNV=^TVkScopeNV;

     TVkComponentTypeNV=
      (
       VK_COMPONENT_TYPE_FLOAT16_NV=0,
       VK_COMPONENT_TYPE_FLOAT32_NV=1,
       VK_COMPONENT_TYPE_FLOAT64_NV=2,
       VK_COMPONENT_TYPE_SINT8_NV=3,
       VK_COMPONENT_TYPE_SINT16_NV=4,
       VK_COMPONENT_TYPE_SINT32_NV=5,
       VK_COMPONENT_TYPE_SINT64_NV=6,
       VK_COMPONENT_TYPE_UINT8_NV=7,
       VK_COMPONENT_TYPE_UINT16_NV=8,
       VK_COMPONENT_TYPE_UINT32_NV=9,
       VK_COMPONENT_TYPE_UINT64_NV=10
      );
     PPVkComponentTypeNV=^PVkComponentTypeNV;
     PVkComponentTypeNV=^TVkComponentTypeNV;

     VkDeviceDiagnosticsConfigFlagBitsNV_=
      (
       VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV=0,
       VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV=1,
       VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV=2
      );
     TVkDeviceDiagnosticsConfigFlagBitsN=VkDeviceDiagnosticsConfigFlagBitsNV_;
     PPVkDeviceDiagnosticsConfigFlagBitsN=^PVkDeviceDiagnosticsConfigFlagBitsN;
     PVkDeviceDiagnosticsConfigFlagBitsN=^TVkDeviceDiagnosticsConfigFlagBitsN;

     TVkDeviceDiagnosticsConfigFlagBitsNV= Set of TVkDeviceDiagnosticsConfigFlagBitsN; // This is SET OF
     PPVkDeviceDiagnosticsConfigFlagBitsNV=^PVkDeviceDiagnosticsConfigFlagBitsNV;
     PVkDeviceDiagnosticsConfigFlagBitsNV=^TVkDeviceDiagnosticsConfigFlagBitsNV;

     VkPipelineCreationFeedbackFlagBitsEXT_=
      (
       VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT=0,
       VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT=1,
       VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT=2
      );
     TVkPipelineCreationFeedbackFlagBitsEX=VkPipelineCreationFeedbackFlagBitsEXT_;
     PPVkPipelineCreationFeedbackFlagBitsEX=^PVkPipelineCreationFeedbackFlagBitsEX;
     PVkPipelineCreationFeedbackFlagBitsEX=^TVkPipelineCreationFeedbackFlagBitsEX;

     TVkPipelineCreationFeedbackFlagBitsEXT= Set of TVkPipelineCreationFeedbackFlagBitsEX; // This is SET OF
     PPVkPipelineCreationFeedbackFlagBitsEXT=^PVkPipelineCreationFeedbackFlagBitsEXT;
     PVkPipelineCreationFeedbackFlagBitsEXT=^TVkPipelineCreationFeedbackFlagBitsEXT;

     TVkFullScreenExclusiveEXT=
      (
       VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT=0,
       VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT=1,
       VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT=2,
       VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT=3
      );
     PPVkFullScreenExclusiveEXT=^PVkFullScreenExclusiveEXT;
     PVkFullScreenExclusiveEXT=^TVkFullScreenExclusiveEXT;

     TVkPerformanceCounterScopeKHR=
      (
       VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR=0,
       VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR=1,
       VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR=2,
       VK_QUERY_SCOPE_COMMAND_BUFFER_KHR=VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
       VK_QUERY_SCOPE_COMMAND_KHR=VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
       VK_QUERY_SCOPE_RENDER_PASS_KHR=VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR
      );
     PPVkPerformanceCounterScopeKHR=^PVkPerformanceCounterScopeKHR;
     PVkPerformanceCounterScopeKHR=^TVkPerformanceCounterScopeKHR;

     TVkPerformanceCounterUnitKHR=
      (
       VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR=0,
       VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR=1,
       VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR=2,
       VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR=3,
       VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR=4,
       VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR=5,
       VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR=6,
       VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR=7,
       VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR=8,
       VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR=9,
       VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR=10
      );
     PPVkPerformanceCounterUnitKHR=^PVkPerformanceCounterUnitKHR;
     PVkPerformanceCounterUnitKHR=^TVkPerformanceCounterUnitKHR;

     TVkPerformanceCounterStorageKHR=
      (
       VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR=0,
       VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR=1,
       VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR=2,
       VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR=3,
       VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR=4,
       VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR=5
      );
     PPVkPerformanceCounterStorageKHR=^PVkPerformanceCounterStorageKHR;
     PVkPerformanceCounterStorageKHR=^TVkPerformanceCounterStorageKHR;

     VkPerformanceCounterDescriptionFlagBitsKHR_=
      (
       VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR=0,
       VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR=1
      );
     TVkPerformanceCounterDescriptionFlagBitsKH=VkPerformanceCounterDescriptionFlagBitsKHR_;
     PPVkPerformanceCounterDescriptionFlagBitsKH=^PVkPerformanceCounterDescriptionFlagBitsKH;
     PVkPerformanceCounterDescriptionFlagBitsKH=^TVkPerformanceCounterDescriptionFlagBitsKH;

     TVkPerformanceCounterDescriptionFlagBitsKHR= Set of TVkPerformanceCounterDescriptionFlagBitsKH; // This is SET OF
     PPVkPerformanceCounterDescriptionFlagBitsKHR=^PVkPerformanceCounterDescriptionFlagBitsKHR;
     PVkPerformanceCounterDescriptionFlagBitsKHR=^TVkPerformanceCounterDescriptionFlagBitsKHR;

     VkAcquireProfilingLockFlagBitsKHR_=
      (
       VkAcquireProfilingLockFlagBitsKHR_dummy=0    // Added from apiBuilderVulkan
      );
     TVkAcquireProfilingLockFlagBitsKH=VkAcquireProfilingLockFlagBitsKHR_;
     PPVkAcquireProfilingLockFlagBitsKH=^PVkAcquireProfilingLockFlagBitsKH;
     PVkAcquireProfilingLockFlagBitsKH=^TVkAcquireProfilingLockFlagBitsKH;

     TVkAcquireProfilingLockFlagBitsKHR= Set of TVkAcquireProfilingLockFlagBitsKH; // This is SET OF
     PPVkAcquireProfilingLockFlagBitsKHR=^PVkAcquireProfilingLockFlagBitsKHR;
     PVkAcquireProfilingLockFlagBitsKHR=^TVkAcquireProfilingLockFlagBitsKHR;

     VkShaderCorePropertiesFlagBitsAMD_=
      (
       VkShaderCorePropertiesFlagBitsAMD_dummy=0    // Added from apiBuilderVulkan
      );
     TVkShaderCorePropertiesFlagBitsAM=VkShaderCorePropertiesFlagBitsAMD_;
     PPVkShaderCorePropertiesFlagBitsAM=^PVkShaderCorePropertiesFlagBitsAM;
     PVkShaderCorePropertiesFlagBitsAM=^TVkShaderCorePropertiesFlagBitsAM;

     TVkShaderCorePropertiesFlagBitsAMD= Set of TVkShaderCorePropertiesFlagBitsAM; // This is SET OF
     PPVkShaderCorePropertiesFlagBitsAMD=^PVkShaderCorePropertiesFlagBitsAMD;
     PVkShaderCorePropertiesFlagBitsAMD=^TVkShaderCorePropertiesFlagBitsAMD;

     TVkPerformanceConfigurationTypeINTEL=
      (
       VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL=0
      );
     PPVkPerformanceConfigurationTypeINTEL=^PVkPerformanceConfigurationTypeINTEL;
     PVkPerformanceConfigurationTypeINTEL=^TVkPerformanceConfigurationTypeINTEL;

     TVkQueryPoolSamplingModeINTEL=
      (
       VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL=0
      );
     PPVkQueryPoolSamplingModeINTEL=^PVkQueryPoolSamplingModeINTEL;
     PVkQueryPoolSamplingModeINTEL=^TVkQueryPoolSamplingModeINTEL;

     TVkPerformanceOverrideTypeINTEL=
      (
       VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL=0,
       VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL=1
      );
     PPVkPerformanceOverrideTypeINTEL=^PVkPerformanceOverrideTypeINTEL;
     PVkPerformanceOverrideTypeINTEL=^TVkPerformanceOverrideTypeINTEL;

     TVkPerformanceParameterTypeINTEL=
      (
       VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL=0,
       VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL=1
      );
     PPVkPerformanceParameterTypeINTEL=^PVkPerformanceParameterTypeINTEL;
     PVkPerformanceParameterTypeINTEL=^TVkPerformanceParameterTypeINTEL;

     TVkPerformanceValueTypeINTEL=
      (
       VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL=0,
       VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL=1,
       VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL=2,
       VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL=3,
       VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL=4
      );
     PPVkPerformanceValueTypeINTEL=^PVkPerformanceValueTypeINTEL;
     PVkPerformanceValueTypeINTEL=^TVkPerformanceValueTypeINTEL;

     TVkShaderFloatControlsIndependence=
      (
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY=0,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL=1,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE=2,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR=VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR=VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR=VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE
      );
     PPVkShaderFloatControlsIndependence=^PVkShaderFloatControlsIndependence;
     PVkShaderFloatControlsIndependence=^TVkShaderFloatControlsIndependence;

     TVkPipelineExecutableStatisticFormatKHR=
      (
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR=0,
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR=1,
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR=2,
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR=3
      );
     PPVkPipelineExecutableStatisticFormatKHR=^PVkPipelineExecutableStatisticFormatKHR;
     PVkPipelineExecutableStatisticFormatKHR=^TVkPipelineExecutableStatisticFormatKHR;

     TVkLineRasterizationModeEXT=
      (
       VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT=0,
       VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT=1,
       VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT=2,
       VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT=3
      );
     PPVkLineRasterizationModeEXT=^PVkLineRasterizationModeEXT;
     PVkLineRasterizationModeEXT=^TVkLineRasterizationModeEXT;

     VkShaderModuleCreateFlagBits_=
      (
       VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV=0
      );
     TVkShaderModuleCreateFlagBit=VkShaderModuleCreateFlagBits_;
     PPVkShaderModuleCreateFlagBit=^PVkShaderModuleCreateFlagBit;
     PVkShaderModuleCreateFlagBit=^TVkShaderModuleCreateFlagBit;

     TVkShaderModuleCreateFlagBits= Set of TVkShaderModuleCreateFlagBit; // This is SET OF
     PPVkShaderModuleCreateFlagBits=^PVkShaderModuleCreateFlagBits;
     PVkShaderModuleCreateFlagBits=^TVkShaderModuleCreateFlagBits;

     VkPipelineCompilerControlFlagBitsAMD_=
      (
       VkPipelineCompilerControlFlagBitsAMD_dummy=0    // Added from apiBuilderVulkan
      );
     TVkPipelineCompilerControlFlagBitsAM=VkPipelineCompilerControlFlagBitsAMD_;
     PPVkPipelineCompilerControlFlagBitsAM=^PVkPipelineCompilerControlFlagBitsAM;
     PVkPipelineCompilerControlFlagBitsAM=^TVkPipelineCompilerControlFlagBitsAM;

     TVkPipelineCompilerControlFlagBitsAMD= Set of TVkPipelineCompilerControlFlagBitsAM; // This is SET OF
     PPVkPipelineCompilerControlFlagBitsAMD=^PVkPipelineCompilerControlFlagBitsAMD;
     PVkPipelineCompilerControlFlagBitsAMD=^TVkPipelineCompilerControlFlagBitsAMD;

     VkToolPurposeFlagBitsEXT_=
      (
       VK_TOOL_PURPOSE_VALIDATION_BIT_EXT=0,
       VK_TOOL_PURPOSE_PROFILING_BIT_EXT=1,
       VK_TOOL_PURPOSE_TRACING_BIT_EXT=2,
       VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT=3,
       VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT=4,
       VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT=5,
       VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT=6
      );
     TVkToolPurposeFlagBitsEX=VkToolPurposeFlagBitsEXT_;
     PPVkToolPurposeFlagBitsEX=^PVkToolPurposeFlagBitsEX;
     PVkToolPurposeFlagBitsEX=^TVkToolPurposeFlagBitsEX;

     TVkToolPurposeFlagBitsEXT= Set of TVkToolPurposeFlagBitsEX; // This is SET OF
     PPVkToolPurposeFlagBitsEXT=^PVkToolPurposeFlagBitsEXT;
     PVkToolPurposeFlagBitsEXT=^TVkToolPurposeFlagBitsEXT;

     TVkFramebufferCreateFlags=TVkFramebufferCreateFlagBits;
     PPVkFramebufferCreateFlags=^PVkFramebufferCreateFlags;
     PVkFramebufferCreateFlags=^TVkFramebufferCreateFlags;

     TVkRenderPassCreateFlags=TVkRenderPassCreateFlagBits;
     PPVkRenderPassCreateFlags=^PVkRenderPassCreateFlags;
     PVkRenderPassCreateFlags=^TVkRenderPassCreateFlags;

     TVkSamplerCreateFlags=TVkSamplerCreateFlagBits;
     PPVkSamplerCreateFlags=^PVkSamplerCreateFlags;
     PVkSamplerCreateFlags=^TVkSamplerCreateFlags;

     TVkPipelineCacheCreateFlags=TVkPipelineCacheCreateFlagBits;
     PPVkPipelineCacheCreateFlags=^PVkPipelineCacheCreateFlags;
     PVkPipelineCacheCreateFlags=^TVkPipelineCacheCreateFlags;

     TVkPipelineShaderStageCreateFlags=TVkPipelineShaderStageCreateFlagBits;
     PPVkPipelineShaderStageCreateFlags=^PVkPipelineShaderStageCreateFlags;
     PVkPipelineShaderStageCreateFlags=^TVkPipelineShaderStageCreateFlags;

     TVkDescriptorSetLayoutCreateFlags=TVkDescriptorSetLayoutCreateFlagBits;
     PPVkDescriptorSetLayoutCreateFlags=^PVkDescriptorSetLayoutCreateFlags;
     PVkDescriptorSetLayoutCreateFlags=^TVkDescriptorSetLayoutCreateFlags;

     TVkDeviceQueueCreateFlags=TVkDeviceQueueCreateFlagBits;
     PPVkDeviceQueueCreateFlags=^PVkDeviceQueueCreateFlags;
     PVkDeviceQueueCreateFlags=^TVkDeviceQueueCreateFlags;

     TVkQueueFlags=TVkQueueFlagBits;
     PPVkQueueFlags=^PVkQueueFlags;
     PVkQueueFlags=^TVkQueueFlags;

     TVkMemoryPropertyFlags=TVkMemoryPropertyFlagBits;
     PPVkMemoryPropertyFlags=^PVkMemoryPropertyFlags;
     PVkMemoryPropertyFlags=^TVkMemoryPropertyFlags;

     TVkMemoryHeapFlags=TVkMemoryHeapFlagBits;
     PPVkMemoryHeapFlags=^PVkMemoryHeapFlags;
     PVkMemoryHeapFlags=^TVkMemoryHeapFlags;

     TVkAccessFlags=TVkAccessFlagBits;
     PPVkAccessFlags=^PVkAccessFlags;
     PVkAccessFlags=^TVkAccessFlags;

     TVkBufferUsageFlags=TVkBufferUsageFlagBits;
     PPVkBufferUsageFlags=^PVkBufferUsageFlags;
     PVkBufferUsageFlags=^TVkBufferUsageFlags;

     TVkBufferCreateFlags=TVkBufferCreateFlagBits;
     PPVkBufferCreateFlags=^PVkBufferCreateFlags;
     PVkBufferCreateFlags=^TVkBufferCreateFlags;

     TVkShaderStageFlags=TVkShaderStageFlagBits;
     PPVkShaderStageFlags=^PVkShaderStageFlags;
     PVkShaderStageFlags=^TVkShaderStageFlags;

     TVkImageUsageFlags=TVkImageUsageFlagBits;
     PPVkImageUsageFlags=^PVkImageUsageFlags;
     PVkImageUsageFlags=^TVkImageUsageFlags;

     TVkImageCreateFlags=TVkImageCreateFlagBits;
     PPVkImageCreateFlags=^PVkImageCreateFlags;
     PVkImageCreateFlags=^TVkImageCreateFlags;

     TVkImageViewCreateFlags=TVkImageViewCreateFlagBits;
     PPVkImageViewCreateFlags=^PVkImageViewCreateFlags;
     PVkImageViewCreateFlags=^TVkImageViewCreateFlags;

     TVkPipelineCreateFlags=TVkPipelineCreateFlagBits;
     PPVkPipelineCreateFlags=^PVkPipelineCreateFlags;
     PVkPipelineCreateFlags=^TVkPipelineCreateFlags;

     TVkColorComponentFlags=TVkColorComponentFlagBits;
     PPVkColorComponentFlags=^PVkColorComponentFlags;
     PVkColorComponentFlags=^TVkColorComponentFlags;

     TVkFenceCreateFlags=TVkFenceCreateFlagBits;
     PPVkFenceCreateFlags=^PVkFenceCreateFlags;
     PVkFenceCreateFlags=^TVkFenceCreateFlags;

     TVkFormatFeatureFlags=TVkFormatFeatureFlagBits;
     PPVkFormatFeatureFlags=^PVkFormatFeatureFlags;
     PVkFormatFeatureFlags=^TVkFormatFeatureFlags;

     TVkQueryControlFlags=TVkQueryControlFlagBits;
     PPVkQueryControlFlags=^PVkQueryControlFlags;
     PVkQueryControlFlags=^TVkQueryControlFlags;

     TVkQueryResultFlags=TVkQueryResultFlagBits;
     PPVkQueryResultFlags=^PVkQueryResultFlags;
     PVkQueryResultFlags=^TVkQueryResultFlags;

     TVkShaderModuleCreateFlags=TVkShaderModuleCreateFlagBits;
     PPVkShaderModuleCreateFlags=^PVkShaderModuleCreateFlags;
     PVkShaderModuleCreateFlags=^TVkShaderModuleCreateFlags;

     TVkCommandPoolCreateFlags=TVkCommandPoolCreateFlagBits;
     PPVkCommandPoolCreateFlags=^PVkCommandPoolCreateFlags;
     PVkCommandPoolCreateFlags=^TVkCommandPoolCreateFlags;

     TVkCommandPoolResetFlags=TVkCommandPoolResetFlagBits;
     PPVkCommandPoolResetFlags=^PVkCommandPoolResetFlags;
     PVkCommandPoolResetFlags=^TVkCommandPoolResetFlags;

     TVkCommandBufferResetFlags=TVkCommandBufferResetFlagBits;
     PPVkCommandBufferResetFlags=^PVkCommandBufferResetFlags;
     PVkCommandBufferResetFlags=^TVkCommandBufferResetFlags;

     TVkCommandBufferUsageFlags=TVkCommandBufferUsageFlagBits;
     PPVkCommandBufferUsageFlags=^PVkCommandBufferUsageFlags;
     PVkCommandBufferUsageFlags=^TVkCommandBufferUsageFlags;

     TVkQueryPipelineStatisticFlags=TVkQueryPipelineStatisticFlagBits;
     PPVkQueryPipelineStatisticFlags=^PVkQueryPipelineStatisticFlags;
     PVkQueryPipelineStatisticFlags=^TVkQueryPipelineStatisticFlags;

     TVkImageAspectFlags=TVkImageAspectFlagBits;
     PPVkImageAspectFlags=^PVkImageAspectFlags;
     PVkImageAspectFlags=^TVkImageAspectFlags;

     TVkSparseMemoryBindFlags=TVkSparseMemoryBindFlagBits;
     PPVkSparseMemoryBindFlags=^PVkSparseMemoryBindFlags;
     PVkSparseMemoryBindFlags=^TVkSparseMemoryBindFlags;

     TVkSparseImageFormatFlags=TVkSparseImageFormatFlagBits;
     PPVkSparseImageFormatFlags=^PVkSparseImageFormatFlags;
     PVkSparseImageFormatFlags=^TVkSparseImageFormatFlags;

     TVkSubpassDescriptionFlags=TVkSubpassDescriptionFlagBits;
     PPVkSubpassDescriptionFlags=^PVkSubpassDescriptionFlags;
     PVkSubpassDescriptionFlags=^TVkSubpassDescriptionFlags;

     TVkPipelineStageFlags=TVkPipelineStageFlagBits;
     PPVkPipelineStageFlags=^PVkPipelineStageFlags;
     PVkPipelineStageFlags=^TVkPipelineStageFlags;

     TVkSampleCountFlags=TVkSampleCountFlagBits;
     PPVkSampleCountFlags=^PVkSampleCountFlags;
     PVkSampleCountFlags=^TVkSampleCountFlags;

     TVkAttachmentDescriptionFlags=TVkAttachmentDescriptionFlagBits;
     PPVkAttachmentDescriptionFlags=^PVkAttachmentDescriptionFlags;
     PVkAttachmentDescriptionFlags=^TVkAttachmentDescriptionFlags;

     TVkStencilFaceFlags=TVkStencilFaceFlagBits;
     PPVkStencilFaceFlags=^PVkStencilFaceFlags;
     PVkStencilFaceFlags=^TVkStencilFaceFlags;

     TVkCullModeFlags=TVkCullModeFlagBits;
     PPVkCullModeFlags=^PVkCullModeFlags;
     PVkCullModeFlags=^TVkCullModeFlags;

     TVkDescriptorPoolCreateFlags=TVkDescriptorPoolCreateFlagBits;
     PPVkDescriptorPoolCreateFlags=^PVkDescriptorPoolCreateFlags;
     PVkDescriptorPoolCreateFlags=^TVkDescriptorPoolCreateFlags;

     TVkDependencyFlags=TVkDependencyFlagBits;
     PPVkDependencyFlags=^PVkDependencyFlags;
     PVkDependencyFlags=^TVkDependencyFlags;

     TVkSubgroupFeatureFlags=TVkSubgroupFeatureFlagBits;
     PPVkSubgroupFeatureFlags=^PVkSubgroupFeatureFlags;
     PVkSubgroupFeatureFlags=^TVkSubgroupFeatureFlags;

     TVkIndirectCommandsLayoutUsageFlagsNV=TVkIndirectCommandsLayoutUsageFlagBitsNV;
     PPVkIndirectCommandsLayoutUsageFlagsNV=^PVkIndirectCommandsLayoutUsageFlagsNV;
     PVkIndirectCommandsLayoutUsageFlagsNV=^TVkIndirectCommandsLayoutUsageFlagsNV;

     TVkIndirectStateFlagsNV=TVkIndirectStateFlagBitsNV;
     PPVkIndirectStateFlagsNV=^PVkIndirectStateFlagsNV;
     PVkIndirectStateFlagsNV=^TVkIndirectStateFlagsNV;

     TVkGeometryFlagsKHR=TVkGeometryFlagBitsKHR;
     PPVkGeometryFlagsKHR=^PVkGeometryFlagsKHR;
     PVkGeometryFlagsKHR=^TVkGeometryFlagsKHR;

     PPVkGeometryFlagsNV=PPVkGeometryFlagsKHR;
     PVkGeometryFlagsNV=PVkGeometryFlagsKHR;
     TVkGeometryFlagsNV=TVkGeometryFlagsKHR;

     TVkGeometryInstanceFlagsKHR=TVkGeometryInstanceFlagBitsKHR;
     PPVkGeometryInstanceFlagsKHR=^PVkGeometryInstanceFlagsKHR;
     PVkGeometryInstanceFlagsKHR=^TVkGeometryInstanceFlagsKHR;

     PPVkGeometryInstanceFlagsNV=PPVkGeometryInstanceFlagsKHR;
     PVkGeometryInstanceFlagsNV=PVkGeometryInstanceFlagsKHR;
     TVkGeometryInstanceFlagsNV=TVkGeometryInstanceFlagsKHR;

     TVkBuildAccelerationStructureFlagsKHR=TVkBuildAccelerationStructureFlagBitsKHR;
     PPVkBuildAccelerationStructureFlagsKHR=^PVkBuildAccelerationStructureFlagsKHR;
     PVkBuildAccelerationStructureFlagsKHR=^TVkBuildAccelerationStructureFlagsKHR;

     PPVkBuildAccelerationStructureFlagsNV=PPVkBuildAccelerationStructureFlagsKHR;
     PVkBuildAccelerationStructureFlagsNV=PVkBuildAccelerationStructureFlagsKHR;
     TVkBuildAccelerationStructureFlagsNV=TVkBuildAccelerationStructureFlagsKHR;

     TVkPrivateDataSlotCreateFlagsEXT=TVkPrivateDataSlotCreateFlagBitsEXT;
     PPVkPrivateDataSlotCreateFlagsEXT=^PVkPrivateDataSlotCreateFlagsEXT;
     PVkPrivateDataSlotCreateFlagsEXT=^TVkPrivateDataSlotCreateFlagsEXT;

     PPVkDescriptorUpdateTemplateCreateFlagsKHR=PPVkDescriptorUpdateTemplateCreateFlags;
     PVkDescriptorUpdateTemplateCreateFlagsKHR=PVkDescriptorUpdateTemplateCreateFlags;
     TVkDescriptorUpdateTemplateCreateFlagsKHR=TVkDescriptorUpdateTemplateCreateFlags;

     TVkPipelineCreationFeedbackFlagsEXT=TVkPipelineCreationFeedbackFlagBitsEXT;
     PPVkPipelineCreationFeedbackFlagsEXT=^PVkPipelineCreationFeedbackFlagsEXT;
     PVkPipelineCreationFeedbackFlagsEXT=^TVkPipelineCreationFeedbackFlagsEXT;

     TVkPerformanceCounterDescriptionFlagsKHR=TVkPerformanceCounterDescriptionFlagBitsKHR;
     PPVkPerformanceCounterDescriptionFlagsKHR=^PVkPerformanceCounterDescriptionFlagsKHR;
     PVkPerformanceCounterDescriptionFlagsKHR=^TVkPerformanceCounterDescriptionFlagsKHR;

     TVkAcquireProfilingLockFlagsKHR=TVkAcquireProfilingLockFlagBitsKHR;
     PPVkAcquireProfilingLockFlagsKHR=^PVkAcquireProfilingLockFlagsKHR;
     PVkAcquireProfilingLockFlagsKHR=^TVkAcquireProfilingLockFlagsKHR;

     TVkSemaphoreWaitFlags=TVkSemaphoreWaitFlagBits;
     PPVkSemaphoreWaitFlags=^PVkSemaphoreWaitFlags;
     PVkSemaphoreWaitFlags=^TVkSemaphoreWaitFlags;

     PPVkSemaphoreWaitFlagsKHR=PPVkSemaphoreWaitFlags;
     PVkSemaphoreWaitFlagsKHR=PVkSemaphoreWaitFlags;
     TVkSemaphoreWaitFlagsKHR=TVkSemaphoreWaitFlags;

     TVkPipelineCompilerControlFlagsAMD=TVkPipelineCompilerControlFlagBitsAMD;
     PPVkPipelineCompilerControlFlagsAMD=^PVkPipelineCompilerControlFlagsAMD;
     PVkPipelineCompilerControlFlagsAMD=^TVkPipelineCompilerControlFlagsAMD;

     TVkShaderCorePropertiesFlagsAMD=TVkShaderCorePropertiesFlagBitsAMD;
     PPVkShaderCorePropertiesFlagsAMD=^PVkShaderCorePropertiesFlagsAMD;
     PVkShaderCorePropertiesFlagsAMD=^TVkShaderCorePropertiesFlagsAMD;

     TVkDeviceDiagnosticsConfigFlagsNV=TVkDeviceDiagnosticsConfigFlagBitsNV;
     PPVkDeviceDiagnosticsConfigFlagsNV=^PVkDeviceDiagnosticsConfigFlagsNV;
     PVkDeviceDiagnosticsConfigFlagsNV=^TVkDeviceDiagnosticsConfigFlagsNV;

     TVkCompositeAlphaFlagsKHR=TVkCompositeAlphaFlagBitsKHR;
     PPVkCompositeAlphaFlagsKHR=^PVkCompositeAlphaFlagsKHR;
     PVkCompositeAlphaFlagsKHR=^TVkCompositeAlphaFlagsKHR;

     TVkDisplayPlaneAlphaFlagsKHR=TVkDisplayPlaneAlphaFlagBitsKHR;
     PPVkDisplayPlaneAlphaFlagsKHR=^PVkDisplayPlaneAlphaFlagsKHR;
     PVkDisplayPlaneAlphaFlagsKHR=^TVkDisplayPlaneAlphaFlagsKHR;

     TVkSurfaceTransformFlagsKHR=TVkSurfaceTransformFlagBitsKHR;
     PPVkSurfaceTransformFlagsKHR=^PVkSurfaceTransformFlagsKHR;
     PVkSurfaceTransformFlagsKHR=^TVkSurfaceTransformFlagsKHR;

     TVkSwapchainCreateFlagsKHR=TVkSwapchainCreateFlagBitsKHR;
     PPVkSwapchainCreateFlagsKHR=^PVkSwapchainCreateFlagsKHR;
     PVkSwapchainCreateFlagsKHR=^TVkSwapchainCreateFlagsKHR;

     TVkPeerMemoryFeatureFlags=TVkPeerMemoryFeatureFlagBits;
     PPVkPeerMemoryFeatureFlags=^PVkPeerMemoryFeatureFlags;
     PVkPeerMemoryFeatureFlags=^TVkPeerMemoryFeatureFlags;

     PPVkPeerMemoryFeatureFlagsKHR=PPVkPeerMemoryFeatureFlags;
     PVkPeerMemoryFeatureFlagsKHR=PVkPeerMemoryFeatureFlags;
     TVkPeerMemoryFeatureFlagsKHR=TVkPeerMemoryFeatureFlags;

     TVkMemoryAllocateFlags=TVkMemoryAllocateFlagBits;
     PPVkMemoryAllocateFlags=^PVkMemoryAllocateFlags;
     PVkMemoryAllocateFlags=^TVkMemoryAllocateFlags;

     PPVkMemoryAllocateFlagsKHR=PPVkMemoryAllocateFlags;
     PVkMemoryAllocateFlagsKHR=PVkMemoryAllocateFlags;
     TVkMemoryAllocateFlagsKHR=TVkMemoryAllocateFlags;

     TVkDeviceGroupPresentModeFlagsKHR=TVkDeviceGroupPresentModeFlagBitsKHR;
     PPVkDeviceGroupPresentModeFlagsKHR=^PVkDeviceGroupPresentModeFlagsKHR;
     PVkDeviceGroupPresentModeFlagsKHR=^TVkDeviceGroupPresentModeFlagsKHR;

     TVkDebugReportFlagsEXT=TVkDebugReportFlagBitsEXT;
     PPVkDebugReportFlagsEXT=^PVkDebugReportFlagsEXT;
     PVkDebugReportFlagsEXT=^TVkDebugReportFlagsEXT;

     PPVkCommandPoolTrimFlagsKHR=PPVkCommandPoolTrimFlags;
     PVkCommandPoolTrimFlagsKHR=PVkCommandPoolTrimFlags;
     TVkCommandPoolTrimFlagsKHR=TVkCommandPoolTrimFlags;

     TVkExternalMemoryHandleTypeFlagsNV=TVkExternalMemoryHandleTypeFlagBitsNV;
     PPVkExternalMemoryHandleTypeFlagsNV=^PVkExternalMemoryHandleTypeFlagsNV;
     PVkExternalMemoryHandleTypeFlagsNV=^TVkExternalMemoryHandleTypeFlagsNV;

     TVkExternalMemoryFeatureFlagsNV=TVkExternalMemoryFeatureFlagBitsNV;
     PPVkExternalMemoryFeatureFlagsNV=^PVkExternalMemoryFeatureFlagsNV;
     PVkExternalMemoryFeatureFlagsNV=^TVkExternalMemoryFeatureFlagsNV;

     TVkExternalMemoryHandleTypeFlags=TVkExternalMemoryHandleTypeFlagBits;
     PPVkExternalMemoryHandleTypeFlags=^PVkExternalMemoryHandleTypeFlags;
     PVkExternalMemoryHandleTypeFlags=^TVkExternalMemoryHandleTypeFlags;

     PPVkExternalMemoryHandleTypeFlagsKHR=PPVkExternalMemoryHandleTypeFlags;
     PVkExternalMemoryHandleTypeFlagsKHR=PVkExternalMemoryHandleTypeFlags;
     TVkExternalMemoryHandleTypeFlagsKHR=TVkExternalMemoryHandleTypeFlags;

     TVkExternalMemoryFeatureFlags=TVkExternalMemoryFeatureFlagBits;
     PPVkExternalMemoryFeatureFlags=^PVkExternalMemoryFeatureFlags;
     PVkExternalMemoryFeatureFlags=^TVkExternalMemoryFeatureFlags;

     PPVkExternalMemoryFeatureFlagsKHR=PPVkExternalMemoryFeatureFlags;
     PVkExternalMemoryFeatureFlagsKHR=PVkExternalMemoryFeatureFlags;
     TVkExternalMemoryFeatureFlagsKHR=TVkExternalMemoryFeatureFlags;

     TVkExternalSemaphoreHandleTypeFlags=TVkExternalSemaphoreHandleTypeFlagBits;
     PPVkExternalSemaphoreHandleTypeFlags=^PVkExternalSemaphoreHandleTypeFlags;
     PVkExternalSemaphoreHandleTypeFlags=^TVkExternalSemaphoreHandleTypeFlags;

     PPVkExternalSemaphoreHandleTypeFlagsKHR=PPVkExternalSemaphoreHandleTypeFlags;
     PVkExternalSemaphoreHandleTypeFlagsKHR=PVkExternalSemaphoreHandleTypeFlags;
     TVkExternalSemaphoreHandleTypeFlagsKHR=TVkExternalSemaphoreHandleTypeFlags;

     TVkExternalSemaphoreFeatureFlags=TVkExternalSemaphoreFeatureFlagBits;
     PPVkExternalSemaphoreFeatureFlags=^PVkExternalSemaphoreFeatureFlags;
     PVkExternalSemaphoreFeatureFlags=^TVkExternalSemaphoreFeatureFlags;

     PPVkExternalSemaphoreFeatureFlagsKHR=PPVkExternalSemaphoreFeatureFlags;
     PVkExternalSemaphoreFeatureFlagsKHR=PVkExternalSemaphoreFeatureFlags;
     TVkExternalSemaphoreFeatureFlagsKHR=TVkExternalSemaphoreFeatureFlags;

     TVkSemaphoreImportFlags=TVkSemaphoreImportFlagBits;
     PPVkSemaphoreImportFlags=^PVkSemaphoreImportFlags;
     PVkSemaphoreImportFlags=^TVkSemaphoreImportFlags;

     PPVkSemaphoreImportFlagsKHR=PPVkSemaphoreImportFlags;
     PVkSemaphoreImportFlagsKHR=PVkSemaphoreImportFlags;
     TVkSemaphoreImportFlagsKHR=TVkSemaphoreImportFlags;

     TVkExternalFenceHandleTypeFlags=TVkExternalFenceHandleTypeFlagBits;
     PPVkExternalFenceHandleTypeFlags=^PVkExternalFenceHandleTypeFlags;
     PVkExternalFenceHandleTypeFlags=^TVkExternalFenceHandleTypeFlags;

     PPVkExternalFenceHandleTypeFlagsKHR=PPVkExternalFenceHandleTypeFlags;
     PVkExternalFenceHandleTypeFlagsKHR=PVkExternalFenceHandleTypeFlags;
     TVkExternalFenceHandleTypeFlagsKHR=TVkExternalFenceHandleTypeFlags;

     TVkExternalFenceFeatureFlags=TVkExternalFenceFeatureFlagBits;
     PPVkExternalFenceFeatureFlags=^PVkExternalFenceFeatureFlags;
     PVkExternalFenceFeatureFlags=^TVkExternalFenceFeatureFlags;

     PPVkExternalFenceFeatureFlagsKHR=PPVkExternalFenceFeatureFlags;
     PVkExternalFenceFeatureFlagsKHR=PVkExternalFenceFeatureFlags;
     TVkExternalFenceFeatureFlagsKHR=TVkExternalFenceFeatureFlags;

     TVkFenceImportFlags=TVkFenceImportFlagBits;
     PPVkFenceImportFlags=^PVkFenceImportFlags;
     PVkFenceImportFlags=^TVkFenceImportFlags;

     PPVkFenceImportFlagsKHR=PPVkFenceImportFlags;
     PVkFenceImportFlagsKHR=PVkFenceImportFlags;
     TVkFenceImportFlagsKHR=TVkFenceImportFlags;

     TVkSurfaceCounterFlagsEXT=TVkSurfaceCounterFlagBitsEXT;
     PPVkSurfaceCounterFlagsEXT=^PVkSurfaceCounterFlagsEXT;
     PVkSurfaceCounterFlagsEXT=^TVkSurfaceCounterFlagsEXT;

     TVkDebugUtilsMessageSeverityFlagsEXT=TVkDebugUtilsMessageSeverityFlagBitsEXT;
     PPVkDebugUtilsMessageSeverityFlagsEXT=^PVkDebugUtilsMessageSeverityFlagsEXT;
     PVkDebugUtilsMessageSeverityFlagsEXT=^TVkDebugUtilsMessageSeverityFlagsEXT;

     TVkDebugUtilsMessageTypeFlagsEXT=TVkDebugUtilsMessageTypeFlagBitsEXT;
     PPVkDebugUtilsMessageTypeFlagsEXT=^PVkDebugUtilsMessageTypeFlagsEXT;
     PVkDebugUtilsMessageTypeFlagsEXT=^TVkDebugUtilsMessageTypeFlagsEXT;

     TVkDescriptorBindingFlags=TVkDescriptorBindingFlagBits;
     PPVkDescriptorBindingFlags=^PVkDescriptorBindingFlags;
     PVkDescriptorBindingFlags=^TVkDescriptorBindingFlags;

     PPVkDescriptorBindingFlagsEXT=PPVkDescriptorBindingFlags;
     PVkDescriptorBindingFlagsEXT=PVkDescriptorBindingFlags;
     TVkDescriptorBindingFlagsEXT=TVkDescriptorBindingFlags;

     TVkConditionalRenderingFlagsEXT=TVkConditionalRenderingFlagBitsEXT;
     PPVkConditionalRenderingFlagsEXT=^PVkConditionalRenderingFlagsEXT;
     PVkConditionalRenderingFlagsEXT=^TVkConditionalRenderingFlagsEXT;

     TVkResolveModeFlags=TVkResolveModeFlagBits;
     PPVkResolveModeFlags=^PVkResolveModeFlags;
     PVkResolveModeFlags=^TVkResolveModeFlags;

     PPVkResolveModeFlagsKHR=PPVkResolveModeFlags;
     PVkResolveModeFlagsKHR=PVkResolveModeFlags;
     TVkResolveModeFlagsKHR=TVkResolveModeFlags;

     TVkSwapchainImageUsageFlagsANDROID=TVkSwapchainImageUsageFlagBitsANDROID;
     PPVkSwapchainImageUsageFlagsANDROID=^PVkSwapchainImageUsageFlagsANDROID;
     PVkSwapchainImageUsageFlagsANDROID=^TVkSwapchainImageUsageFlagsANDROID;

     TVkToolPurposeFlagsEXT=TVkToolPurposeFlagBitsEXT;
     PPVkToolPurposeFlagsEXT=^PVkToolPurposeFlagsEXT;
     PVkToolPurposeFlagsEXT=^TVkToolPurposeFlagsEXT;

     PPPFN_vkInternalAllocationNotification=^PPFN_vkInternalAllocationNotification;
     PPFN_vkInternalAllocationNotification=^TPFN_vkInternalAllocationNotification;
     TPFN_vkInternalAllocationNotification=procedure(pUserData:PVkVoid;size:TVkSize;allocationType:TVkInternalAllocationType;allocationScope:TVkSystemAllocationScope); vkExtdecl;

     PPPFN_vkInternalFreeNotification=^PPFN_vkInternalFreeNotification;
     PPFN_vkInternalFreeNotification=^TPFN_vkInternalFreeNotification;
     TPFN_vkInternalFreeNotification=procedure(pUserData:PVkVoid;size:TVkSize;allocationType:TVkInternalAllocationType;allocationScope:TVkSystemAllocationScope); vkExtdecl;

     PPPFN_vkReallocationFunction=^PPFN_vkReallocationFunction;
     PPFN_vkReallocationFunction=^TPFN_vkReallocationFunction;
     TPFN_vkReallocationFunction=function(pUserData:PVkVoid;pOriginal:PVkVoid;size:TVkSize;alignment:TVkSize;allocationScope:TVkSystemAllocationScope):PVkVoid; vkExtdecl;

     PPPFN_vkAllocationFunction=^PPFN_vkAllocationFunction;
     PPFN_vkAllocationFunction=^TPFN_vkAllocationFunction;
     TPFN_vkAllocationFunction=function(pUserData:PVkVoid;size:TVkSize;alignment:TVkSize;allocationScope:TVkSystemAllocationScope):PVkVoid; vkExtdecl;

     PPPFN_vkFreeFunction=^PPFN_vkFreeFunction;
     PPFN_vkFreeFunction=^TPFN_vkFreeFunction;
     TPFN_vkFreeFunction=procedure(pUserData:PVkVoid;pMemory:PVkVoid); vkExtdecl;

     PPPFN_vkVoidFunction=^PPFN_vkVoidFunction;
     PPFN_vkVoidFunction=^TPFN_vkVoidFunction;
     TPFN_vkVoidFunction=procedure(); vkExtdecl;

     PPPFN_vkDebugReportCallbackEXT=^PPFN_vkDebugReportCallbackEXT;
     PPFN_vkDebugReportCallbackEXT=^TPFN_vkDebugReportCallbackEXT;
     TPFN_vkDebugReportCallbackEXT=function(flags:TVkDebugReportFlagsEXT;objectType:TVkDebugReportObjectTypeEXT;object_:TVkUInt64;location:TVkSize;messageCode:TVkInt32;const pLayerPrefix:PVkChar;const pMessage:PVkChar;pUserData:PVkVoid):TVkBool32; vkExtdecl;

     PPVkDebugUtilsObjectNameInfoEXT=^PVkDebugUtilsObjectNameInfoEXT;
     PVkDebugUtilsObjectNameInfoEXT=^TVkDebugUtilsObjectNameInfoEXT;
     TVkDebugUtilsObjectNameInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT
       pNext:PVkVoid;
       objectType:TVkObjectType;
       objectHandle:TVkUInt64;
       pObjectName:PVkChar;
     end;

     PPVkBaseOutStructure=^PVkBaseOutStructure;
     PVkBaseOutStructure=^TVkBaseOutStructure;
     TVkBaseOutStructure=record
       sType:TVkStructureType;
       pNext:PVkBaseOutStructure;
     end;

     PPVkBaseInStructure=^PVkBaseInStructure;
     PVkBaseInStructure=^TVkBaseInStructure;
     TVkBaseInStructure=record
       sType:TVkStructureType;
       pNext:PVkBaseInStructure;
     end;

     PPVkOffset2D=^PVkOffset2D;
     PVkOffset2D=^TVkOffset2D;
     TVkOffset2D=record
       x:TVkInt32;
       y:TVkInt32;
     end;

     PPVkOffset3D=^PVkOffset3D;
     PVkOffset3D=^TVkOffset3D;
     TVkOffset3D=record
       x:TVkInt32;
       y:TVkInt32;
       z:TVkInt32;
     end;

     PPVkExtent2D=^PVkExtent2D;
     PVkExtent2D=^TVkExtent2D;
     TVkExtent2D=record
       width:TVkUInt32;
       height:TVkUInt32;
     end;

     PPVkExtent3D=^PVkExtent3D;
     PVkExtent3D=^TVkExtent3D;
     TVkExtent3D=record
       width:TVkUInt32;
       height:TVkUInt32;
       depth:TVkUInt32;
     end;

     PPVkViewport=^PVkViewport;
     PVkViewport=^TVkViewport;
     TVkViewport=record
       x:TVkFloat;
       y:TVkFloat;
       width:TVkFloat;
       height:TVkFloat;
       minDepth:TVkFloat;
       maxDepth:TVkFloat;
     end;

     PPVkRect2D=^PVkRect2D;
     PVkRect2D=^TVkRect2D;
     TVkRect2D=record
       offset:TVkOffset2D;
       extent:TVkExtent2D;
     end;

     PPVkClearRect=^PVkClearRect;
     PVkClearRect=^TVkClearRect;
     TVkClearRect=record
       rect:TVkRect2D;
       baseArrayLayer:TVkUInt32;
       layerCount:TVkUInt32;
     end;

     PPVkComponentMapping=^PVkComponentMapping;
     PVkComponentMapping=^TVkComponentMapping;
     TVkComponentMapping=record
       r:TVkComponentSwizzle;
       g:TVkComponentSwizzle;
       b:TVkComponentSwizzle;
       a:TVkComponentSwizzle;
     end;

     PPVkPhysicalDeviceSparseProperties=^PVkPhysicalDeviceSparseProperties;
     PVkPhysicalDeviceSparseProperties=^TVkPhysicalDeviceSparseProperties;
     TVkPhysicalDeviceSparseProperties=record
       residencyStandard2DBlockShape:TVkBool32;
       residencyStandard2DMultisampleBlockShape:TVkBool32;
       residencyStandard3DBlockShape:TVkBool32;
       residencyAlignedMipSize:TVkBool32;
       residencyNonResidentStrict:TVkBool32;
     end;

     PPVkExtensionProperties=^PVkExtensionProperties;
     PVkExtensionProperties=^TVkExtensionProperties;
     TVkExtensionProperties=record
       extensionName:array[0..VK_MAX_EXTENSION_NAME_SIZE-1] of TVkChar;
       specVersion:TVkUInt32;
     end;

     PPVkLayerProperties=^PVkLayerProperties;
     PVkLayerProperties=^TVkLayerProperties;
     TVkLayerProperties=record
       layerName:array[0..VK_MAX_EXTENSION_NAME_SIZE-1] of TVkChar;
       specVersion:TVkUInt32;
       implementationVersion:TVkUInt32;
       description:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
     end;

     PPVkApplicationInfo=^PVkApplicationInfo;
     PVkApplicationInfo=^TVkApplicationInfo;
     TVkApplicationInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_APPLICATION_INFO
       pNext:PVkVoid;
       pApplicationName:PVkChar;
       applicationVersion:TVkUInt32;
       pEngineName:PVkChar;
       engineVersion:TVkUInt32;
       apiVersion:TVkUInt32;
     end;

     PPVkAllocationCallbacks=^PVkAllocationCallbacks;
     PVkAllocationCallbacks=^TVkAllocationCallbacks;
     TVkAllocationCallbacks=record
       pUserData:PVkVoid;
       pfnAllocation:TPFN_vkAllocationFunction;
       pfnReallocation:TPFN_vkReallocationFunction;
       pfnFree:TPFN_vkFreeFunction;
       pfnInternalAllocation:TPFN_vkInternalAllocationNotification;
       pfnInternalFree:TPFN_vkInternalFreeNotification;
     end;

     PPVkDeviceQueueCreateInfo=^PVkDeviceQueueCreateInfo;
     PVkDeviceQueueCreateInfo=^TVkDeviceQueueCreateInfo;
     TVkDeviceQueueCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkDeviceQueueCreateFlags;
       queueFamilyIndex:TVkUInt32;
       queueCount:TVkUInt32;
       pQueuePriorities:PVkFloat;
     end;

     PPVkPhysicalDeviceFeatures=^PVkPhysicalDeviceFeatures;
     PVkPhysicalDeviceFeatures=^TVkPhysicalDeviceFeatures;
     TVkPhysicalDeviceFeatures=record
       robustBufferAccess:TVkBool32;
       fullDrawIndexUint32:TVkBool32;
       imageCubeArray:TVkBool32;
       independentBlend:TVkBool32;
       geometryShader:TVkBool32;
       tessellationShader:TVkBool32;
       sampleRateShading:TVkBool32;
       dualSrcBlend:TVkBool32;
       logicOp:TVkBool32;
       multiDrawIndirect:TVkBool32;
       drawIndirectFirstInstance:TVkBool32;
       depthClamp:TVkBool32;
       depthBiasClamp:TVkBool32;
       fillModeNonSolid:TVkBool32;
       depthBounds:TVkBool32;
       wideLines:TVkBool32;
       largePoints:TVkBool32;
       alphaToOne:TVkBool32;
       multiViewport:TVkBool32;
       samplerAnisotropy:TVkBool32;
       textureCompressionETC2:TVkBool32;
       textureCompressionASTC_LDR:TVkBool32;
       textureCompressionBC:TVkBool32;
       occlusionQueryPrecise:TVkBool32;
       pipelineStatisticsQuery:TVkBool32;
       vertexPipelineStoresAndAtomics:TVkBool32;
       fragmentStoresAndAtomics:TVkBool32;
       shaderTessellationAndGeometryPointSize:TVkBool32;
       shaderImageGatherExtended:TVkBool32;
       shaderStorageImageExtendedFormats:TVkBool32;
       shaderStorageImageMultisample:TVkBool32;
       shaderStorageImageReadWithoutFormat:TVkBool32;
       shaderStorageImageWriteWithoutFormat:TVkBool32;
       shaderUniformBufferArrayDynamicIndexing:TVkBool32;
       shaderSampledImageArrayDynamicIndexing:TVkBool32;
       shaderStorageBufferArrayDynamicIndexing:TVkBool32;
       shaderStorageImageArrayDynamicIndexing:TVkBool32;
       shaderClipDistance:TVkBool32;
       shaderCullDistance:TVkBool32;
       shaderFloat64:TVkBool32;
       shaderInt64:TVkBool32;
       shaderInt16:TVkBool32;
       shaderResourceResidency:TVkBool32;
       shaderResourceMinLod:TVkBool32;
       sparseBinding:TVkBool32;
       sparseResidencyBuffer:TVkBool32;
       sparseResidencyImage2D:TVkBool32;
       sparseResidencyImage3D:TVkBool32;
       sparseResidency2Samples:TVkBool32;
       sparseResidency4Samples:TVkBool32;
       sparseResidency8Samples:TVkBool32;
       sparseResidency16Samples:TVkBool32;
       sparseResidencyAliased:TVkBool32;
       variableMultisampleRate:TVkBool32;
       inheritedQueries:TVkBool32;
     end;

     PPVkInstanceCreateInfo=^PVkInstanceCreateInfo;
     PVkInstanceCreateInfo=^TVkInstanceCreateInfo;
     TVkInstanceCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkInstanceCreateFlags;
       pApplicationInfo:PVkApplicationInfo;
       enabledLayerCount:TVkUInt32;
       ppEnabledLayerNames:PPVkChar;
       enabledExtensionCount:TVkUInt32;
       ppEnabledExtensionNames:PPVkChar;
     end;

     PPVkQueueFamilyProperties=^PVkQueueFamilyProperties;
     PVkQueueFamilyProperties=^TVkQueueFamilyProperties;
     TVkQueueFamilyProperties=record
       queueFlags:TVkQueueFlags;
       queueCount:TVkUInt32;
       timestampValidBits:TVkUInt32;
       minImageTransferGranularity:TVkExtent3D;
     end;

     PPVkMemoryType=^PVkMemoryType;
     PVkMemoryType=^TVkMemoryType;
     TVkMemoryType=record
       propertyFlags:TVkMemoryPropertyFlags;
       heapIndex:TVkUInt32;
     end;

     PPVkMemoryAllocateInfo=^PVkMemoryAllocateInfo;
     PVkMemoryAllocateInfo=^TVkMemoryAllocateInfo;
     TVkMemoryAllocateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO
       pNext:PVkVoid;
       allocationSize:TVkDeviceSize;
       memoryTypeIndex:TVkUInt32;
     end;

     PPVkMemoryRequirements=^PVkMemoryRequirements;
     PVkMemoryRequirements=^TVkMemoryRequirements;
     TVkMemoryRequirements=record
       size:TVkDeviceSize;
       alignment:TVkDeviceSize;
       memoryTypeBits:TVkUInt32;
     end;

     PPVkSparseImageFormatProperties=^PVkSparseImageFormatProperties;
     PVkSparseImageFormatProperties=^TVkSparseImageFormatProperties;
     TVkSparseImageFormatProperties=record
       aspectMask:TVkImageAspectFlags;
       imageGranularity:TVkExtent3D;
       flags:TVkSparseImageFormatFlags;
     end;

     PPVkSparseImageMemoryRequirements=^PVkSparseImageMemoryRequirements;
     PVkSparseImageMemoryRequirements=^TVkSparseImageMemoryRequirements;
     TVkSparseImageMemoryRequirements=record
       formatProperties:TVkSparseImageFormatProperties;
       imageMipTailFirstLod:TVkUInt32;
       imageMipTailSize:TVkDeviceSize;
       imageMipTailOffset:TVkDeviceSize;
       imageMipTailStride:TVkDeviceSize;
     end;

     PPVkMemoryHeap=^PVkMemoryHeap;
     PVkMemoryHeap=^TVkMemoryHeap;
     TVkMemoryHeap=record
       size:TVkDeviceSize;
       flags:TVkMemoryHeapFlags;
     end;

     PPVkPhysicalDeviceMemoryProperties=^PVkPhysicalDeviceMemoryProperties;
     PVkPhysicalDeviceMemoryProperties=^TVkPhysicalDeviceMemoryProperties;
     TVkPhysicalDeviceMemoryProperties=record
       memoryTypeCount:TVkUInt32;
       memoryTypes:array[0..VK_MAX_MEMORY_TYPES-1] of TVkMemoryType;
       memoryHeapCount:TVkUInt32;
       memoryHeaps:array[0..VK_MAX_MEMORY_HEAPS-1] of TVkMemoryHeap;
     end;

     PPVkMappedMemoryRange=^PVkMappedMemoryRange;
     PVkMappedMemoryRange=^TVkMappedMemoryRange;
     TVkMappedMemoryRange=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE
       pNext:PVkVoid;
       memory:TVkDeviceMemory;
       offset:TVkDeviceSize;
       size:TVkDeviceSize;
     end;

     PPVkFormatProperties=^PVkFormatProperties;
     PVkFormatProperties=^TVkFormatProperties;
     TVkFormatProperties=record
       linearTilingFeatures:TVkFormatFeatureFlags;
       optimalTilingFeatures:TVkFormatFeatureFlags;
       bufferFeatures:TVkFormatFeatureFlags;
     end;

     PPVkImageFormatProperties=^PVkImageFormatProperties;
     PVkImageFormatProperties=^TVkImageFormatProperties;
     TVkImageFormatProperties=record
       maxExtent:TVkExtent3D;
       maxMipLevels:TVkUInt32;
       maxArrayLayers:TVkUInt32;
       sampleCounts:TVkSampleCountFlags;
       maxResourceSize:TVkDeviceSize;
     end;

     PPVkDescriptorBufferInfo=^PVkDescriptorBufferInfo;
     PVkDescriptorBufferInfo=^TVkDescriptorBufferInfo;
     TVkDescriptorBufferInfo=record
       buffer:TVkBuffer;
       offset:TVkDeviceSize;
       range:TVkDeviceSize;
     end;

     PPVkDescriptorImageInfo=^PVkDescriptorImageInfo;
     PVkDescriptorImageInfo=^TVkDescriptorImageInfo;
     TVkDescriptorImageInfo=record
       sampler:TVkSampler;
       imageView:TVkImageView;
       imageLayout:TVkImageLayout;
     end;

     PPVkWriteDescriptorSet=^PVkWriteDescriptorSet;
     PVkWriteDescriptorSet=^TVkWriteDescriptorSet;
     TVkWriteDescriptorSet=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET
       pNext:PVkVoid;
       dstSet:TVkDescriptorSet;
       dstBinding:TVkUInt32;
       dstArrayElement:TVkUInt32;
       descriptorCount:TVkUInt32;
       descriptorType:TVkDescriptorType;
       pImageInfo:PVkDescriptorImageInfo;
       pBufferInfo:PVkDescriptorBufferInfo;
       pTexelBufferView:PVkBufferView;
     end;

     PPVkCopyDescriptorSet=^PVkCopyDescriptorSet;
     PVkCopyDescriptorSet=^TVkCopyDescriptorSet;
     TVkCopyDescriptorSet=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET
       pNext:PVkVoid;
       srcSet:TVkDescriptorSet;
       srcBinding:TVkUInt32;
       srcArrayElement:TVkUInt32;
       dstSet:TVkDescriptorSet;
       dstBinding:TVkUInt32;
       dstArrayElement:TVkUInt32;
       descriptorCount:TVkUInt32;
     end;

     PPVkBufferCreateInfo=^PVkBufferCreateInfo;
     PVkBufferCreateInfo=^TVkBufferCreateInfo;
     TVkBufferCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkBufferCreateFlags;
       size:TVkDeviceSize;
       usage:TVkBufferUsageFlags;
       sharingMode:TVkSharingMode;
       queueFamilyIndexCount:TVkUInt32;
       pQueueFamilyIndices:PVkUInt32;
     end;

     PPVkBufferViewCreateInfo=^PVkBufferViewCreateInfo;
     PVkBufferViewCreateInfo=^TVkBufferViewCreateInfo;
     TVkBufferViewCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkBufferViewCreateFlags;
       buffer:TVkBuffer;
       format:TVkFormat;
       offset:TVkDeviceSize;
       range:TVkDeviceSize;
     end;

     PPVkImageSubresource=^PVkImageSubresource;
     PVkImageSubresource=^TVkImageSubresource;
     TVkImageSubresource=record
       aspectMask:TVkImageAspectFlags;
       mipLevel:TVkUInt32;
       arrayLayer:TVkUInt32;
     end;

     PPVkImageSubresourceLayers=^PVkImageSubresourceLayers;
     PVkImageSubresourceLayers=^TVkImageSubresourceLayers;
     TVkImageSubresourceLayers=record
       aspectMask:TVkImageAspectFlags;
       mipLevel:TVkUInt32;
       baseArrayLayer:TVkUInt32;
       layerCount:TVkUInt32;
     end;

     PPVkImageSubresourceRange=^PVkImageSubresourceRange;
     PVkImageSubresourceRange=^TVkImageSubresourceRange;
     TVkImageSubresourceRange=record
       aspectMask:TVkImageAspectFlags;
       baseMipLevel:TVkUInt32;
       levelCount:TVkUInt32;
       baseArrayLayer:TVkUInt32;
       layerCount:TVkUInt32;
     end;

     PPVkMemoryBarrier=^PVkMemoryBarrier;
     PVkMemoryBarrier=^TVkMemoryBarrier;
     TVkMemoryBarrier=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_BARRIER
       pNext:PVkVoid;
       srcAccessMask:TVkAccessFlags;
       dstAccessMask:TVkAccessFlags;
     end;

     PPVkBufferMemoryBarrier=^PVkBufferMemoryBarrier;
     PVkBufferMemoryBarrier=^TVkBufferMemoryBarrier;
     TVkBufferMemoryBarrier=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER
       pNext:PVkVoid;
       srcAccessMask:TVkAccessFlags;
       dstAccessMask:TVkAccessFlags;
       srcQueueFamilyIndex:TVkUInt32;
       dstQueueFamilyIndex:TVkUInt32;
       buffer:TVkBuffer;
       offset:TVkDeviceSize;
       size:TVkDeviceSize;
     end;

     PPVkImageMemoryBarrier=^PVkImageMemoryBarrier;
     PVkImageMemoryBarrier=^TVkImageMemoryBarrier;
     TVkImageMemoryBarrier=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER
       pNext:PVkVoid;
       srcAccessMask:TVkAccessFlags;
       dstAccessMask:TVkAccessFlags;
       oldLayout:TVkImageLayout;
       newLayout:TVkImageLayout;
       srcQueueFamilyIndex:TVkUInt32;
       dstQueueFamilyIndex:TVkUInt32;
       image:TVkImage;
       subresourceRange:TVkImageSubresourceRange;
     end;

     PPVkImageCreateInfo=^PVkImageCreateInfo;
     PVkImageCreateInfo=^TVkImageCreateInfo;
     TVkImageCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkImageCreateFlags;
       imageType:TVkImageType;
       format:TVkFormat;
       extent:TVkExtent3D;
       mipLevels:TVkUInt32;
       arrayLayers:TVkUInt32;
       samples:TVkSampleCountFlagBits;
       tiling:TVkImageTiling;
       usage:TVkImageUsageFlags;
       sharingMode:TVkSharingMode;
       queueFamilyIndexCount:TVkUInt32;
       pQueueFamilyIndices:PVkUInt32;
       initialLayout:TVkImageLayout;
     end;

     PPVkSubresourceLayout=^PVkSubresourceLayout;
     PVkSubresourceLayout=^TVkSubresourceLayout;
     TVkSubresourceLayout=record
       offset:TVkDeviceSize;
       size:TVkDeviceSize;
       rowPitch:TVkDeviceSize;
       arrayPitch:TVkDeviceSize;
       depthPitch:TVkDeviceSize;
     end;

     PPVkImageViewCreateInfo=^PVkImageViewCreateInfo;
     PVkImageViewCreateInfo=^TVkImageViewCreateInfo;
     TVkImageViewCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkImageViewCreateFlags;
       image:TVkImage;
       viewType:TVkImageViewType;
       format:TVkFormat;
       components:TVkComponentMapping;
       subresourceRange:TVkImageSubresourceRange;
     end;

     PPVkBufferCopy=^PVkBufferCopy;
     PVkBufferCopy=^TVkBufferCopy;
     TVkBufferCopy=record
       srcOffset:TVkDeviceSize;
       dstOffset:TVkDeviceSize;
       size:TVkDeviceSize;
     end;

     PPVkSparseMemoryBind=^PVkSparseMemoryBind;
     PVkSparseMemoryBind=^TVkSparseMemoryBind;
     TVkSparseMemoryBind=record
       resourceOffset:TVkDeviceSize;
       size:TVkDeviceSize;
       memory:TVkDeviceMemory;
       memoryOffset:TVkDeviceSize;
       flags:TVkSparseMemoryBindFlags;
     end;

     PPVkSparseImageMemoryBind=^PVkSparseImageMemoryBind;
     PVkSparseImageMemoryBind=^TVkSparseImageMemoryBind;
     TVkSparseImageMemoryBind=record
       subresource:TVkImageSubresource;
       offset:TVkOffset3D;
       extent:TVkExtent3D;
       memory:TVkDeviceMemory;
       memoryOffset:TVkDeviceSize;
       flags:TVkSparseMemoryBindFlags;
     end;

     PPVkSparseBufferMemoryBindInfo=^PVkSparseBufferMemoryBindInfo;
     PVkSparseBufferMemoryBindInfo=^TVkSparseBufferMemoryBindInfo;
     TVkSparseBufferMemoryBindInfo=record
       buffer:TVkBuffer;
       bindCount:TVkUInt32;
       pBinds:PVkSparseMemoryBind;
     end;

     PPVkSparseImageOpaqueMemoryBindInfo=^PVkSparseImageOpaqueMemoryBindInfo;
     PVkSparseImageOpaqueMemoryBindInfo=^TVkSparseImageOpaqueMemoryBindInfo;
     TVkSparseImageOpaqueMemoryBindInfo=record
       image:TVkImage;
       bindCount:TVkUInt32;
       pBinds:PVkSparseMemoryBind;
     end;

     PPVkSparseImageMemoryBindInfo=^PVkSparseImageMemoryBindInfo;
     PVkSparseImageMemoryBindInfo=^TVkSparseImageMemoryBindInfo;
     TVkSparseImageMemoryBindInfo=record
       image:TVkImage;
       bindCount:TVkUInt32;
       pBinds:PVkSparseImageMemoryBind;
     end;

     PPVkBindSparseInfo=^PVkBindSparseInfo;
     PVkBindSparseInfo=^TVkBindSparseInfo;
     TVkBindSparseInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BIND_SPARSE_INFO
       pNext:PVkVoid;
       waitSemaphoreCount:TVkUInt32;
       pWaitSemaphores:PVkSemaphore;
       bufferBindCount:TVkUInt32;
       pBufferBinds:PVkSparseBufferMemoryBindInfo;
       imageOpaqueBindCount:TVkUInt32;
       pImageOpaqueBinds:PVkSparseImageOpaqueMemoryBindInfo;
       imageBindCount:TVkUInt32;
       pImageBinds:PVkSparseImageMemoryBindInfo;
       signalSemaphoreCount:TVkUInt32;
       pSignalSemaphores:PVkSemaphore;
     end;

     PPVkImageCopy=^PVkImageCopy;
     PVkImageCopy=^TVkImageCopy;
     TVkImageCopy=record
       srcSubresource:TVkImageSubresourceLayers;
       srcOffset:TVkOffset3D;
       dstSubresource:TVkImageSubresourceLayers;
       dstOffset:TVkOffset3D;
       extent:TVkExtent3D;
     end;

     PPVkImageBlit=^PVkImageBlit;
     PVkImageBlit=^TVkImageBlit;
     TVkImageBlit=record
       srcSubresource:TVkImageSubresourceLayers;
       srcOffsets:array[0..1] of TVkOffset3D;
       dstSubresource:TVkImageSubresourceLayers;
       dstOffsets:array[0..1] of TVkOffset3D;
     end;

     PPVkBufferImageCopy=^PVkBufferImageCopy;
     PVkBufferImageCopy=^TVkBufferImageCopy;
     TVkBufferImageCopy=record
       bufferOffset:TVkDeviceSize;
       bufferRowLength:TVkUInt32;
       bufferImageHeight:TVkUInt32;
       imageSubresource:TVkImageSubresourceLayers;
       imageOffset:TVkOffset3D;
       imageExtent:TVkExtent3D;
     end;

     PPVkImageResolve=^PVkImageResolve;
     PVkImageResolve=^TVkImageResolve;
     TVkImageResolve=record
       srcSubresource:TVkImageSubresourceLayers;
       srcOffset:TVkOffset3D;
       dstSubresource:TVkImageSubresourceLayers;
       dstOffset:TVkOffset3D;
       extent:TVkExtent3D;
     end;

     PPVkShaderModuleCreateInfo=^PVkShaderModuleCreateInfo;
     PVkShaderModuleCreateInfo=^TVkShaderModuleCreateInfo;
     TVkShaderModuleCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkShaderModuleCreateFlags;
       codeSize:TVkSize;
       pCode:PVkUInt32;
     end;

     PPVkDescriptorSetLayoutBinding=^PVkDescriptorSetLayoutBinding;
     PVkDescriptorSetLayoutBinding=^TVkDescriptorSetLayoutBinding;
     TVkDescriptorSetLayoutBinding=record
       binding:TVkUInt32;
       descriptorType:TVkDescriptorType;
       descriptorCount:TVkUInt32;
       stageFlags:TVkShaderStageFlags;
       pImmutableSamplers:PVkSampler;
     end;

     PPVkDescriptorSetLayoutCreateInfo=^PVkDescriptorSetLayoutCreateInfo;
     PVkDescriptorSetLayoutCreateInfo=^TVkDescriptorSetLayoutCreateInfo;
     TVkDescriptorSetLayoutCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkDescriptorSetLayoutCreateFlags;
       bindingCount:TVkUInt32;
       pBindings:PVkDescriptorSetLayoutBinding;
     end;

     PPVkDescriptorPoolSize=^PVkDescriptorPoolSize;
     PVkDescriptorPoolSize=^TVkDescriptorPoolSize;
     TVkDescriptorPoolSize=record
       type_:TVkDescriptorType;
       descriptorCount:TVkUInt32;
     end;

     PPVkDescriptorPoolCreateInfo=^PVkDescriptorPoolCreateInfo;
     PVkDescriptorPoolCreateInfo=^TVkDescriptorPoolCreateInfo;
     TVkDescriptorPoolCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkDescriptorPoolCreateFlags;
       maxSets:TVkUInt32;
       poolSizeCount:TVkUInt32;
       pPoolSizes:PVkDescriptorPoolSize;
     end;

     PPVkDescriptorSetAllocateInfo=^PVkDescriptorSetAllocateInfo;
     PVkDescriptorSetAllocateInfo=^TVkDescriptorSetAllocateInfo;
     TVkDescriptorSetAllocateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO
       pNext:PVkVoid;
       descriptorPool:TVkDescriptorPool;
       descriptorSetCount:TVkUInt32;
       pSetLayouts:PVkDescriptorSetLayout;
     end;

     PPVkSpecializationMapEntry=^PVkSpecializationMapEntry;
     PVkSpecializationMapEntry=^TVkSpecializationMapEntry;
     TVkSpecializationMapEntry=record
       constantID:TVkUInt32;
       offset:TVkUInt32;
       size:TVkSize;
     end;

     PPVkSpecializationInfo=^PVkSpecializationInfo;
     PVkSpecializationInfo=^TVkSpecializationInfo;
     TVkSpecializationInfo=record
       mapEntryCount:TVkUInt32;
       pMapEntries:PVkSpecializationMapEntry;
       dataSize:TVkSize;
       pData:PVkVoid;
     end;

     PPVkPipelineShaderStageCreateInfo=^PVkPipelineShaderStageCreateInfo;
     PVkPipelineShaderStageCreateInfo=^TVkPipelineShaderStageCreateInfo;
     TVkPipelineShaderStageCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineShaderStageCreateFlags;
       stage:TVkShaderStageFlagBits;
       module:TVkShaderModule;
       pName:PVkChar;
       pSpecializationInfo:PVkSpecializationInfo;
     end;

     PPVkComputePipelineCreateInfo=^PVkComputePipelineCreateInfo;
     PVkComputePipelineCreateInfo=^TVkComputePipelineCreateInfo;
     TVkComputePipelineCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineCreateFlags;
       stage:TVkPipelineShaderStageCreateInfo;
       layout:TVkPipelineLayout;
       basePipelineHandle:TVkPipeline;
       basePipelineIndex:TVkInt32;
     end;

     PPVkVertexInputBindingDescription=^PVkVertexInputBindingDescription;
     PVkVertexInputBindingDescription=^TVkVertexInputBindingDescription;
     TVkVertexInputBindingDescription=record
       binding:TVkUInt32;
       stride:TVkUInt32;
       inputRate:TVkVertexInputRate;
     end;

     PPVkVertexInputAttributeDescription=^PVkVertexInputAttributeDescription;
     PVkVertexInputAttributeDescription=^TVkVertexInputAttributeDescription;
     TVkVertexInputAttributeDescription=record
       location:TVkUInt32;
       binding:TVkUInt32;
       format:TVkFormat;
       offset:TVkUInt32;
     end;

     PPVkPipelineVertexInputStateCreateInfo=^PVkPipelineVertexInputStateCreateInfo;
     PVkPipelineVertexInputStateCreateInfo=^TVkPipelineVertexInputStateCreateInfo;
     TVkPipelineVertexInputStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineVertexInputStateCreateFlags;
       vertexBindingDescriptionCount:TVkUInt32;
       pVertexBindingDescriptions:PVkVertexInputBindingDescription;
       vertexAttributeDescriptionCount:TVkUInt32;
       pVertexAttributeDescriptions:PVkVertexInputAttributeDescription;
     end;

     PPVkPipelineInputAssemblyStateCreateInfo=^PVkPipelineInputAssemblyStateCreateInfo;
     PVkPipelineInputAssemblyStateCreateInfo=^TVkPipelineInputAssemblyStateCreateInfo;
     TVkPipelineInputAssemblyStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineInputAssemblyStateCreateFlags;
       topology:TVkPrimitiveTopology;
       primitiveRestartEnable:TVkBool32;
     end;

     PPVkPipelineTessellationStateCreateInfo=^PVkPipelineTessellationStateCreateInfo;
     PVkPipelineTessellationStateCreateInfo=^TVkPipelineTessellationStateCreateInfo;
     TVkPipelineTessellationStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineTessellationStateCreateFlags;
       patchControlPoints:TVkUInt32;
     end;

     PPVkPipelineViewportStateCreateInfo=^PVkPipelineViewportStateCreateInfo;
     PVkPipelineViewportStateCreateInfo=^TVkPipelineViewportStateCreateInfo;
     TVkPipelineViewportStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineViewportStateCreateFlags;
       viewportCount:TVkUInt32;
       pViewports:PVkViewport;
       scissorCount:TVkUInt32;
       pScissors:PVkRect2D;
     end;

     PPVkPipelineRasterizationStateCreateInfo=^PVkPipelineRasterizationStateCreateInfo;
     PVkPipelineRasterizationStateCreateInfo=^TVkPipelineRasterizationStateCreateInfo;
     TVkPipelineRasterizationStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineRasterizationStateCreateFlags;
       depthClampEnable:TVkBool32;
       rasterizerDiscardEnable:TVkBool32;
       polygonMode:TVkPolygonMode;
       cullMode:TVkCullModeFlags;
       frontFace:TVkFrontFace;
       depthBiasEnable:TVkBool32;
       depthBiasConstantFactor:TVkFloat;
       depthBiasClamp:TVkFloat;
       depthBiasSlopeFactor:TVkFloat;
       lineWidth:TVkFloat;
     end;

     PPVkPipelineMultisampleStateCreateInfo=^PVkPipelineMultisampleStateCreateInfo;
     PVkPipelineMultisampleStateCreateInfo=^TVkPipelineMultisampleStateCreateInfo;
     TVkPipelineMultisampleStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineMultisampleStateCreateFlags;
       rasterizationSamples:TVkSampleCountFlagBits;
       sampleShadingEnable:TVkBool32;
       minSampleShading:TVkFloat;
       pSampleMask:PVkSampleMask;
       alphaToCoverageEnable:TVkBool32;
       alphaToOneEnable:TVkBool32;
     end;

     PPVkPipelineColorBlendAttachmentState=^PVkPipelineColorBlendAttachmentState;
     PVkPipelineColorBlendAttachmentState=^TVkPipelineColorBlendAttachmentState;
     TVkPipelineColorBlendAttachmentState=record
       blendEnable:TVkBool32;
       srcColorBlendFactor:TVkBlendFactor;
       dstColorBlendFactor:TVkBlendFactor;
       colorBlendOp:TVkBlendOp;
       srcAlphaBlendFactor:TVkBlendFactor;
       dstAlphaBlendFactor:TVkBlendFactor;
       alphaBlendOp:TVkBlendOp;
       colorWriteMask:TVkColorComponentFlags;
     end;

     PPVkPipelineColorBlendStateCreateInfo=^PVkPipelineColorBlendStateCreateInfo;
     PVkPipelineColorBlendStateCreateInfo=^TVkPipelineColorBlendStateCreateInfo;
     TVkPipelineColorBlendStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineColorBlendStateCreateFlags;
       logicOpEnable:TVkBool32;
       logicOp:TVkLogicOp;
       attachmentCount:TVkUInt32;
       pAttachments:PVkPipelineColorBlendAttachmentState;
       blendConstants:array[0..3] of TVkFloat;
     end;

     PPVkPipelineDynamicStateCreateInfo=^PVkPipelineDynamicStateCreateInfo;
     PVkPipelineDynamicStateCreateInfo=^TVkPipelineDynamicStateCreateInfo;
     TVkPipelineDynamicStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineDynamicStateCreateFlags;
       dynamicStateCount:TVkUInt32;
       pDynamicStates:PVkDynamicState;
     end;

     PPVkStencilOpState=^PVkStencilOpState;
     PVkStencilOpState=^TVkStencilOpState;
     TVkStencilOpState=record
       failOp:TVkStencilOp;
       passOp:TVkStencilOp;
       depthFailOp:TVkStencilOp;
       compareOp:TVkCompareOp;
       compareMask:TVkUInt32;
       writeMask:TVkUInt32;
       reference:TVkUInt32;
     end;

     PPVkPipelineDepthStencilStateCreateInfo=^PVkPipelineDepthStencilStateCreateInfo;
     PVkPipelineDepthStencilStateCreateInfo=^TVkPipelineDepthStencilStateCreateInfo;
     TVkPipelineDepthStencilStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineDepthStencilStateCreateFlags;
       depthTestEnable:TVkBool32;
       depthWriteEnable:TVkBool32;
       depthCompareOp:TVkCompareOp;
       depthBoundsTestEnable:TVkBool32;
       stencilTestEnable:TVkBool32;
       front:TVkStencilOpState;
       back:TVkStencilOpState;
       minDepthBounds:TVkFloat;
       maxDepthBounds:TVkFloat;
     end;

     PPVkGraphicsPipelineCreateInfo=^PVkGraphicsPipelineCreateInfo;
     PVkGraphicsPipelineCreateInfo=^TVkGraphicsPipelineCreateInfo;
     TVkGraphicsPipelineCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineCreateFlags;
       stageCount:TVkUInt32;
       pStages:PVkPipelineShaderStageCreateInfo;
       pVertexInputState:PVkPipelineVertexInputStateCreateInfo;
       pInputAssemblyState:PVkPipelineInputAssemblyStateCreateInfo;
       pTessellationState:PVkPipelineTessellationStateCreateInfo;
       pViewportState:PVkPipelineViewportStateCreateInfo;
       pRasterizationState:PVkPipelineRasterizationStateCreateInfo;
       pMultisampleState:PVkPipelineMultisampleStateCreateInfo;
       pDepthStencilState:PVkPipelineDepthStencilStateCreateInfo;
       pColorBlendState:PVkPipelineColorBlendStateCreateInfo;
       pDynamicState:PVkPipelineDynamicStateCreateInfo;
       layout:TVkPipelineLayout;
       renderPass:TVkRenderPass;
       subpass:TVkUInt32;
       basePipelineHandle:TVkPipeline;
       basePipelineIndex:TVkInt32;
     end;

     PPVkPipelineCacheCreateInfo=^PVkPipelineCacheCreateInfo;
     PVkPipelineCacheCreateInfo=^TVkPipelineCacheCreateInfo;
     TVkPipelineCacheCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineCacheCreateFlags;
       initialDataSize:TVkSize;
       pInitialData:PVkVoid;
     end;

     PPVkPushConstantRange=^PVkPushConstantRange;
     PVkPushConstantRange=^TVkPushConstantRange;
     TVkPushConstantRange=record
       stageFlags:TVkShaderStageFlags;
       offset:TVkUInt32;
       size:TVkUInt32;
     end;

     PPVkPipelineLayoutCreateInfo=^PVkPipelineLayoutCreateInfo;
     PVkPipelineLayoutCreateInfo=^TVkPipelineLayoutCreateInfo;
     TVkPipelineLayoutCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkPipelineLayoutCreateFlags;
       setLayoutCount:TVkUInt32;
       pSetLayouts:PVkDescriptorSetLayout;
       pushConstantRangeCount:TVkUInt32;
       pPushConstantRanges:PVkPushConstantRange;
     end;

     PPVkSamplerCreateInfo=^PVkSamplerCreateInfo;
     PVkSamplerCreateInfo=^TVkSamplerCreateInfo;
     TVkSamplerCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkSamplerCreateFlags;
       magFilter:TVkFilter;
       minFilter:TVkFilter;
       mipmapMode:TVkSamplerMipmapMode;
       addressModeU:TVkSamplerAddressMode;
       addressModeV:TVkSamplerAddressMode;
       addressModeW:TVkSamplerAddressMode;
       mipLodBias:TVkFloat;
       anisotropyEnable:TVkBool32;
       maxAnisotropy:TVkFloat;
       compareEnable:TVkBool32;
       compareOp:TVkCompareOp;
       minLod:TVkFloat;
       maxLod:TVkFloat;
       borderColor:TVkBorderColor;
       unnormalizedCoordinates:TVkBool32;
     end;

     PPVkCommandPoolCreateInfo=^PVkCommandPoolCreateInfo;
     PVkCommandPoolCreateInfo=^TVkCommandPoolCreateInfo;
     TVkCommandPoolCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkCommandPoolCreateFlags;
       queueFamilyIndex:TVkUInt32;
     end;

     PPVkCommandBufferAllocateInfo=^PVkCommandBufferAllocateInfo;
     PVkCommandBufferAllocateInfo=^TVkCommandBufferAllocateInfo;
     TVkCommandBufferAllocateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO
       pNext:PVkVoid;
       commandPool:TVkCommandPool;
       level:TVkCommandBufferLevel;
       commandBufferCount:TVkUInt32;
     end;

     PPVkCommandBufferInheritanceInfo=^PVkCommandBufferInheritanceInfo;
     PVkCommandBufferInheritanceInfo=^TVkCommandBufferInheritanceInfo;
     TVkCommandBufferInheritanceInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO
       pNext:PVkVoid;
       renderPass:TVkRenderPass;
       subpass:TVkUInt32;
       framebuffer:TVkFramebuffer;
       occlusionQueryEnable:TVkBool32;
       queryFlags:TVkQueryControlFlags;
       pipelineStatistics:TVkQueryPipelineStatisticFlags;
     end;

     PPVkCommandBufferBeginInfo=^PVkCommandBufferBeginInfo;
     PVkCommandBufferBeginInfo=^TVkCommandBufferBeginInfo;
     TVkCommandBufferBeginInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO
       pNext:PVkVoid;
       flags:TVkCommandBufferUsageFlags;
       pInheritanceInfo:PVkCommandBufferInheritanceInfo;
     end;

     PPVkClearColorValue=^PVkClearColorValue;
     PVkClearColorValue=^TVkClearColorValue;
     TVkClearColorValue=record
      case longint of
       0:(
        float32:array[0..3] of TVkFloat;
       );
       1:(
        int32:array[0..3] of TVkInt32;
       );
       2:(
        uint32:array[0..3] of TVkUInt32;
       );
     end;

     PPVkClearDepthStencilValue=^PVkClearDepthStencilValue;
     PVkClearDepthStencilValue=^TVkClearDepthStencilValue;
     TVkClearDepthStencilValue=record
       depth:TVkFloat;
       stencil:TVkUInt32;
     end;

     PPVkClearValue=^PVkClearValue;
     PVkClearValue=^TVkClearValue;
     TVkClearValue=record
      case longint of
       0:(
        color:TVkClearColorValue;
       );
       1:(
        depthStencil:TVkClearDepthStencilValue;
       );
     end;

     PPVkRenderPassBeginInfo=^PVkRenderPassBeginInfo;
     PVkRenderPassBeginInfo=^TVkRenderPassBeginInfo;
     TVkRenderPassBeginInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO
       pNext:PVkVoid;
       renderPass:TVkRenderPass;
       framebuffer:TVkFramebuffer;
       renderArea:TVkRect2D;
       clearValueCount:TVkUInt32;
       pClearValues:PVkClearValue;
     end;

     PPVkClearAttachment=^PVkClearAttachment;
     PVkClearAttachment=^TVkClearAttachment;
     TVkClearAttachment=record
       aspectMask:TVkImageAspectFlags;
       colorAttachment:TVkUInt32;
       clearValue:TVkClearValue;
     end;

     PPVkAttachmentDescription=^PVkAttachmentDescription;
     PVkAttachmentDescription=^TVkAttachmentDescription;
     TVkAttachmentDescription=record
       flags:TVkAttachmentDescriptionFlags;
       format:TVkFormat;
       samples:TVkSampleCountFlagBits;
       loadOp:TVkAttachmentLoadOp;
       storeOp:TVkAttachmentStoreOp;
       stencilLoadOp:TVkAttachmentLoadOp;
       stencilStoreOp:TVkAttachmentStoreOp;
       initialLayout:TVkImageLayout;
       finalLayout:TVkImageLayout;
     end;

     PPVkAttachmentReference=^PVkAttachmentReference;
     PVkAttachmentReference=^TVkAttachmentReference;
     TVkAttachmentReference=record
       attachment:TVkUInt32;
       layout:TVkImageLayout;
     end;

     PPVkSubpassDescription=^PVkSubpassDescription;
     PVkSubpassDescription=^TVkSubpassDescription;
     TVkSubpassDescription=record
       flags:TVkSubpassDescriptionFlags;
       pipelineBindPoint:TVkPipelineBindPoint;
       inputAttachmentCount:TVkUInt32;
       pInputAttachments:PVkAttachmentReference;
       colorAttachmentCount:TVkUInt32;
       pColorAttachments:PVkAttachmentReference;
       pResolveAttachments:PVkAttachmentReference;
       pDepthStencilAttachment:PVkAttachmentReference;
       preserveAttachmentCount:TVkUInt32;
       pPreserveAttachments:PVkUInt32;
     end;

     PPVkSubpassDependency=^PVkSubpassDependency;
     PVkSubpassDependency=^TVkSubpassDependency;
     TVkSubpassDependency=record
       srcSubpass:TVkUInt32;
       dstSubpass:TVkUInt32;
       srcStageMask:TVkPipelineStageFlags;
       dstStageMask:TVkPipelineStageFlags;
       srcAccessMask:TVkAccessFlags;
       dstAccessMask:TVkAccessFlags;
       dependencyFlags:TVkDependencyFlags;
     end;

     PPVkRenderPassCreateInfo=^PVkRenderPassCreateInfo;
     PVkRenderPassCreateInfo=^TVkRenderPassCreateInfo;
     TVkRenderPassCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkRenderPassCreateFlags;
       attachmentCount:TVkUInt32;
       pAttachments:PVkAttachmentDescription;
       subpassCount:TVkUInt32;
       pSubpasses:PVkSubpassDescription;
       dependencyCount:TVkUInt32;
       pDependencies:PVkSubpassDependency;
     end;

     PPVkEventCreateInfo=^PVkEventCreateInfo;
     PVkEventCreateInfo=^TVkEventCreateInfo;
     TVkEventCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EVENT_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkEventCreateFlags;
     end;

     PPVkFenceCreateInfo=^PVkFenceCreateInfo;
     PVkFenceCreateInfo=^TVkFenceCreateInfo;
     TVkFenceCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FENCE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkFenceCreateFlags;
     end;

     PPVkDeviceCreateInfo=^PVkDeviceCreateInfo;
     PVkDeviceCreateInfo=^TVkDeviceCreateInfo;
     TVkDeviceCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkDeviceCreateFlags;
       queueCreateInfoCount:TVkUInt32;
       pQueueCreateInfos:PVkDeviceQueueCreateInfo;
       enabledLayerCount:TVkUInt32;
       ppEnabledLayerNames:PPVkChar;
       enabledExtensionCount:TVkUInt32;
       ppEnabledExtensionNames:PPVkChar;
       pEnabledFeatures:PVkPhysicalDeviceFeatures;
     end;

     PPVkPhysicalDeviceLimits=^PVkPhysicalDeviceLimits;
     PVkPhysicalDeviceLimits=^TVkPhysicalDeviceLimits;
     TVkPhysicalDeviceLimits=record
       maxImageDimension1D:TVkUInt32;
       maxImageDimension2D:TVkUInt32;
       maxImageDimension3D:TVkUInt32;
       maxImageDimensionCube:TVkUInt32;
       maxImageArrayLayers:TVkUInt32;
       maxTexelBufferElements:TVkUInt32;
       maxUniformBufferRange:TVkUInt32;
       maxStorageBufferRange:TVkUInt32;
       maxPushConstantsSize:TVkUInt32;
       maxMemoryAllocationCount:TVkUInt32;
       maxSamplerAllocationCount:TVkUInt32;
       bufferImageGranularity:TVkDeviceSize;
       sparseAddressSpaceSize:TVkDeviceSize;
       maxBoundDescriptorSets:TVkUInt32;
       maxPerStageDescriptorSamplers:TVkUInt32;
       maxPerStageDescriptorUniformBuffers:TVkUInt32;
       maxPerStageDescriptorStorageBuffers:TVkUInt32;
       maxPerStageDescriptorSampledImages:TVkUInt32;
       maxPerStageDescriptorStorageImages:TVkUInt32;
       maxPerStageDescriptorInputAttachments:TVkUInt32;
       maxPerStageResources:TVkUInt32;
       maxDescriptorSetSamplers:TVkUInt32;
       maxDescriptorSetUniformBuffers:TVkUInt32;
       maxDescriptorSetUniformBuffersDynamic:TVkUInt32;
       maxDescriptorSetStorageBuffers:TVkUInt32;
       maxDescriptorSetStorageBuffersDynamic:TVkUInt32;
       maxDescriptorSetSampledImages:TVkUInt32;
       maxDescriptorSetStorageImages:TVkUInt32;
       maxDescriptorSetInputAttachments:TVkUInt32;
       maxVertexInputAttributes:TVkUInt32;
       maxVertexInputBindings:TVkUInt32;
       maxVertexInputAttributeOffset:TVkUInt32;
       maxVertexInputBindingStride:TVkUInt32;
       maxVertexOutputComponents:TVkUInt32;
       maxTessellationGenerationLevel:TVkUInt32;
       maxTessellationPatchSize:TVkUInt32;
       maxTessellationControlPerVertexInputComponents:TVkUInt32;
       maxTessellationControlPerVertexOutputComponents:TVkUInt32;
       maxTessellationControlPerPatchOutputComponents:TVkUInt32;
       maxTessellationControlTotalOutputComponents:TVkUInt32;
       maxTessellationEvaluationInputComponents:TVkUInt32;
       maxTessellationEvaluationOutputComponents:TVkUInt32;
       maxGeometryShaderInvocations:TVkUInt32;
       maxGeometryInputComponents:TVkUInt32;
       maxGeometryOutputComponents:TVkUInt32;
       maxGeometryOutputVertices:TVkUInt32;
       maxGeometryTotalOutputComponents:TVkUInt32;
       maxFragmentInputComponents:TVkUInt32;
       maxFragmentOutputAttachments:TVkUInt32;
       maxFragmentDualSrcAttachments:TVkUInt32;
       maxFragmentCombinedOutputResources:TVkUInt32;
       maxComputeSharedMemorySize:TVkUInt32;
       maxComputeWorkGroupCount:array[0..2] of TVkUInt32;
       maxComputeWorkGroupInvocations:TVkUInt32;
       maxComputeWorkGroupSize:array[0..2] of TVkUInt32;
       subPixelPrecisionBits:TVkUInt32;
       subTexelPrecisionBits:TVkUInt32;
       mipmapPrecisionBits:TVkUInt32;
       maxDrawIndexedIndexValue:TVkUInt32;
       maxDrawIndirectCount:TVkUInt32;
       maxSamplerLodBias:TVkFloat;
       maxSamplerAnisotropy:TVkFloat;
       maxViewports:TVkUInt32;
       maxViewportDimensions:array[0..1] of TVkUInt32;
       viewportBoundsRange:array[0..1] of TVkFloat;
       viewportSubPixelBits:TVkUInt32;
       minMemoryMapAlignment:TVkSize;
       minTexelBufferOffsetAlignment:TVkDeviceSize;
       minUniformBufferOffsetAlignment:TVkDeviceSize;
       minStorageBufferOffsetAlignment:TVkDeviceSize;
       minTexelOffset:TVkInt32;
       maxTexelOffset:TVkUInt32;
       minTexelGatherOffset:TVkInt32;
       maxTexelGatherOffset:TVkUInt32;
       minInterpolationOffset:TVkFloat;
       maxInterpolationOffset:TVkFloat;
       subPixelInterpolationOffsetBits:TVkUInt32;
       maxFramebufferWidth:TVkUInt32;
       maxFramebufferHeight:TVkUInt32;
       maxFramebufferLayers:TVkUInt32;
       framebufferColorSampleCounts:TVkSampleCountFlags;
       framebufferDepthSampleCounts:TVkSampleCountFlags;
       framebufferStencilSampleCounts:TVkSampleCountFlags;
       framebufferNoAttachmentsSampleCounts:TVkSampleCountFlags;
       maxColorAttachments:TVkUInt32;
       sampledImageColorSampleCounts:TVkSampleCountFlags;
       sampledImageIntegerSampleCounts:TVkSampleCountFlags;
       sampledImageDepthSampleCounts:TVkSampleCountFlags;
       sampledImageStencilSampleCounts:TVkSampleCountFlags;
       storageImageSampleCounts:TVkSampleCountFlags;
       maxSampleMaskWords:TVkUInt32;
       timestampComputeAndGraphics:TVkBool32;
       timestampPeriod:TVkFloat;
       maxClipDistances:TVkUInt32;
       maxCullDistances:TVkUInt32;
       maxCombinedClipAndCullDistances:TVkUInt32;
       discreteQueuePriorities:TVkUInt32;
       pointSizeRange:array[0..1] of TVkFloat;
       lineWidthRange:array[0..1] of TVkFloat;
       pointSizeGranularity:TVkFloat;
       lineWidthGranularity:TVkFloat;
       strictLines:TVkBool32;
       standardSampleLocations:TVkBool32;
       optimalBufferCopyOffsetAlignment:TVkDeviceSize;
       optimalBufferCopyRowPitchAlignment:TVkDeviceSize;
       nonCoherentAtomSize:TVkDeviceSize;
     end;

     PPVkPhysicalDeviceProperties=^PVkPhysicalDeviceProperties;
     PVkPhysicalDeviceProperties=^TVkPhysicalDeviceProperties;
     TVkPhysicalDeviceProperties=record
       apiVersion:TVkUInt32;
       driverVersion:TVkUInt32;
       vendorID:TVkUInt32;
       deviceID:TVkUInt32;
       deviceType:TVkPhysicalDeviceType;
       deviceName:array[0..VK_MAX_PHYSICAL_DEVICE_NAME_SIZE-1] of TVkChar;
       pipelineCacheUUID:array[0..VK_UUID_SIZE-1] of TVkUInt8;
       limits:TVkPhysicalDeviceLimits;
       sparseProperties:TVkPhysicalDeviceSparseProperties;
     end;

     PPVkSemaphoreCreateInfo=^PVkSemaphoreCreateInfo;
     PVkSemaphoreCreateInfo=^TVkSemaphoreCreateInfo;
     TVkSemaphoreCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkSemaphoreCreateFlags;
     end;

     PPVkQueryPoolCreateInfo=^PVkQueryPoolCreateInfo;
     PVkQueryPoolCreateInfo=^TVkQueryPoolCreateInfo;
     TVkQueryPoolCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkQueryPoolCreateFlags;
       queryType:TVkQueryType;
       queryCount:TVkUInt32;
       pipelineStatistics:TVkQueryPipelineStatisticFlags;
     end;

     PPVkFramebufferCreateInfo=^PVkFramebufferCreateInfo;
     PVkFramebufferCreateInfo=^TVkFramebufferCreateInfo;
     TVkFramebufferCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkFramebufferCreateFlags;
       renderPass:TVkRenderPass;
       attachmentCount:TVkUInt32;
       pAttachments:PVkImageView;
       width:TVkUInt32;
       height:TVkUInt32;
       layers:TVkUInt32;
     end;

     PPVkDrawIndirectCommand=^PVkDrawIndirectCommand;
     PVkDrawIndirectCommand=^TVkDrawIndirectCommand;
     TVkDrawIndirectCommand=record
       vertexCount:TVkUInt32;
       instanceCount:TVkUInt32;
       firstVertex:TVkUInt32;
       firstInstance:TVkUInt32;
     end;

     PPVkDrawIndexedIndirectCommand=^PVkDrawIndexedIndirectCommand;
     PVkDrawIndexedIndirectCommand=^TVkDrawIndexedIndirectCommand;
     TVkDrawIndexedIndirectCommand=record
       indexCount:TVkUInt32;
       instanceCount:TVkUInt32;
       firstIndex:TVkUInt32;
       vertexOffset:TVkInt32;
       firstInstance:TVkUInt32;
     end;

     PPVkDispatchIndirectCommand=^PVkDispatchIndirectCommand;
     PVkDispatchIndirectCommand=^TVkDispatchIndirectCommand;
     TVkDispatchIndirectCommand=record
       x:TVkUInt32;
       y:TVkUInt32;
       z:TVkUInt32;
     end;

     PPVkSubmitInfo=^PVkSubmitInfo;
     PVkSubmitInfo=^TVkSubmitInfo;
     TVkSubmitInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SUBMIT_INFO
       pNext:PVkVoid;
       waitSemaphoreCount:TVkUInt32;
       pWaitSemaphores:PVkSemaphore;
       pWaitDstStageMask:PVkPipelineStageFlags;
       commandBufferCount:TVkUInt32;
       pCommandBuffers:PVkCommandBuffer;
       signalSemaphoreCount:TVkUInt32;
       pSignalSemaphores:PVkSemaphore;
     end;

     PPVkDisplayPropertiesKHR=^PVkDisplayPropertiesKHR;
     PVkDisplayPropertiesKHR=^TVkDisplayPropertiesKHR;
     TVkDisplayPropertiesKHR=record
       display:TVkDisplayKHR;
       displayName:PVkChar;
       physicalDimensions:TVkExtent2D;
       physicalResolution:TVkExtent2D;
       supportedTransforms:TVkSurfaceTransformFlagsKHR;
       planeReorderPossible:TVkBool32;
       persistentContent:TVkBool32;
     end;

     PPVkDisplayPlanePropertiesKHR=^PVkDisplayPlanePropertiesKHR;
     PVkDisplayPlanePropertiesKHR=^TVkDisplayPlanePropertiesKHR;
     TVkDisplayPlanePropertiesKHR=record
       currentDisplay:TVkDisplayKHR;
       currentStackIndex:TVkUInt32;
     end;

     PPVkDisplayModeParametersKHR=^PVkDisplayModeParametersKHR;
     PVkDisplayModeParametersKHR=^TVkDisplayModeParametersKHR;
     TVkDisplayModeParametersKHR=record
       visibleRegion:TVkExtent2D;
       refreshRate:TVkUInt32;
     end;

     PPVkDisplayModePropertiesKHR=^PVkDisplayModePropertiesKHR;
     PVkDisplayModePropertiesKHR=^TVkDisplayModePropertiesKHR;
     TVkDisplayModePropertiesKHR=record
       displayMode:TVkDisplayModeKHR;
       parameters:TVkDisplayModeParametersKHR;
     end;

     PPVkDisplayModeCreateInfoKHR=^PVkDisplayModeCreateInfoKHR;
     PVkDisplayModeCreateInfoKHR=^TVkDisplayModeCreateInfoKHR;
     TVkDisplayModeCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkDisplayModeCreateFlagsKHR;
       parameters:TVkDisplayModeParametersKHR;
     end;

     PPVkDisplayPlaneCapabilitiesKHR=^PVkDisplayPlaneCapabilitiesKHR;
     PVkDisplayPlaneCapabilitiesKHR=^TVkDisplayPlaneCapabilitiesKHR;
     TVkDisplayPlaneCapabilitiesKHR=record
       supportedAlpha:TVkDisplayPlaneAlphaFlagsKHR;
       minSrcPosition:TVkOffset2D;
       maxSrcPosition:TVkOffset2D;
       minSrcExtent:TVkExtent2D;
       maxSrcExtent:TVkExtent2D;
       minDstPosition:TVkOffset2D;
       maxDstPosition:TVkOffset2D;
       minDstExtent:TVkExtent2D;
       maxDstExtent:TVkExtent2D;
     end;

     PPVkDisplaySurfaceCreateInfoKHR=^PVkDisplaySurfaceCreateInfoKHR;
     PVkDisplaySurfaceCreateInfoKHR=^TVkDisplaySurfaceCreateInfoKHR;
     TVkDisplaySurfaceCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkDisplaySurfaceCreateFlagsKHR;
       displayMode:TVkDisplayModeKHR;
       planeIndex:TVkUInt32;
       planeStackIndex:TVkUInt32;
       transform:TVkSurfaceTransformFlagBitsKHR;
       globalAlpha:TVkFloat;
       alphaMode:TVkDisplayPlaneAlphaFlagBitsKHR;
       imageExtent:TVkExtent2D;
     end;

     PPVkDisplayPresentInfoKHR=^PVkDisplayPresentInfoKHR;
     PVkDisplayPresentInfoKHR=^TVkDisplayPresentInfoKHR;
     TVkDisplayPresentInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR
       pNext:PVkVoid;
       srcRect:TVkRect2D;
       dstRect:TVkRect2D;
       persistent:TVkBool32;
     end;

     PPVkSurfaceCapabilitiesKHR=^PVkSurfaceCapabilitiesKHR;
     PVkSurfaceCapabilitiesKHR=^TVkSurfaceCapabilitiesKHR;
     TVkSurfaceCapabilitiesKHR=record
       minImageCount:TVkUInt32;
       maxImageCount:TVkUInt32;
       currentExtent:TVkExtent2D;
       minImageExtent:TVkExtent2D;
       maxImageExtent:TVkExtent2D;
       maxImageArrayLayers:TVkUInt32;
       supportedTransforms:TVkSurfaceTransformFlagsKHR;
       currentTransform:TVkSurfaceTransformFlagBitsKHR;
       supportedCompositeAlpha:TVkCompositeAlphaFlagsKHR;
       supportedUsageFlags:TVkImageUsageFlags;
     end;

{$ifdef Android}
     PPVkAndroidSurfaceCreateInfoKHR=^PVkAndroidSurfaceCreateInfoKHR;
     PVkAndroidSurfaceCreateInfoKHR=^TVkAndroidSurfaceCreateInfoKHR;
     TVkAndroidSurfaceCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkAndroidSurfaceCreateFlagsKHR;
       window:PVkAndroidANativeWindow;
     end;
{$endif}

     PPVkViSurfaceCreateInfoNN=^PVkViSurfaceCreateInfoNN;
     PVkViSurfaceCreateInfoNN=^TVkViSurfaceCreateInfoNN;
     TVkViSurfaceCreateInfoNN=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN
       pNext:PVkVoid;
       flags:TVkViSurfaceCreateFlagsNN;
       window:PVkVoid;
     end;

{$ifdef Wayland}
     PPVkWaylandSurfaceCreateInfoKHR=^PVkWaylandSurfaceCreateInfoKHR;
     PVkWaylandSurfaceCreateInfoKHR=^TVkWaylandSurfaceCreateInfoKHR;
     TVkWaylandSurfaceCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkWaylandSurfaceCreateFlagsKHR;
       display:PVkWaylandDisplay;
       surface:PVkWaylandSurface;
     end;
{$endif}

{$ifdef Windows}
     PPVkWin32SurfaceCreateInfoKHR=^PVkWin32SurfaceCreateInfoKHR;
     PVkWin32SurfaceCreateInfoKHR=^TVkWin32SurfaceCreateInfoKHR;
     TVkWin32SurfaceCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkWin32SurfaceCreateFlagsKHR;
       hinstance_:TVkHINSTANCE;
       hwnd_:TVkHWND;
     end;
{$endif}

{$ifdef XLIB}
     PPVkXlibSurfaceCreateInfoKHR=^PVkXlibSurfaceCreateInfoKHR;
     PVkXlibSurfaceCreateInfoKHR=^TVkXlibSurfaceCreateInfoKHR;
     TVkXlibSurfaceCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkXlibSurfaceCreateFlagsKHR;
       dpy:PVkXLIBDisplay;
       window:TVkXLIBWindow;
     end;
{$endif}

{$ifdef XCB}
     PPVkXcbSurfaceCreateInfoKHR=^PVkXcbSurfaceCreateInfoKHR;
     PVkXcbSurfaceCreateInfoKHR=^TVkXcbSurfaceCreateInfoKHR;
     TVkXcbSurfaceCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkXcbSurfaceCreateFlagsKHR;
       connection:PVkXCBConnection;
       window:TVkXCBWindow;
     end;
{$endif}

     PPVkDirectFBSurfaceCreateInfoEXT=^PVkDirectFBSurfaceCreateInfoEXT;
     PVkDirectFBSurfaceCreateInfoEXT=^TVkDirectFBSurfaceCreateInfoEXT;
     TVkDirectFBSurfaceCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkDirectFBSurfaceCreateFlagsEXT;
       dfb:PIDirectFB;
       surface:PIDirectFBSurface;
     end;

     PPVkImagePipeSurfaceCreateInfoFUCHSIA=^PVkImagePipeSurfaceCreateInfoFUCHSIA;
     PVkImagePipeSurfaceCreateInfoFUCHSIA=^TVkImagePipeSurfaceCreateInfoFUCHSIA;
     TVkImagePipeSurfaceCreateInfoFUCHSIA=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA
       pNext:PVkVoid;
       flags:TVkImagePipeSurfaceCreateFlagsFUCHSIA;
       imagePipeHandle:Tzx_handle_t;
     end;

     PPVkStreamDescriptorSurfaceCreateInfoGGP=^PVkStreamDescriptorSurfaceCreateInfoGGP;
     PVkStreamDescriptorSurfaceCreateInfoGGP=^TVkStreamDescriptorSurfaceCreateInfoGGP;
     TVkStreamDescriptorSurfaceCreateInfoGGP=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP
       pNext:PVkVoid;
       flags:TVkStreamDescriptorSurfaceCreateFlagsGGP;
       streamDescriptor:TGgpStreamDescriptor;
     end;

     PPVkSurfaceFormatKHR=^PVkSurfaceFormatKHR;
     PVkSurfaceFormatKHR=^TVkSurfaceFormatKHR;
     TVkSurfaceFormatKHR=record
       format:TVkFormat;
       colorSpace:TVkColorSpaceKHR;
     end;

     PPVkSwapchainCreateInfoKHR=^PVkSwapchainCreateInfoKHR;
     PVkSwapchainCreateInfoKHR=^TVkSwapchainCreateInfoKHR;
     TVkSwapchainCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkSwapchainCreateFlagsKHR;
       surface:TVkSurfaceKHR;
       minImageCount:TVkUInt32;
       imageFormat:TVkFormat;
       imageColorSpace:TVkColorSpaceKHR;
       imageExtent:TVkExtent2D;
       imageArrayLayers:TVkUInt32;
       imageUsage:TVkImageUsageFlags;
       imageSharingMode:TVkSharingMode;
       queueFamilyIndexCount:TVkUInt32;
       pQueueFamilyIndices:PVkUInt32;
       preTransform:TVkSurfaceTransformFlagBitsKHR;
       compositeAlpha:TVkCompositeAlphaFlagBitsKHR;
       presentMode:TVkPresentModeKHR;
       clipped:TVkBool32;
       oldSwapchain:TVkSwapchainKHR;
     end;

     PPVkPresentInfoKHR=^PVkPresentInfoKHR;
     PVkPresentInfoKHR=^TVkPresentInfoKHR;
     TVkPresentInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PRESENT_INFO_KHR
       pNext:PVkVoid;
       waitSemaphoreCount:TVkUInt32;
       pWaitSemaphores:PVkSemaphore;
       swapchainCount:TVkUInt32;
       pSwapchains:PVkSwapchainKHR;
       pImageIndices:PVkUInt32;
       pResults:PVkResult;
     end;

     PPVkDebugReportCallbackCreateInfoEXT=^PVkDebugReportCallbackCreateInfoEXT;
     PVkDebugReportCallbackCreateInfoEXT=^TVkDebugReportCallbackCreateInfoEXT;
     TVkDebugReportCallbackCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkDebugReportFlagsEXT;
       pfnCallback:TPFN_vkDebugReportCallbackEXT;
       pUserData:PVkVoid;
     end;

     PPVkValidationFlagsEXT=^PVkValidationFlagsEXT;
     PVkValidationFlagsEXT=^TVkValidationFlagsEXT;
     TVkValidationFlagsEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT
       pNext:PVkVoid;
       disabledValidationCheckCount:TVkUInt32;
       pDisabledValidationChecks:PVkValidationCheckEXT;
     end;

     PPVkValidationFeaturesEXT=^PVkValidationFeaturesEXT;
     PVkValidationFeaturesEXT=^TVkValidationFeaturesEXT;
     TVkValidationFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT
       pNext:PVkVoid;
       enabledValidationFeatureCount:TVkUInt32;
       pEnabledValidationFeatures:PVkValidationFeatureEnableEXT;
       disabledValidationFeatureCount:TVkUInt32;
       pDisabledValidationFeatures:PVkValidationFeatureDisableEXT;
     end;

     PPVkPipelineRasterizationStateRasterizationOrderAMD=^PVkPipelineRasterizationStateRasterizationOrderAMD;
     PVkPipelineRasterizationStateRasterizationOrderAMD=^TVkPipelineRasterizationStateRasterizationOrderAMD;
     TVkPipelineRasterizationStateRasterizationOrderAMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD
       pNext:PVkVoid;
       rasterizationOrder:TVkRasterizationOrderAMD;
     end;

     PPVkDebugMarkerObjectNameInfoEXT=^PVkDebugMarkerObjectNameInfoEXT;
     PVkDebugMarkerObjectNameInfoEXT=^TVkDebugMarkerObjectNameInfoEXT;
     TVkDebugMarkerObjectNameInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT
       pNext:PVkVoid;
       objectType:TVkDebugReportObjectTypeEXT;
       object_:TVkUInt64;
       pObjectName:PVkChar;
     end;

     PPVkDebugMarkerObjectTagInfoEXT=^PVkDebugMarkerObjectTagInfoEXT;
     PVkDebugMarkerObjectTagInfoEXT=^TVkDebugMarkerObjectTagInfoEXT;
     TVkDebugMarkerObjectTagInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT
       pNext:PVkVoid;
       objectType:TVkDebugReportObjectTypeEXT;
       object_:TVkUInt64;
       tagName:TVkUInt64;
       tagSize:TVkSize;
       pTag:PVkVoid;
     end;

     PPVkDebugMarkerMarkerInfoEXT=^PVkDebugMarkerMarkerInfoEXT;
     PVkDebugMarkerMarkerInfoEXT=^TVkDebugMarkerMarkerInfoEXT;
     TVkDebugMarkerMarkerInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT
       pNext:PVkVoid;
       pMarkerName:PVkChar;
       color:array[0..3] of TVkFloat;
     end;

     PPVkDedicatedAllocationImageCreateInfoNV=^PVkDedicatedAllocationImageCreateInfoNV;
     PVkDedicatedAllocationImageCreateInfoNV=^TVkDedicatedAllocationImageCreateInfoNV;
     TVkDedicatedAllocationImageCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV
       pNext:PVkVoid;
       dedicatedAllocation:TVkBool32;
     end;

     PPVkDedicatedAllocationBufferCreateInfoNV=^PVkDedicatedAllocationBufferCreateInfoNV;
     PVkDedicatedAllocationBufferCreateInfoNV=^TVkDedicatedAllocationBufferCreateInfoNV;
     TVkDedicatedAllocationBufferCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV
       pNext:PVkVoid;
       dedicatedAllocation:TVkBool32;
     end;

     PPVkDedicatedAllocationMemoryAllocateInfoNV=^PVkDedicatedAllocationMemoryAllocateInfoNV;
     PVkDedicatedAllocationMemoryAllocateInfoNV=^TVkDedicatedAllocationMemoryAllocateInfoNV;
     TVkDedicatedAllocationMemoryAllocateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV
       pNext:PVkVoid;
       image:TVkImage;
       buffer:TVkBuffer;
     end;

     PPVkExternalImageFormatPropertiesNV=^PVkExternalImageFormatPropertiesNV;
     PVkExternalImageFormatPropertiesNV=^TVkExternalImageFormatPropertiesNV;
     TVkExternalImageFormatPropertiesNV=record
       imageFormatProperties:TVkImageFormatProperties;
       externalMemoryFeatures:TVkExternalMemoryFeatureFlagsNV;
       exportFromImportedHandleTypes:TVkExternalMemoryHandleTypeFlagsNV;
       compatibleHandleTypes:TVkExternalMemoryHandleTypeFlagsNV;
     end;

     PPVkExternalMemoryImageCreateInfoNV=^PVkExternalMemoryImageCreateInfoNV;
     PVkExternalMemoryImageCreateInfoNV=^TVkExternalMemoryImageCreateInfoNV;
     TVkExternalMemoryImageCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV
       pNext:PVkVoid;
       handleTypes:TVkExternalMemoryHandleTypeFlagsNV;
     end;

     PPVkExportMemoryAllocateInfoNV=^PVkExportMemoryAllocateInfoNV;
     PVkExportMemoryAllocateInfoNV=^TVkExportMemoryAllocateInfoNV;
     TVkExportMemoryAllocateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV
       pNext:PVkVoid;
       handleTypes:TVkExternalMemoryHandleTypeFlagsNV;
     end;

     PPVkImportMemoryWin32HandleInfoNV=^PVkImportMemoryWin32HandleInfoNV;
     PVkImportMemoryWin32HandleInfoNV=^TVkImportMemoryWin32HandleInfoNV;
     TVkImportMemoryWin32HandleInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV
       pNext:PVkVoid;
       handleType:TVkExternalMemoryHandleTypeFlagsNV;
       handle:THANDLE;
     end;

{$ifdef Windows}
     PPVkExportMemoryWin32HandleInfoNV=^PVkExportMemoryWin32HandleInfoNV;
     PVkExportMemoryWin32HandleInfoNV=^TVkExportMemoryWin32HandleInfoNV;
     TVkExportMemoryWin32HandleInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV
       pNext:PVkVoid;
       pAttributes:PSecurityAttributes;
       dwAccess:TVkUInt32;
     end;
{$endif}

     PPVkWin32KeyedMutexAcquireReleaseInfoNV=^PVkWin32KeyedMutexAcquireReleaseInfoNV;
     PVkWin32KeyedMutexAcquireReleaseInfoNV=^TVkWin32KeyedMutexAcquireReleaseInfoNV;
     TVkWin32KeyedMutexAcquireReleaseInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV
       pNext:PVkVoid;
       acquireCount:TVkUInt32;
       pAcquireSyncs:PVkDeviceMemory;
       pAcquireKeys:PVkUInt64;
       pAcquireTimeoutMilliseconds:PVkUInt32;
       releaseCount:TVkUInt32;
       pReleaseSyncs:PVkDeviceMemory;
       pReleaseKeys:PVkUInt64;
     end;

     PPVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV=^PVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
     PVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV=^TVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
     TVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV
       pNext:PVkVoid;
       deviceGeneratedCommands:TVkBool32;
     end;

     PPVkDevicePrivateDataCreateInfoEXT=^PVkDevicePrivateDataCreateInfoEXT;
     PVkDevicePrivateDataCreateInfoEXT=^TVkDevicePrivateDataCreateInfoEXT;
     TVkDevicePrivateDataCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT
       pNext:PVkVoid;
       privateDataSlotRequestCount:TVkUInt32;
     end;

     PPVkPrivateDataSlotCreateInfoEXT=^PVkPrivateDataSlotCreateInfoEXT;
     PVkPrivateDataSlotCreateInfoEXT=^TVkPrivateDataSlotCreateInfoEXT;
     TVkPrivateDataSlotCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkPrivateDataSlotCreateFlagsEXT;
     end;

     PPVkPhysicalDevicePrivateDataFeaturesEXT=^PVkPhysicalDevicePrivateDataFeaturesEXT;
     PVkPhysicalDevicePrivateDataFeaturesEXT=^TVkPhysicalDevicePrivateDataFeaturesEXT;
     TVkPhysicalDevicePrivateDataFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT
       pNext:PVkVoid;
       privateData:TVkBool32;
     end;

     PPVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV=^PVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
     PVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV=^TVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
     TVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV
       pNext:PVkVoid;
       maxGraphicsShaderGroupCount:TVkUInt32;
       maxIndirectSequenceCount:TVkUInt32;
       maxIndirectCommandsTokenCount:TVkUInt32;
       maxIndirectCommandsStreamCount:TVkUInt32;
       maxIndirectCommandsTokenOffset:TVkUInt32;
       maxIndirectCommandsStreamStride:TVkUInt32;
       minSequencesCountBufferOffsetAlignment:TVkUInt32;
       minSequencesIndexBufferOffsetAlignment:TVkUInt32;
       minIndirectCommandsBufferOffsetAlignment:TVkUInt32;
     end;

     PPVkGraphicsShaderGroupCreateInfoNV=^PVkGraphicsShaderGroupCreateInfoNV;
     PVkGraphicsShaderGroupCreateInfoNV=^TVkGraphicsShaderGroupCreateInfoNV;
     TVkGraphicsShaderGroupCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV
       pNext:PVkVoid;
       stageCount:TVkUInt32;
       pStages:PVkPipelineShaderStageCreateInfo;
       pVertexInputState:PVkPipelineVertexInputStateCreateInfo;
       pTessellationState:PVkPipelineTessellationStateCreateInfo;
     end;

     PPVkGraphicsPipelineShaderGroupsCreateInfoNV=^PVkGraphicsPipelineShaderGroupsCreateInfoNV;
     PVkGraphicsPipelineShaderGroupsCreateInfoNV=^TVkGraphicsPipelineShaderGroupsCreateInfoNV;
     TVkGraphicsPipelineShaderGroupsCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV
       pNext:PVkVoid;
       groupCount:TVkUInt32;
       pGroups:PVkGraphicsShaderGroupCreateInfoNV;
       pipelineCount:TVkUInt32;
       pPipelines:PVkPipeline;
     end;

     PPVkBindShaderGroupIndirectCommandNV=^PVkBindShaderGroupIndirectCommandNV;
     PVkBindShaderGroupIndirectCommandNV=^TVkBindShaderGroupIndirectCommandNV;
     TVkBindShaderGroupIndirectCommandNV=record
       groupIndex:TVkUInt32;
     end;

     PPVkBindIndexBufferIndirectCommandNV=^PVkBindIndexBufferIndirectCommandNV;
     PVkBindIndexBufferIndirectCommandNV=^TVkBindIndexBufferIndirectCommandNV;
     TVkBindIndexBufferIndirectCommandNV=record
       bufferAddress:TVkDeviceAddress;
       size:TVkUInt32;
       indexType:TVkIndexType;
     end;

     PPVkBindVertexBufferIndirectCommandNV=^PVkBindVertexBufferIndirectCommandNV;
     PVkBindVertexBufferIndirectCommandNV=^TVkBindVertexBufferIndirectCommandNV;
     TVkBindVertexBufferIndirectCommandNV=record
       bufferAddress:TVkDeviceAddress;
       size:TVkUInt32;
       stride:TVkUInt32;
     end;

     PPVkSetStateFlagsIndirectCommandNV=^PVkSetStateFlagsIndirectCommandNV;
     PVkSetStateFlagsIndirectCommandNV=^TVkSetStateFlagsIndirectCommandNV;
     TVkSetStateFlagsIndirectCommandNV=record
       data:TVkUInt32;
     end;

     PPVkIndirectCommandsStreamNV=^PVkIndirectCommandsStreamNV;
     PVkIndirectCommandsStreamNV=^TVkIndirectCommandsStreamNV;
     TVkIndirectCommandsStreamNV=record
       buffer:TVkBuffer;
       offset:TVkDeviceSize;
     end;

     PPVkIndirectCommandsLayoutTokenNV=^PVkIndirectCommandsLayoutTokenNV;
     PVkIndirectCommandsLayoutTokenNV=^TVkIndirectCommandsLayoutTokenNV;
     TVkIndirectCommandsLayoutTokenNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV
       pNext:PVkVoid;
       tokenType:TVkIndirectCommandsTokenTypeNV;
       stream:TVkUInt32;
       offset:TVkUInt32;
       vertexBindingUnit:TVkUInt32;
       vertexDynamicStride:TVkBool32;
       pushconstantPipelineLayout:TVkPipelineLayout;
       pushconstantShaderStageFlags:TVkShaderStageFlags;
       pushconstantOffset:TVkUInt32;
       pushconstantSize:TVkUInt32;
       indirectStateFlags:TVkIndirectStateFlagsNV;
       indexTypeCount:TVkUInt32;
       pIndexTypes:PVkIndexType;
       pIndexTypeValues:PVkUInt32;
     end;

     PPVkIndirectCommandsLayoutCreateInfoNV=^PVkIndirectCommandsLayoutCreateInfoNV;
     PVkIndirectCommandsLayoutCreateInfoNV=^TVkIndirectCommandsLayoutCreateInfoNV;
     TVkIndirectCommandsLayoutCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV
       pNext:PVkVoid;
       flags:TVkIndirectCommandsLayoutUsageFlagsNV;
       pipelineBindPoint:TVkPipelineBindPoint;
       tokenCount:TVkUInt32;
       pTokens:PVkIndirectCommandsLayoutTokenNV;
       streamCount:TVkUInt32;
       pStreamStrides:PVkUInt32;
     end;

     PPVkGeneratedCommandsInfoNV=^PVkGeneratedCommandsInfoNV;
     PVkGeneratedCommandsInfoNV=^TVkGeneratedCommandsInfoNV;
     TVkGeneratedCommandsInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV
       pNext:PVkVoid;
       pipelineBindPoint:TVkPipelineBindPoint;
       pipeline:TVkPipeline;
       indirectCommandsLayout:TVkIndirectCommandsLayoutNV;
       streamCount:TVkUInt32;
       pStreams:PVkIndirectCommandsStreamNV;
       sequencesCount:TVkUInt32;
       preprocessBuffer:TVkBuffer;
       preprocessOffset:TVkDeviceSize;
       preprocessSize:TVkDeviceSize;
       sequencesCountBuffer:TVkBuffer;
       sequencesCountOffset:TVkDeviceSize;
       sequencesIndexBuffer:TVkBuffer;
       sequencesIndexOffset:TVkDeviceSize;
     end;

     PPVkGeneratedCommandsMemoryRequirementsInfoNV=^PVkGeneratedCommandsMemoryRequirementsInfoNV;
     PVkGeneratedCommandsMemoryRequirementsInfoNV=^TVkGeneratedCommandsMemoryRequirementsInfoNV;
     TVkGeneratedCommandsMemoryRequirementsInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV
       pNext:PVkVoid;
       pipelineBindPoint:TVkPipelineBindPoint;
       pipeline:TVkPipeline;
       indirectCommandsLayout:TVkIndirectCommandsLayoutNV;
       maxSequencesCount:TVkUInt32;
     end;

     PPVkPhysicalDeviceFeatures2=^PVkPhysicalDeviceFeatures2;
     PVkPhysicalDeviceFeatures2=^TVkPhysicalDeviceFeatures2;
     TVkPhysicalDeviceFeatures2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2
       pNext:PVkVoid;
       features:TVkPhysicalDeviceFeatures;
     end;

     PPVkPhysicalDeviceFeatures2KHR=^PVkPhysicalDeviceFeatures2KHR;
     PVkPhysicalDeviceFeatures2KHR=^TVkPhysicalDeviceFeatures2KHR;
     TVkPhysicalDeviceFeatures2KHR=TVkPhysicalDeviceFeatures2;

     PPVkPhysicalDeviceProperties2=^PVkPhysicalDeviceProperties2;
     PVkPhysicalDeviceProperties2=^TVkPhysicalDeviceProperties2;
     TVkPhysicalDeviceProperties2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2
       pNext:PVkVoid;
       properties:TVkPhysicalDeviceProperties;
     end;

     PPVkPhysicalDeviceProperties2KHR=^PVkPhysicalDeviceProperties2KHR;
     PVkPhysicalDeviceProperties2KHR=^TVkPhysicalDeviceProperties2KHR;
     TVkPhysicalDeviceProperties2KHR=TVkPhysicalDeviceProperties2;

     PPVkFormatProperties2=^PVkFormatProperties2;
     PVkFormatProperties2=^TVkFormatProperties2;
     TVkFormatProperties2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2
       pNext:PVkVoid;
       formatProperties:TVkFormatProperties;
     end;

     PPVkFormatProperties2KHR=^PVkFormatProperties2KHR;
     PVkFormatProperties2KHR=^TVkFormatProperties2KHR;
     TVkFormatProperties2KHR=TVkFormatProperties2;

     PPVkImageFormatProperties2=^PVkImageFormatProperties2;
     PVkImageFormatProperties2=^TVkImageFormatProperties2;
     TVkImageFormatProperties2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2
       pNext:PVkVoid;
       imageFormatProperties:TVkImageFormatProperties;
     end;

     PPVkImageFormatProperties2KHR=^PVkImageFormatProperties2KHR;
     PVkImageFormatProperties2KHR=^TVkImageFormatProperties2KHR;
     TVkImageFormatProperties2KHR=TVkImageFormatProperties2;

     PPVkPhysicalDeviceImageFormatInfo2=^PVkPhysicalDeviceImageFormatInfo2;
     PVkPhysicalDeviceImageFormatInfo2=^TVkPhysicalDeviceImageFormatInfo2;
     TVkPhysicalDeviceImageFormatInfo2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2
       pNext:PVkVoid;
       format:TVkFormat;
       type_:TVkImageType;
       tiling:TVkImageTiling;
       usage:TVkImageUsageFlags;
       flags:TVkImageCreateFlags;
     end;

     PPVkPhysicalDeviceImageFormatInfo2KHR=^PVkPhysicalDeviceImageFormatInfo2KHR;
     PVkPhysicalDeviceImageFormatInfo2KHR=^TVkPhysicalDeviceImageFormatInfo2KHR;
     TVkPhysicalDeviceImageFormatInfo2KHR=TVkPhysicalDeviceImageFormatInfo2;

     PPVkQueueFamilyProperties2=^PVkQueueFamilyProperties2;
     PVkQueueFamilyProperties2=^TVkQueueFamilyProperties2;
     TVkQueueFamilyProperties2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2
       pNext:PVkVoid;
       queueFamilyProperties:TVkQueueFamilyProperties;
     end;

     PPVkQueueFamilyProperties2KHR=^PVkQueueFamilyProperties2KHR;
     PVkQueueFamilyProperties2KHR=^TVkQueueFamilyProperties2KHR;
     TVkQueueFamilyProperties2KHR=TVkQueueFamilyProperties2;

     PPVkPhysicalDeviceMemoryProperties2=^PVkPhysicalDeviceMemoryProperties2;
     PVkPhysicalDeviceMemoryProperties2=^TVkPhysicalDeviceMemoryProperties2;
     TVkPhysicalDeviceMemoryProperties2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2
       pNext:PVkVoid;
       memoryProperties:TVkPhysicalDeviceMemoryProperties;
     end;

     PPVkPhysicalDeviceMemoryProperties2KHR=^PVkPhysicalDeviceMemoryProperties2KHR;
     PVkPhysicalDeviceMemoryProperties2KHR=^TVkPhysicalDeviceMemoryProperties2KHR;
     TVkPhysicalDeviceMemoryProperties2KHR=TVkPhysicalDeviceMemoryProperties2;

     PPVkSparseImageFormatProperties2=^PVkSparseImageFormatProperties2;
     PVkSparseImageFormatProperties2=^TVkSparseImageFormatProperties2;
     TVkSparseImageFormatProperties2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2
       pNext:PVkVoid;
       properties:TVkSparseImageFormatProperties;
     end;

     PPVkSparseImageFormatProperties2KHR=^PVkSparseImageFormatProperties2KHR;
     PVkSparseImageFormatProperties2KHR=^TVkSparseImageFormatProperties2KHR;
     TVkSparseImageFormatProperties2KHR=TVkSparseImageFormatProperties2;

     PPVkPhysicalDeviceSparseImageFormatInfo2=^PVkPhysicalDeviceSparseImageFormatInfo2;
     PVkPhysicalDeviceSparseImageFormatInfo2=^TVkPhysicalDeviceSparseImageFormatInfo2;
     TVkPhysicalDeviceSparseImageFormatInfo2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2
       pNext:PVkVoid;
       format:TVkFormat;
       type_:TVkImageType;
       samples:TVkSampleCountFlagBits;
       usage:TVkImageUsageFlags;
       tiling:TVkImageTiling;
     end;

     PPVkPhysicalDeviceSparseImageFormatInfo2KHR=^PVkPhysicalDeviceSparseImageFormatInfo2KHR;
     PVkPhysicalDeviceSparseImageFormatInfo2KHR=^TVkPhysicalDeviceSparseImageFormatInfo2KHR;
     TVkPhysicalDeviceSparseImageFormatInfo2KHR=TVkPhysicalDeviceSparseImageFormatInfo2;

     PPVkPhysicalDevicePushDescriptorPropertiesKHR=^PVkPhysicalDevicePushDescriptorPropertiesKHR;
     PVkPhysicalDevicePushDescriptorPropertiesKHR=^TVkPhysicalDevicePushDescriptorPropertiesKHR;
     TVkPhysicalDevicePushDescriptorPropertiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR
       pNext:PVkVoid;
       maxPushDescriptors:TVkUInt32;
     end;

     PPVkConformanceVersion=^PVkConformanceVersion;
     PVkConformanceVersion=^TVkConformanceVersion;
     TVkConformanceVersion=record
       major:TVkUInt8;
       minor:TVkUInt8;
       subminor:TVkUInt8;
       patch:TVkUInt8;
     end;

     PPVkConformanceVersionKHR=^PVkConformanceVersionKHR;
     PVkConformanceVersionKHR=^TVkConformanceVersionKHR;
     TVkConformanceVersionKHR=TVkConformanceVersion;

     PPVkPhysicalDeviceDriverProperties=^PVkPhysicalDeviceDriverProperties;
     PVkPhysicalDeviceDriverProperties=^TVkPhysicalDeviceDriverProperties;
     TVkPhysicalDeviceDriverProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES
       pNext:PVkVoid;
       driverID:TVkDriverId;
       driverName:array[0..VK_MAX_DRIVER_NAME_SIZE-1] of TVkChar;
       driverInfo:array[0..VK_MAX_DRIVER_INFO_SIZE-1] of TVkChar;
       conformanceVersion:TVkConformanceVersion;
     end;

     PPVkPhysicalDeviceDriverPropertiesKHR=^PVkPhysicalDeviceDriverPropertiesKHR;
     PVkPhysicalDeviceDriverPropertiesKHR=^TVkPhysicalDeviceDriverPropertiesKHR;
     TVkPhysicalDeviceDriverPropertiesKHR=TVkPhysicalDeviceDriverProperties;

     PPVkRectLayerKHR=^PVkRectLayerKHR;
     PVkRectLayerKHR=^TVkRectLayerKHR;
     TVkRectLayerKHR=record
       offset:TVkOffset2D;
       extent:TVkExtent2D;
       layer:TVkUInt32;
     end;

     PPVkPresentRegionKHR=^PVkPresentRegionKHR;
     PVkPresentRegionKHR=^TVkPresentRegionKHR;
     TVkPresentRegionKHR=record
       rectangleCount:TVkUInt32;
       pRectangles:PVkRectLayerKHR;
     end;

     PPVkPresentRegionsKHR=^PVkPresentRegionsKHR;
     PVkPresentRegionsKHR=^TVkPresentRegionsKHR;
     TVkPresentRegionsKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR
       pNext:PVkVoid;
       swapchainCount:TVkUInt32;
       pRegions:PVkPresentRegionKHR;
     end;

     PPVkPhysicalDeviceVariablePointersFeatures=^PVkPhysicalDeviceVariablePointersFeatures;
     PVkPhysicalDeviceVariablePointersFeatures=^TVkPhysicalDeviceVariablePointersFeatures;
     TVkPhysicalDeviceVariablePointersFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
       pNext:PVkVoid;
       variablePointersStorageBuffer:TVkBool32;
       variablePointers:TVkBool32;
     end;

     PPVkPhysicalDeviceVariablePointersFeaturesKHR=^PVkPhysicalDeviceVariablePointersFeaturesKHR;
     PVkPhysicalDeviceVariablePointersFeaturesKHR=^TVkPhysicalDeviceVariablePointersFeaturesKHR;
     TVkPhysicalDeviceVariablePointersFeaturesKHR=TVkPhysicalDeviceVariablePointersFeatures;

     PPVkPhysicalDeviceVariablePointerFeaturesKHR=^PVkPhysicalDeviceVariablePointerFeaturesKHR;
     PVkPhysicalDeviceVariablePointerFeaturesKHR=^TVkPhysicalDeviceVariablePointerFeaturesKHR;
     TVkPhysicalDeviceVariablePointerFeaturesKHR=TVkPhysicalDeviceVariablePointersFeatures;

     PPVkPhysicalDeviceVariablePointerFeatures=^PVkPhysicalDeviceVariablePointerFeatures;
     PVkPhysicalDeviceVariablePointerFeatures=^TVkPhysicalDeviceVariablePointerFeatures;
     TVkPhysicalDeviceVariablePointerFeatures=TVkPhysicalDeviceVariablePointersFeatures;

     PPVkExternalMemoryProperties=^PVkExternalMemoryProperties;
     PVkExternalMemoryProperties=^TVkExternalMemoryProperties;
     TVkExternalMemoryProperties=record
       externalMemoryFeatures:TVkExternalMemoryFeatureFlags;
       exportFromImportedHandleTypes:TVkExternalMemoryHandleTypeFlags;
       compatibleHandleTypes:TVkExternalMemoryHandleTypeFlags;
     end;

     PPVkExternalMemoryPropertiesKHR=^PVkExternalMemoryPropertiesKHR;
     PVkExternalMemoryPropertiesKHR=^TVkExternalMemoryPropertiesKHR;
     TVkExternalMemoryPropertiesKHR=TVkExternalMemoryProperties;

     PPVkPhysicalDeviceExternalImageFormatInfo=^PVkPhysicalDeviceExternalImageFormatInfo;
     PVkPhysicalDeviceExternalImageFormatInfo=^TVkPhysicalDeviceExternalImageFormatInfo;
     TVkPhysicalDeviceExternalImageFormatInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO
       pNext:PVkVoid;
       handleType:TVkExternalMemoryHandleTypeFlagBits;
     end;

     PPVkPhysicalDeviceExternalImageFormatInfoKHR=^PVkPhysicalDeviceExternalImageFormatInfoKHR;
     PVkPhysicalDeviceExternalImageFormatInfoKHR=^TVkPhysicalDeviceExternalImageFormatInfoKHR;
     TVkPhysicalDeviceExternalImageFormatInfoKHR=TVkPhysicalDeviceExternalImageFormatInfo;

     PPVkExternalImageFormatProperties=^PVkExternalImageFormatProperties;
     PVkExternalImageFormatProperties=^TVkExternalImageFormatProperties;
     TVkExternalImageFormatProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES
       pNext:PVkVoid;
       externalMemoryProperties:TVkExternalMemoryProperties;
     end;

     PPVkExternalImageFormatPropertiesKHR=^PVkExternalImageFormatPropertiesKHR;
     PVkExternalImageFormatPropertiesKHR=^TVkExternalImageFormatPropertiesKHR;
     TVkExternalImageFormatPropertiesKHR=TVkExternalImageFormatProperties;

     PPVkPhysicalDeviceExternalBufferInfo=^PVkPhysicalDeviceExternalBufferInfo;
     PVkPhysicalDeviceExternalBufferInfo=^TVkPhysicalDeviceExternalBufferInfo;
     TVkPhysicalDeviceExternalBufferInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO
       pNext:PVkVoid;
       flags:TVkBufferCreateFlags;
       usage:TVkBufferUsageFlags;
       handleType:TVkExternalMemoryHandleTypeFlagBits;
     end;

     PPVkPhysicalDeviceExternalBufferInfoKHR=^PVkPhysicalDeviceExternalBufferInfoKHR;
     PVkPhysicalDeviceExternalBufferInfoKHR=^TVkPhysicalDeviceExternalBufferInfoKHR;
     TVkPhysicalDeviceExternalBufferInfoKHR=TVkPhysicalDeviceExternalBufferInfo;

     PPVkExternalBufferProperties=^PVkExternalBufferProperties;
     PVkExternalBufferProperties=^TVkExternalBufferProperties;
     TVkExternalBufferProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES
       pNext:PVkVoid;
       externalMemoryProperties:TVkExternalMemoryProperties;
     end;

     PPVkExternalBufferPropertiesKHR=^PVkExternalBufferPropertiesKHR;
     PVkExternalBufferPropertiesKHR=^TVkExternalBufferPropertiesKHR;
     TVkExternalBufferPropertiesKHR=TVkExternalBufferProperties;

     PPVkPhysicalDeviceIDProperties=^PVkPhysicalDeviceIDProperties;
     PVkPhysicalDeviceIDProperties=^TVkPhysicalDeviceIDProperties;
     TVkPhysicalDeviceIDProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES
       pNext:PVkVoid;
       deviceUUID:array[0..VK_UUID_SIZE-1] of TVkUInt8;
       driverUUID:array[0..VK_UUID_SIZE-1] of TVkUInt8;
       deviceLUID:array[0..VK_LUID_SIZE-1] of TVkUInt8;
       deviceNodeMask:TVkUInt32;
       deviceLUIDValid:TVkBool32;
     end;

     PPVkPhysicalDeviceIDPropertiesKHR=^PVkPhysicalDeviceIDPropertiesKHR;
     PVkPhysicalDeviceIDPropertiesKHR=^TVkPhysicalDeviceIDPropertiesKHR;
     TVkPhysicalDeviceIDPropertiesKHR=TVkPhysicalDeviceIDProperties;

     PPVkExternalMemoryImageCreateInfo=^PVkExternalMemoryImageCreateInfo;
     PVkExternalMemoryImageCreateInfo=^TVkExternalMemoryImageCreateInfo;
     TVkExternalMemoryImageCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO
       pNext:PVkVoid;
       handleTypes:TVkExternalMemoryHandleTypeFlags;
     end;

     PPVkExternalMemoryImageCreateInfoKHR=^PVkExternalMemoryImageCreateInfoKHR;
     PVkExternalMemoryImageCreateInfoKHR=^TVkExternalMemoryImageCreateInfoKHR;
     TVkExternalMemoryImageCreateInfoKHR=TVkExternalMemoryImageCreateInfo;

     PPVkExternalMemoryBufferCreateInfo=^PVkExternalMemoryBufferCreateInfo;
     PVkExternalMemoryBufferCreateInfo=^TVkExternalMemoryBufferCreateInfo;
     TVkExternalMemoryBufferCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO
       pNext:PVkVoid;
       handleTypes:TVkExternalMemoryHandleTypeFlags;
     end;

     PPVkExternalMemoryBufferCreateInfoKHR=^PVkExternalMemoryBufferCreateInfoKHR;
     PVkExternalMemoryBufferCreateInfoKHR=^TVkExternalMemoryBufferCreateInfoKHR;
     TVkExternalMemoryBufferCreateInfoKHR=TVkExternalMemoryBufferCreateInfo;

     PPVkExportMemoryAllocateInfo=^PVkExportMemoryAllocateInfo;
     PVkExportMemoryAllocateInfo=^TVkExportMemoryAllocateInfo;
     TVkExportMemoryAllocateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO
       pNext:PVkVoid;
       handleTypes:TVkExternalMemoryHandleTypeFlags;
     end;

     PPVkExportMemoryAllocateInfoKHR=^PVkExportMemoryAllocateInfoKHR;
     PVkExportMemoryAllocateInfoKHR=^TVkExportMemoryAllocateInfoKHR;
     TVkExportMemoryAllocateInfoKHR=TVkExportMemoryAllocateInfo;

     PPVkImportMemoryWin32HandleInfoKHR=^PVkImportMemoryWin32HandleInfoKHR;
     PVkImportMemoryWin32HandleInfoKHR=^TVkImportMemoryWin32HandleInfoKHR;
     TVkImportMemoryWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       handleType:TVkExternalMemoryHandleTypeFlagBits;
       handle:THANDLE;
       name:PWideChar;
     end;

{$ifdef Windows}
     PPVkExportMemoryWin32HandleInfoKHR=^PVkExportMemoryWin32HandleInfoKHR;
     PVkExportMemoryWin32HandleInfoKHR=^TVkExportMemoryWin32HandleInfoKHR;
     TVkExportMemoryWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       pAttributes:PSecurityAttributes;
       dwAccess:TVkUInt32;
       name:PWideChar;
     end;
{$endif}

     PPVkMemoryWin32HandlePropertiesKHR=^PVkMemoryWin32HandlePropertiesKHR;
     PVkMemoryWin32HandlePropertiesKHR=^TVkMemoryWin32HandlePropertiesKHR;
     TVkMemoryWin32HandlePropertiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR
       pNext:PVkVoid;
       memoryTypeBits:TVkUInt32;
     end;

     PPVkMemoryGetWin32HandleInfoKHR=^PVkMemoryGetWin32HandleInfoKHR;
     PVkMemoryGetWin32HandleInfoKHR=^TVkMemoryGetWin32HandleInfoKHR;
     TVkMemoryGetWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       memory:TVkDeviceMemory;
       handleType:TVkExternalMemoryHandleTypeFlagBits;
     end;

     PPVkImportMemoryFdInfoKHR=^PVkImportMemoryFdInfoKHR;
     PVkImportMemoryFdInfoKHR=^TVkImportMemoryFdInfoKHR;
     TVkImportMemoryFdInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR
       pNext:PVkVoid;
       handleType:TVkExternalMemoryHandleTypeFlagBits;
       fd:TVkInt32;
     end;

     PPVkMemoryFdPropertiesKHR=^PVkMemoryFdPropertiesKHR;
     PVkMemoryFdPropertiesKHR=^TVkMemoryFdPropertiesKHR;
     TVkMemoryFdPropertiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR
       pNext:PVkVoid;
       memoryTypeBits:TVkUInt32;
     end;

     PPVkMemoryGetFdInfoKHR=^PVkMemoryGetFdInfoKHR;
     PVkMemoryGetFdInfoKHR=^TVkMemoryGetFdInfoKHR;
     TVkMemoryGetFdInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR
       pNext:PVkVoid;
       memory:TVkDeviceMemory;
       handleType:TVkExternalMemoryHandleTypeFlagBits;
     end;

     PPVkWin32KeyedMutexAcquireReleaseInfoKHR=^PVkWin32KeyedMutexAcquireReleaseInfoKHR;
     PVkWin32KeyedMutexAcquireReleaseInfoKHR=^TVkWin32KeyedMutexAcquireReleaseInfoKHR;
     TVkWin32KeyedMutexAcquireReleaseInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR
       pNext:PVkVoid;
       acquireCount:TVkUInt32;
       pAcquireSyncs:PVkDeviceMemory;
       pAcquireKeys:PVkUInt64;
       pAcquireTimeouts:PVkUInt32;
       releaseCount:TVkUInt32;
       pReleaseSyncs:PVkDeviceMemory;
       pReleaseKeys:PVkUInt64;
     end;

     PPVkPhysicalDeviceExternalSemaphoreInfo=^PVkPhysicalDeviceExternalSemaphoreInfo;
     PVkPhysicalDeviceExternalSemaphoreInfo=^TVkPhysicalDeviceExternalSemaphoreInfo;
     TVkPhysicalDeviceExternalSemaphoreInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO
       pNext:PVkVoid;
       handleType:TVkExternalSemaphoreHandleTypeFlagBits;
     end;

     PPVkPhysicalDeviceExternalSemaphoreInfoKHR=^PVkPhysicalDeviceExternalSemaphoreInfoKHR;
     PVkPhysicalDeviceExternalSemaphoreInfoKHR=^TVkPhysicalDeviceExternalSemaphoreInfoKHR;
     TVkPhysicalDeviceExternalSemaphoreInfoKHR=TVkPhysicalDeviceExternalSemaphoreInfo;

     PPVkExternalSemaphoreProperties=^PVkExternalSemaphoreProperties;
     PVkExternalSemaphoreProperties=^TVkExternalSemaphoreProperties;
     TVkExternalSemaphoreProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES
       pNext:PVkVoid;
       exportFromImportedHandleTypes:TVkExternalSemaphoreHandleTypeFlags;
       compatibleHandleTypes:TVkExternalSemaphoreHandleTypeFlags;
       externalSemaphoreFeatures:TVkExternalSemaphoreFeatureFlags;
     end;

     PPVkExternalSemaphorePropertiesKHR=^PVkExternalSemaphorePropertiesKHR;
     PVkExternalSemaphorePropertiesKHR=^TVkExternalSemaphorePropertiesKHR;
     TVkExternalSemaphorePropertiesKHR=TVkExternalSemaphoreProperties;

     PPVkExportSemaphoreCreateInfo=^PVkExportSemaphoreCreateInfo;
     PVkExportSemaphoreCreateInfo=^TVkExportSemaphoreCreateInfo;
     TVkExportSemaphoreCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO
       pNext:PVkVoid;
       handleTypes:TVkExternalSemaphoreHandleTypeFlags;
     end;

     PPVkExportSemaphoreCreateInfoKHR=^PVkExportSemaphoreCreateInfoKHR;
     PVkExportSemaphoreCreateInfoKHR=^TVkExportSemaphoreCreateInfoKHR;
     TVkExportSemaphoreCreateInfoKHR=TVkExportSemaphoreCreateInfo;

     PPVkImportSemaphoreWin32HandleInfoKHR=^PVkImportSemaphoreWin32HandleInfoKHR;
     PVkImportSemaphoreWin32HandleInfoKHR=^TVkImportSemaphoreWin32HandleInfoKHR;
     TVkImportSemaphoreWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       semaphore:TVkSemaphore;
       flags:TVkSemaphoreImportFlags;
       handleType:TVkExternalSemaphoreHandleTypeFlagBits;
       handle:THANDLE;
       name:PWideChar;
     end;

{$ifdef Windows}
     PPVkExportSemaphoreWin32HandleInfoKHR=^PVkExportSemaphoreWin32HandleInfoKHR;
     PVkExportSemaphoreWin32HandleInfoKHR=^TVkExportSemaphoreWin32HandleInfoKHR;
     TVkExportSemaphoreWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       pAttributes:PSecurityAttributes;
       dwAccess:TVkUInt32;
       name:PWideChar;
     end;
{$endif}

     PPVkD3D12FenceSubmitInfoKHR=^PVkD3D12FenceSubmitInfoKHR;
     PVkD3D12FenceSubmitInfoKHR=^TVkD3D12FenceSubmitInfoKHR;
     TVkD3D12FenceSubmitInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR
       pNext:PVkVoid;
       waitSemaphoreValuesCount:TVkUInt32;
       pWaitSemaphoreValues:PVkUInt64;
       signalSemaphoreValuesCount:TVkUInt32;
       pSignalSemaphoreValues:PVkUInt64;
     end;

     PPVkSemaphoreGetWin32HandleInfoKHR=^PVkSemaphoreGetWin32HandleInfoKHR;
     PVkSemaphoreGetWin32HandleInfoKHR=^TVkSemaphoreGetWin32HandleInfoKHR;
     TVkSemaphoreGetWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       semaphore:TVkSemaphore;
       handleType:TVkExternalSemaphoreHandleTypeFlagBits;
     end;

     PPVkImportSemaphoreFdInfoKHR=^PVkImportSemaphoreFdInfoKHR;
     PVkImportSemaphoreFdInfoKHR=^TVkImportSemaphoreFdInfoKHR;
     TVkImportSemaphoreFdInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR
       pNext:PVkVoid;
       semaphore:TVkSemaphore;
       flags:TVkSemaphoreImportFlags;
       handleType:TVkExternalSemaphoreHandleTypeFlagBits;
       fd:TVkInt32;
     end;

     PPVkSemaphoreGetFdInfoKHR=^PVkSemaphoreGetFdInfoKHR;
     PVkSemaphoreGetFdInfoKHR=^TVkSemaphoreGetFdInfoKHR;
     TVkSemaphoreGetFdInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR
       pNext:PVkVoid;
       semaphore:TVkSemaphore;
       handleType:TVkExternalSemaphoreHandleTypeFlagBits;
     end;

     PPVkPhysicalDeviceExternalFenceInfo=^PVkPhysicalDeviceExternalFenceInfo;
     PVkPhysicalDeviceExternalFenceInfo=^TVkPhysicalDeviceExternalFenceInfo;
     TVkPhysicalDeviceExternalFenceInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO
       pNext:PVkVoid;
       handleType:TVkExternalFenceHandleTypeFlagBits;
     end;

     PPVkPhysicalDeviceExternalFenceInfoKHR=^PVkPhysicalDeviceExternalFenceInfoKHR;
     PVkPhysicalDeviceExternalFenceInfoKHR=^TVkPhysicalDeviceExternalFenceInfoKHR;
     TVkPhysicalDeviceExternalFenceInfoKHR=TVkPhysicalDeviceExternalFenceInfo;

     PPVkExternalFenceProperties=^PVkExternalFenceProperties;
     PVkExternalFenceProperties=^TVkExternalFenceProperties;
     TVkExternalFenceProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES
       pNext:PVkVoid;
       exportFromImportedHandleTypes:TVkExternalFenceHandleTypeFlags;
       compatibleHandleTypes:TVkExternalFenceHandleTypeFlags;
       externalFenceFeatures:TVkExternalFenceFeatureFlags;
     end;

     PPVkExternalFencePropertiesKHR=^PVkExternalFencePropertiesKHR;
     PVkExternalFencePropertiesKHR=^TVkExternalFencePropertiesKHR;
     TVkExternalFencePropertiesKHR=TVkExternalFenceProperties;

     PPVkExportFenceCreateInfo=^PVkExportFenceCreateInfo;
     PVkExportFenceCreateInfo=^TVkExportFenceCreateInfo;
     TVkExportFenceCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO
       pNext:PVkVoid;
       handleTypes:TVkExternalFenceHandleTypeFlags;
     end;

     PPVkExportFenceCreateInfoKHR=^PVkExportFenceCreateInfoKHR;
     PVkExportFenceCreateInfoKHR=^TVkExportFenceCreateInfoKHR;
     TVkExportFenceCreateInfoKHR=TVkExportFenceCreateInfo;

     PPVkImportFenceWin32HandleInfoKHR=^PVkImportFenceWin32HandleInfoKHR;
     PVkImportFenceWin32HandleInfoKHR=^TVkImportFenceWin32HandleInfoKHR;
     TVkImportFenceWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       fence:TVkFence;
       flags:TVkFenceImportFlags;
       handleType:TVkExternalFenceHandleTypeFlagBits;
       handle:THANDLE;
       name:PWideChar;
     end;

{$ifdef Windows}
     PPVkExportFenceWin32HandleInfoKHR=^PVkExportFenceWin32HandleInfoKHR;
     PVkExportFenceWin32HandleInfoKHR=^TVkExportFenceWin32HandleInfoKHR;
     TVkExportFenceWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       pAttributes:PSecurityAttributes;
       dwAccess:TVkUInt32;
       name:PWideChar;
     end;
{$endif}

     PPVkFenceGetWin32HandleInfoKHR=^PVkFenceGetWin32HandleInfoKHR;
     PVkFenceGetWin32HandleInfoKHR=^TVkFenceGetWin32HandleInfoKHR;
     TVkFenceGetWin32HandleInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR
       pNext:PVkVoid;
       fence:TVkFence;
       handleType:TVkExternalFenceHandleTypeFlagBits;
     end;

     PPVkImportFenceFdInfoKHR=^PVkImportFenceFdInfoKHR;
     PVkImportFenceFdInfoKHR=^TVkImportFenceFdInfoKHR;
     TVkImportFenceFdInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR
       pNext:PVkVoid;
       fence:TVkFence;
       flags:TVkFenceImportFlags;
       handleType:TVkExternalFenceHandleTypeFlagBits;
       fd:TVkInt32;
     end;

     PPVkFenceGetFdInfoKHR=^PVkFenceGetFdInfoKHR;
     PVkFenceGetFdInfoKHR=^TVkFenceGetFdInfoKHR;
     TVkFenceGetFdInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR
       pNext:PVkVoid;
       fence:TVkFence;
       handleType:TVkExternalFenceHandleTypeFlagBits;
     end;

     PPVkPhysicalDeviceMultiviewFeatures=^PVkPhysicalDeviceMultiviewFeatures;
     PVkPhysicalDeviceMultiviewFeatures=^TVkPhysicalDeviceMultiviewFeatures;
     TVkPhysicalDeviceMultiviewFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES
       pNext:PVkVoid;
       multiview:TVkBool32;
       multiviewGeometryShader:TVkBool32;
       multiviewTessellationShader:TVkBool32;
     end;

     PPVkPhysicalDeviceMultiviewFeaturesKHR=^PVkPhysicalDeviceMultiviewFeaturesKHR;
     PVkPhysicalDeviceMultiviewFeaturesKHR=^TVkPhysicalDeviceMultiviewFeaturesKHR;
     TVkPhysicalDeviceMultiviewFeaturesKHR=TVkPhysicalDeviceMultiviewFeatures;

     PPVkPhysicalDeviceMultiviewProperties=^PVkPhysicalDeviceMultiviewProperties;
     PVkPhysicalDeviceMultiviewProperties=^TVkPhysicalDeviceMultiviewProperties;
     TVkPhysicalDeviceMultiviewProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES
       pNext:PVkVoid;
       maxMultiviewViewCount:TVkUInt32;
       maxMultiviewInstanceIndex:TVkUInt32;
     end;

     PPVkPhysicalDeviceMultiviewPropertiesKHR=^PVkPhysicalDeviceMultiviewPropertiesKHR;
     PVkPhysicalDeviceMultiviewPropertiesKHR=^TVkPhysicalDeviceMultiviewPropertiesKHR;
     TVkPhysicalDeviceMultiviewPropertiesKHR=TVkPhysicalDeviceMultiviewProperties;

     PPVkRenderPassMultiviewCreateInfo=^PVkRenderPassMultiviewCreateInfo;
     PVkRenderPassMultiviewCreateInfo=^TVkRenderPassMultiviewCreateInfo;
     TVkRenderPassMultiviewCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO
       pNext:PVkVoid;
       subpassCount:TVkUInt32;
       pViewMasks:PVkUInt32;
       dependencyCount:TVkUInt32;
       pViewOffsets:PVkInt32;
       correlationMaskCount:TVkUInt32;
       pCorrelationMasks:PVkUInt32;
     end;

     PPVkRenderPassMultiviewCreateInfoKHR=^PVkRenderPassMultiviewCreateInfoKHR;
     PVkRenderPassMultiviewCreateInfoKHR=^TVkRenderPassMultiviewCreateInfoKHR;
     TVkRenderPassMultiviewCreateInfoKHR=TVkRenderPassMultiviewCreateInfo;

     PPVkSurfaceCapabilities2EXT=^PVkSurfaceCapabilities2EXT;
     PVkSurfaceCapabilities2EXT=^TVkSurfaceCapabilities2EXT;
     TVkSurfaceCapabilities2EXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT
       pNext:PVkVoid;
       minImageCount:TVkUInt32;
       maxImageCount:TVkUInt32;
       currentExtent:TVkExtent2D;
       minImageExtent:TVkExtent2D;
       maxImageExtent:TVkExtent2D;
       maxImageArrayLayers:TVkUInt32;
       supportedTransforms:TVkSurfaceTransformFlagsKHR;
       currentTransform:TVkSurfaceTransformFlagBitsKHR;
       supportedCompositeAlpha:TVkCompositeAlphaFlagsKHR;
       supportedUsageFlags:TVkImageUsageFlags;
       supportedSurfaceCounters:TVkSurfaceCounterFlagsEXT;
     end;

     PPVkDisplayPowerInfoEXT=^PVkDisplayPowerInfoEXT;
     PVkDisplayPowerInfoEXT=^TVkDisplayPowerInfoEXT;
     TVkDisplayPowerInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT
       pNext:PVkVoid;
       powerState:TVkDisplayPowerStateEXT;
     end;

     PPVkDeviceEventInfoEXT=^PVkDeviceEventInfoEXT;
     PVkDeviceEventInfoEXT=^TVkDeviceEventInfoEXT;
     TVkDeviceEventInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT
       pNext:PVkVoid;
       deviceEvent:TVkDeviceEventTypeEXT;
     end;

     PPVkDisplayEventInfoEXT=^PVkDisplayEventInfoEXT;
     PVkDisplayEventInfoEXT=^TVkDisplayEventInfoEXT;
     TVkDisplayEventInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT
       pNext:PVkVoid;
       displayEvent:TVkDisplayEventTypeEXT;
     end;

     PPVkSwapchainCounterCreateInfoEXT=^PVkSwapchainCounterCreateInfoEXT;
     PVkSwapchainCounterCreateInfoEXT=^TVkSwapchainCounterCreateInfoEXT;
     TVkSwapchainCounterCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT
       pNext:PVkVoid;
       surfaceCounters:TVkSurfaceCounterFlagsEXT;
     end;

     PPVkPhysicalDeviceGroupProperties=^PVkPhysicalDeviceGroupProperties;
     PVkPhysicalDeviceGroupProperties=^TVkPhysicalDeviceGroupProperties;
     TVkPhysicalDeviceGroupProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES
       pNext:PVkVoid;
       physicalDeviceCount:TVkUInt32;
       physicalDevices:array[0..VK_MAX_DEVICE_GROUP_SIZE-1] of TVkPhysicalDevice;
       subsetAllocation:TVkBool32;
     end;

     PPVkPhysicalDeviceGroupPropertiesKHR=^PVkPhysicalDeviceGroupPropertiesKHR;
     PVkPhysicalDeviceGroupPropertiesKHR=^TVkPhysicalDeviceGroupPropertiesKHR;
     TVkPhysicalDeviceGroupPropertiesKHR=TVkPhysicalDeviceGroupProperties;

     PPVkMemoryAllocateFlagsInfo=^PVkMemoryAllocateFlagsInfo;
     PVkMemoryAllocateFlagsInfo=^TVkMemoryAllocateFlagsInfo;
     TVkMemoryAllocateFlagsInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO
       pNext:PVkVoid;
       flags:TVkMemoryAllocateFlags;
       deviceMask:TVkUInt32;
     end;

     PPVkMemoryAllocateFlagsInfoKHR=^PVkMemoryAllocateFlagsInfoKHR;
     PVkMemoryAllocateFlagsInfoKHR=^TVkMemoryAllocateFlagsInfoKHR;
     TVkMemoryAllocateFlagsInfoKHR=TVkMemoryAllocateFlagsInfo;

     PPVkBindBufferMemoryInfo=^PVkBindBufferMemoryInfo;
     PVkBindBufferMemoryInfo=^TVkBindBufferMemoryInfo;
     TVkBindBufferMemoryInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO
       pNext:PVkVoid;
       buffer:TVkBuffer;
       memory:TVkDeviceMemory;
       memoryOffset:TVkDeviceSize;
     end;

     PPVkBindBufferMemoryInfoKHR=^PVkBindBufferMemoryInfoKHR;
     PVkBindBufferMemoryInfoKHR=^TVkBindBufferMemoryInfoKHR;
     TVkBindBufferMemoryInfoKHR=TVkBindBufferMemoryInfo;

     PPVkBindBufferMemoryDeviceGroupInfo=^PVkBindBufferMemoryDeviceGroupInfo;
     PVkBindBufferMemoryDeviceGroupInfo=^TVkBindBufferMemoryDeviceGroupInfo;
     TVkBindBufferMemoryDeviceGroupInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO
       pNext:PVkVoid;
       deviceIndexCount:TVkUInt32;
       pDeviceIndices:PVkUInt32;
     end;

     PPVkBindBufferMemoryDeviceGroupInfoKHR=^PVkBindBufferMemoryDeviceGroupInfoKHR;
     PVkBindBufferMemoryDeviceGroupInfoKHR=^TVkBindBufferMemoryDeviceGroupInfoKHR;
     TVkBindBufferMemoryDeviceGroupInfoKHR=TVkBindBufferMemoryDeviceGroupInfo;

     PPVkBindImageMemoryInfo=^PVkBindImageMemoryInfo;
     PVkBindImageMemoryInfo=^TVkBindImageMemoryInfo;
     TVkBindImageMemoryInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO
       pNext:PVkVoid;
       image:TVkImage;
       memory:TVkDeviceMemory;
       memoryOffset:TVkDeviceSize;
     end;

     PPVkBindImageMemoryInfoKHR=^PVkBindImageMemoryInfoKHR;
     PVkBindImageMemoryInfoKHR=^TVkBindImageMemoryInfoKHR;
     TVkBindImageMemoryInfoKHR=TVkBindImageMemoryInfo;

     PPVkBindImageMemoryDeviceGroupInfo=^PVkBindImageMemoryDeviceGroupInfo;
     PVkBindImageMemoryDeviceGroupInfo=^TVkBindImageMemoryDeviceGroupInfo;
     TVkBindImageMemoryDeviceGroupInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO
       pNext:PVkVoid;
       deviceIndexCount:TVkUInt32;
       pDeviceIndices:PVkUInt32;
       splitInstanceBindRegionCount:TVkUInt32;
       pSplitInstanceBindRegions:PVkRect2D;
     end;

     PPVkBindImageMemoryDeviceGroupInfoKHR=^PVkBindImageMemoryDeviceGroupInfoKHR;
     PVkBindImageMemoryDeviceGroupInfoKHR=^TVkBindImageMemoryDeviceGroupInfoKHR;
     TVkBindImageMemoryDeviceGroupInfoKHR=TVkBindImageMemoryDeviceGroupInfo;

     PPVkDeviceGroupRenderPassBeginInfo=^PVkDeviceGroupRenderPassBeginInfo;
     PVkDeviceGroupRenderPassBeginInfo=^TVkDeviceGroupRenderPassBeginInfo;
     TVkDeviceGroupRenderPassBeginInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO
       pNext:PVkVoid;
       deviceMask:TVkUInt32;
       deviceRenderAreaCount:TVkUInt32;
       pDeviceRenderAreas:PVkRect2D;
     end;

     PPVkDeviceGroupRenderPassBeginInfoKHR=^PVkDeviceGroupRenderPassBeginInfoKHR;
     PVkDeviceGroupRenderPassBeginInfoKHR=^TVkDeviceGroupRenderPassBeginInfoKHR;
     TVkDeviceGroupRenderPassBeginInfoKHR=TVkDeviceGroupRenderPassBeginInfo;

     PPVkDeviceGroupCommandBufferBeginInfo=^PVkDeviceGroupCommandBufferBeginInfo;
     PVkDeviceGroupCommandBufferBeginInfo=^TVkDeviceGroupCommandBufferBeginInfo;
     TVkDeviceGroupCommandBufferBeginInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO
       pNext:PVkVoid;
       deviceMask:TVkUInt32;
     end;

     PPVkDeviceGroupCommandBufferBeginInfoKHR=^PVkDeviceGroupCommandBufferBeginInfoKHR;
     PVkDeviceGroupCommandBufferBeginInfoKHR=^TVkDeviceGroupCommandBufferBeginInfoKHR;
     TVkDeviceGroupCommandBufferBeginInfoKHR=TVkDeviceGroupCommandBufferBeginInfo;

     PPVkDeviceGroupSubmitInfo=^PVkDeviceGroupSubmitInfo;
     PVkDeviceGroupSubmitInfo=^TVkDeviceGroupSubmitInfo;
     TVkDeviceGroupSubmitInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO
       pNext:PVkVoid;
       waitSemaphoreCount:TVkUInt32;
       pWaitSemaphoreDeviceIndices:PVkUInt32;
       commandBufferCount:TVkUInt32;
       pCommandBufferDeviceMasks:PVkUInt32;
       signalSemaphoreCount:TVkUInt32;
       pSignalSemaphoreDeviceIndices:PVkUInt32;
     end;

     PPVkDeviceGroupSubmitInfoKHR=^PVkDeviceGroupSubmitInfoKHR;
     PVkDeviceGroupSubmitInfoKHR=^TVkDeviceGroupSubmitInfoKHR;
     TVkDeviceGroupSubmitInfoKHR=TVkDeviceGroupSubmitInfo;

     PPVkDeviceGroupBindSparseInfo=^PVkDeviceGroupBindSparseInfo;
     PVkDeviceGroupBindSparseInfo=^TVkDeviceGroupBindSparseInfo;
     TVkDeviceGroupBindSparseInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO
       pNext:PVkVoid;
       resourceDeviceIndex:TVkUInt32;
       memoryDeviceIndex:TVkUInt32;
     end;

     PPVkDeviceGroupBindSparseInfoKHR=^PVkDeviceGroupBindSparseInfoKHR;
     PVkDeviceGroupBindSparseInfoKHR=^TVkDeviceGroupBindSparseInfoKHR;
     TVkDeviceGroupBindSparseInfoKHR=TVkDeviceGroupBindSparseInfo;

     PPVkDeviceGroupPresentCapabilitiesKHR=^PVkDeviceGroupPresentCapabilitiesKHR;
     PVkDeviceGroupPresentCapabilitiesKHR=^TVkDeviceGroupPresentCapabilitiesKHR;
     TVkDeviceGroupPresentCapabilitiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR
       pNext:PVkVoid;
       presentMask:array[0..VK_MAX_DEVICE_GROUP_SIZE-1] of TVkUInt32;
       modes:TVkDeviceGroupPresentModeFlagsKHR;
     end;

     PPVkImageSwapchainCreateInfoKHR=^PVkImageSwapchainCreateInfoKHR;
     PVkImageSwapchainCreateInfoKHR=^TVkImageSwapchainCreateInfoKHR;
     TVkImageSwapchainCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR
       pNext:PVkVoid;
       swapchain:TVkSwapchainKHR;
     end;

     PPVkBindImageMemorySwapchainInfoKHR=^PVkBindImageMemorySwapchainInfoKHR;
     PVkBindImageMemorySwapchainInfoKHR=^TVkBindImageMemorySwapchainInfoKHR;
     TVkBindImageMemorySwapchainInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR
       pNext:PVkVoid;
       swapchain:TVkSwapchainKHR;
       imageIndex:TVkUInt32;
     end;

     PPVkAcquireNextImageInfoKHR=^PVkAcquireNextImageInfoKHR;
     PVkAcquireNextImageInfoKHR=^TVkAcquireNextImageInfoKHR;
     TVkAcquireNextImageInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR
       pNext:PVkVoid;
       swapchain:TVkSwapchainKHR;
       timeout:TVkUInt64;
       semaphore:TVkSemaphore;
       fence:TVkFence;
       deviceMask:TVkUInt32;
     end;

     PPVkDeviceGroupPresentInfoKHR=^PVkDeviceGroupPresentInfoKHR;
     PVkDeviceGroupPresentInfoKHR=^TVkDeviceGroupPresentInfoKHR;
     TVkDeviceGroupPresentInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR
       pNext:PVkVoid;
       swapchainCount:TVkUInt32;
       pDeviceMasks:PVkUInt32;
       mode:TVkDeviceGroupPresentModeFlagBitsKHR;
     end;

     PPVkDeviceGroupDeviceCreateInfo=^PVkDeviceGroupDeviceCreateInfo;
     PVkDeviceGroupDeviceCreateInfo=^TVkDeviceGroupDeviceCreateInfo;
     TVkDeviceGroupDeviceCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO
       pNext:PVkVoid;
       physicalDeviceCount:TVkUInt32;
       pPhysicalDevices:PVkPhysicalDevice;
     end;

     PPVkDeviceGroupDeviceCreateInfoKHR=^PVkDeviceGroupDeviceCreateInfoKHR;
     PVkDeviceGroupDeviceCreateInfoKHR=^TVkDeviceGroupDeviceCreateInfoKHR;
     TVkDeviceGroupDeviceCreateInfoKHR=TVkDeviceGroupDeviceCreateInfo;

     PPVkDeviceGroupSwapchainCreateInfoKHR=^PVkDeviceGroupSwapchainCreateInfoKHR;
     PVkDeviceGroupSwapchainCreateInfoKHR=^TVkDeviceGroupSwapchainCreateInfoKHR;
     TVkDeviceGroupSwapchainCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR
       pNext:PVkVoid;
       modes:TVkDeviceGroupPresentModeFlagsKHR;
     end;

     PPVkDescriptorUpdateTemplateEntry=^PVkDescriptorUpdateTemplateEntry;
     PVkDescriptorUpdateTemplateEntry=^TVkDescriptorUpdateTemplateEntry;
     TVkDescriptorUpdateTemplateEntry=record
       dstBinding:TVkUInt32;
       dstArrayElement:TVkUInt32;
       descriptorCount:TVkUInt32;
       descriptorType:TVkDescriptorType;
       offset:TVkSize;
       stride:TVkSize;
     end;

     PPVkDescriptorUpdateTemplateEntryKHR=^PVkDescriptorUpdateTemplateEntryKHR;
     PVkDescriptorUpdateTemplateEntryKHR=^TVkDescriptorUpdateTemplateEntryKHR;
     TVkDescriptorUpdateTemplateEntryKHR=TVkDescriptorUpdateTemplateEntry;

     PPVkDescriptorUpdateTemplateCreateInfo=^PVkDescriptorUpdateTemplateCreateInfo;
     PVkDescriptorUpdateTemplateCreateInfo=^TVkDescriptorUpdateTemplateCreateInfo;
     TVkDescriptorUpdateTemplateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO
       pNext:PVkVoid;
       flags:TVkDescriptorUpdateTemplateCreateFlags;
       descriptorUpdateEntryCount:TVkUInt32;
       pDescriptorUpdateEntries:PVkDescriptorUpdateTemplateEntry;
       templateType:TVkDescriptorUpdateTemplateType;
       descriptorSetLayout:TVkDescriptorSetLayout;
       pipelineBindPoint:TVkPipelineBindPoint;
       pipelineLayout:TVkPipelineLayout;
       set_:TVkUInt32;
     end;

     PPVkDescriptorUpdateTemplateCreateInfoKHR=^PVkDescriptorUpdateTemplateCreateInfoKHR;
     PVkDescriptorUpdateTemplateCreateInfoKHR=^TVkDescriptorUpdateTemplateCreateInfoKHR;
     TVkDescriptorUpdateTemplateCreateInfoKHR=TVkDescriptorUpdateTemplateCreateInfo;

     PPVkXYColorEXT=^PVkXYColorEXT;
     PVkXYColorEXT=^TVkXYColorEXT;
     TVkXYColorEXT=record
       x:TVkFloat;
       y:TVkFloat;
     end;

     PPVkHdrMetadataEXT=^PVkHdrMetadataEXT;
     PVkHdrMetadataEXT=^TVkHdrMetadataEXT;
     TVkHdrMetadataEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_HDR_METADATA_EXT
       pNext:PVkVoid;
       displayPrimaryRed:TVkXYColorEXT;
       displayPrimaryGreen:TVkXYColorEXT;
       displayPrimaryBlue:TVkXYColorEXT;
       whitePoint:TVkXYColorEXT;
       maxLuminance:TVkFloat;
       minLuminance:TVkFloat;
       maxContentLightLevel:TVkFloat;
       maxFrameAverageLightLevel:TVkFloat;
     end;

     PPVkDisplayNativeHdrSurfaceCapabilitiesAMD=^PVkDisplayNativeHdrSurfaceCapabilitiesAMD;
     PVkDisplayNativeHdrSurfaceCapabilitiesAMD=^TVkDisplayNativeHdrSurfaceCapabilitiesAMD;
     TVkDisplayNativeHdrSurfaceCapabilitiesAMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD
       pNext:PVkVoid;
       localDimmingSupport:TVkBool32;
     end;

     PPVkSwapchainDisplayNativeHdrCreateInfoAMD=^PVkSwapchainDisplayNativeHdrCreateInfoAMD;
     PVkSwapchainDisplayNativeHdrCreateInfoAMD=^TVkSwapchainDisplayNativeHdrCreateInfoAMD;
     TVkSwapchainDisplayNativeHdrCreateInfoAMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD
       pNext:PVkVoid;
       localDimmingEnable:TVkBool32;
     end;

     PPVkRefreshCycleDurationGOOGLE=^PVkRefreshCycleDurationGOOGLE;
     PVkRefreshCycleDurationGOOGLE=^TVkRefreshCycleDurationGOOGLE;
     TVkRefreshCycleDurationGOOGLE=record
       refreshDuration:TVkUInt64;
     end;

     PPVkPastPresentationTimingGOOGLE=^PVkPastPresentationTimingGOOGLE;
     PVkPastPresentationTimingGOOGLE=^TVkPastPresentationTimingGOOGLE;
     TVkPastPresentationTimingGOOGLE=record
       presentID:TVkUInt32;
       desiredPresentTime:TVkUInt64;
       actualPresentTime:TVkUInt64;
       earliestPresentTime:TVkUInt64;
       presentMargin:TVkUInt64;
     end;

     PPVkPresentTimeGOOGLE=^PVkPresentTimeGOOGLE;
     PVkPresentTimeGOOGLE=^TVkPresentTimeGOOGLE;
     TVkPresentTimeGOOGLE=record
       presentID:TVkUInt32;
       desiredPresentTime:TVkUInt64;
     end;

     PPVkPresentTimesInfoGOOGLE=^PVkPresentTimesInfoGOOGLE;
     PVkPresentTimesInfoGOOGLE=^TVkPresentTimesInfoGOOGLE;
     TVkPresentTimesInfoGOOGLE=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE
       pNext:PVkVoid;
       swapchainCount:TVkUInt32;
       pTimes:PVkPresentTimeGOOGLE;
     end;

{$ifdef MoltenVK_IOS}
     PPVkIOSSurfaceCreateInfoMVK=^PVkIOSSurfaceCreateInfoMVK;
     PVkIOSSurfaceCreateInfoMVK=^TVkIOSSurfaceCreateInfoMVK;
     TVkIOSSurfaceCreateInfoMVK=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK
       pNext:PVkVoid;
       flags:TVkIOSSurfaceCreateFlagsMVK;
       pView:PVkVoid;
     end;
{$endif}

{$ifdef MoltenVK_MacOS}
     PPVkMacOSSurfaceCreateInfoMVK=^PVkMacOSSurfaceCreateInfoMVK;
     PVkMacOSSurfaceCreateInfoMVK=^TVkMacOSSurfaceCreateInfoMVK;
     TVkMacOSSurfaceCreateInfoMVK=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK
       pNext:PVkVoid;
       flags:TVkMacOSSurfaceCreateFlagsMVK;
       pView:PVkVoid;
     end;
{$endif}

     PPVkMetalSurfaceCreateInfoEXT=^PVkMetalSurfaceCreateInfoEXT;
     PVkMetalSurfaceCreateInfoEXT=^TVkMetalSurfaceCreateInfoEXT;
     TVkMetalSurfaceCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkMetalSurfaceCreateFlagsEXT;
       pLayer:PCAMetalLayer;
     end;

     PPVkViewportWScalingNV=^PVkViewportWScalingNV;
     PVkViewportWScalingNV=^TVkViewportWScalingNV;
     TVkViewportWScalingNV=record
       xcoeff:TVkFloat;
       ycoeff:TVkFloat;
     end;

     PPVkPipelineViewportWScalingStateCreateInfoNV=^PVkPipelineViewportWScalingStateCreateInfoNV;
     PVkPipelineViewportWScalingStateCreateInfoNV=^TVkPipelineViewportWScalingStateCreateInfoNV;
     TVkPipelineViewportWScalingStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       viewportWScalingEnable:TVkBool32;
       viewportCount:TVkUInt32;
       pViewportWScalings:PVkViewportWScalingNV;
     end;

     PPVkViewportSwizzleNV=^PVkViewportSwizzleNV;
     PVkViewportSwizzleNV=^TVkViewportSwizzleNV;
     TVkViewportSwizzleNV=record
       x:TVkViewportCoordinateSwizzleNV;
       y:TVkViewportCoordinateSwizzleNV;
       z:TVkViewportCoordinateSwizzleNV;
       w:TVkViewportCoordinateSwizzleNV;
     end;

     PPVkPipelineViewportSwizzleStateCreateInfoNV=^PVkPipelineViewportSwizzleStateCreateInfoNV;
     PVkPipelineViewportSwizzleStateCreateInfoNV=^TVkPipelineViewportSwizzleStateCreateInfoNV;
     TVkPipelineViewportSwizzleStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       flags:TVkPipelineViewportSwizzleStateCreateFlagsNV;
       viewportCount:TVkUInt32;
       pViewportSwizzles:PVkViewportSwizzleNV;
     end;

     PPVkPhysicalDeviceDiscardRectanglePropertiesEXT=^PVkPhysicalDeviceDiscardRectanglePropertiesEXT;
     PVkPhysicalDeviceDiscardRectanglePropertiesEXT=^TVkPhysicalDeviceDiscardRectanglePropertiesEXT;
     TVkPhysicalDeviceDiscardRectanglePropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT
       pNext:PVkVoid;
       maxDiscardRectangles:TVkUInt32;
     end;

     PPVkPipelineDiscardRectangleStateCreateInfoEXT=^PVkPipelineDiscardRectangleStateCreateInfoEXT;
     PVkPipelineDiscardRectangleStateCreateInfoEXT=^TVkPipelineDiscardRectangleStateCreateInfoEXT;
     TVkPipelineDiscardRectangleStateCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkPipelineDiscardRectangleStateCreateFlagsEXT;
       discardRectangleMode:TVkDiscardRectangleModeEXT;
       discardRectangleCount:TVkUInt32;
       pDiscardRectangles:PVkRect2D;
     end;

     PPVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX=^PVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
     PVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX=^TVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
     TVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX
       pNext:PVkVoid;
       perViewPositionAllComponents:TVkBool32;
     end;

     PPVkInputAttachmentAspectReference=^PVkInputAttachmentAspectReference;
     PVkInputAttachmentAspectReference=^TVkInputAttachmentAspectReference;
     TVkInputAttachmentAspectReference=record
       subpass:TVkUInt32;
       inputAttachmentIndex:TVkUInt32;
       aspectMask:TVkImageAspectFlags;
     end;

     PPVkInputAttachmentAspectReferenceKHR=^PVkInputAttachmentAspectReferenceKHR;
     PVkInputAttachmentAspectReferenceKHR=^TVkInputAttachmentAspectReferenceKHR;
     TVkInputAttachmentAspectReferenceKHR=TVkInputAttachmentAspectReference;

     PPVkRenderPassInputAttachmentAspectCreateInfo=^PVkRenderPassInputAttachmentAspectCreateInfo;
     PVkRenderPassInputAttachmentAspectCreateInfo=^TVkRenderPassInputAttachmentAspectCreateInfo;
     TVkRenderPassInputAttachmentAspectCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO
       pNext:PVkVoid;
       aspectReferenceCount:TVkUInt32;
       pAspectReferences:PVkInputAttachmentAspectReference;
     end;

     PPVkRenderPassInputAttachmentAspectCreateInfoKHR=^PVkRenderPassInputAttachmentAspectCreateInfoKHR;
     PVkRenderPassInputAttachmentAspectCreateInfoKHR=^TVkRenderPassInputAttachmentAspectCreateInfoKHR;
     TVkRenderPassInputAttachmentAspectCreateInfoKHR=TVkRenderPassInputAttachmentAspectCreateInfo;

     PPVkPhysicalDeviceSurfaceInfo2KHR=^PVkPhysicalDeviceSurfaceInfo2KHR;
     PVkPhysicalDeviceSurfaceInfo2KHR=^TVkPhysicalDeviceSurfaceInfo2KHR;
     TVkPhysicalDeviceSurfaceInfo2KHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR
       pNext:PVkVoid;
       surface:TVkSurfaceKHR;
     end;

     PPVkSurfaceCapabilities2KHR=^PVkSurfaceCapabilities2KHR;
     PVkSurfaceCapabilities2KHR=^TVkSurfaceCapabilities2KHR;
     TVkSurfaceCapabilities2KHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR
       pNext:PVkVoid;
       surfaceCapabilities:TVkSurfaceCapabilitiesKHR;
     end;

     PPVkSurfaceFormat2KHR=^PVkSurfaceFormat2KHR;
     PVkSurfaceFormat2KHR=^TVkSurfaceFormat2KHR;
     TVkSurfaceFormat2KHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR
       pNext:PVkVoid;
       surfaceFormat:TVkSurfaceFormatKHR;
     end;

     PPVkDisplayProperties2KHR=^PVkDisplayProperties2KHR;
     PVkDisplayProperties2KHR=^TVkDisplayProperties2KHR;
     TVkDisplayProperties2KHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR
       pNext:PVkVoid;
       displayProperties:TVkDisplayPropertiesKHR;
     end;

     PPVkDisplayPlaneProperties2KHR=^PVkDisplayPlaneProperties2KHR;
     PVkDisplayPlaneProperties2KHR=^TVkDisplayPlaneProperties2KHR;
     TVkDisplayPlaneProperties2KHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR
       pNext:PVkVoid;
       displayPlaneProperties:TVkDisplayPlanePropertiesKHR;
     end;

     PPVkDisplayModeProperties2KHR=^PVkDisplayModeProperties2KHR;
     PVkDisplayModeProperties2KHR=^TVkDisplayModeProperties2KHR;
     TVkDisplayModeProperties2KHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR
       pNext:PVkVoid;
       displayModeProperties:TVkDisplayModePropertiesKHR;
     end;

     PPVkDisplayPlaneInfo2KHR=^PVkDisplayPlaneInfo2KHR;
     PVkDisplayPlaneInfo2KHR=^TVkDisplayPlaneInfo2KHR;
     TVkDisplayPlaneInfo2KHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR
       pNext:PVkVoid;
       mode:TVkDisplayModeKHR;
       planeIndex:TVkUInt32;
     end;

     PPVkDisplayPlaneCapabilities2KHR=^PVkDisplayPlaneCapabilities2KHR;
     PVkDisplayPlaneCapabilities2KHR=^TVkDisplayPlaneCapabilities2KHR;
     TVkDisplayPlaneCapabilities2KHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR
       pNext:PVkVoid;
       capabilities:TVkDisplayPlaneCapabilitiesKHR;
     end;

     PPVkSharedPresentSurfaceCapabilitiesKHR=^PVkSharedPresentSurfaceCapabilitiesKHR;
     PVkSharedPresentSurfaceCapabilitiesKHR=^TVkSharedPresentSurfaceCapabilitiesKHR;
     TVkSharedPresentSurfaceCapabilitiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR
       pNext:PVkVoid;
       sharedPresentSupportedUsageFlags:TVkImageUsageFlags;
     end;

     PPVkPhysicalDevice16BitStorageFeatures=^PVkPhysicalDevice16BitStorageFeatures;
     PVkPhysicalDevice16BitStorageFeatures=^TVkPhysicalDevice16BitStorageFeatures;
     TVkPhysicalDevice16BitStorageFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
       pNext:PVkVoid;
       storageBuffer16BitAccess:TVkBool32;
       uniformAndStorageBuffer16BitAccess:TVkBool32;
       storagePushConstant16:TVkBool32;
       storageInputOutput16:TVkBool32;
     end;

     PPVkPhysicalDevice16BitStorageFeaturesKHR=^PVkPhysicalDevice16BitStorageFeaturesKHR;
     PVkPhysicalDevice16BitStorageFeaturesKHR=^TVkPhysicalDevice16BitStorageFeaturesKHR;
     TVkPhysicalDevice16BitStorageFeaturesKHR=TVkPhysicalDevice16BitStorageFeatures;

     PPVkPhysicalDeviceSubgroupProperties=^PVkPhysicalDeviceSubgroupProperties;
     PVkPhysicalDeviceSubgroupProperties=^TVkPhysicalDeviceSubgroupProperties;
     TVkPhysicalDeviceSubgroupProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES
       pNext:PVkVoid;
       subgroupSize:TVkUInt32;
       supportedStages:TVkShaderStageFlags;
       supportedOperations:TVkSubgroupFeatureFlags;
       quadOperationsInAllStages:TVkBool32;
     end;

     PPVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures=^PVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
     PVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures=^TVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
     TVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES
       pNext:PVkVoid;
       shaderSubgroupExtendedTypes:TVkBool32;
     end;

     PPVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR=^PVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;
     PVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR=^TVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;
     TVkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR=TVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

     PPVkBufferMemoryRequirementsInfo2=^PVkBufferMemoryRequirementsInfo2;
     PVkBufferMemoryRequirementsInfo2=^TVkBufferMemoryRequirementsInfo2;
     TVkBufferMemoryRequirementsInfo2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2
       pNext:PVkVoid;
       buffer:TVkBuffer;
     end;

     PPVkBufferMemoryRequirementsInfo2KHR=^PVkBufferMemoryRequirementsInfo2KHR;
     PVkBufferMemoryRequirementsInfo2KHR=^TVkBufferMemoryRequirementsInfo2KHR;
     TVkBufferMemoryRequirementsInfo2KHR=TVkBufferMemoryRequirementsInfo2;

     PPVkImageMemoryRequirementsInfo2=^PVkImageMemoryRequirementsInfo2;
     PVkImageMemoryRequirementsInfo2=^TVkImageMemoryRequirementsInfo2;
     TVkImageMemoryRequirementsInfo2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2
       pNext:PVkVoid;
       image:TVkImage;
     end;

     PPVkImageMemoryRequirementsInfo2KHR=^PVkImageMemoryRequirementsInfo2KHR;
     PVkImageMemoryRequirementsInfo2KHR=^TVkImageMemoryRequirementsInfo2KHR;
     TVkImageMemoryRequirementsInfo2KHR=TVkImageMemoryRequirementsInfo2;

     PPVkImageSparseMemoryRequirementsInfo2=^PVkImageSparseMemoryRequirementsInfo2;
     PVkImageSparseMemoryRequirementsInfo2=^TVkImageSparseMemoryRequirementsInfo2;
     TVkImageSparseMemoryRequirementsInfo2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2
       pNext:PVkVoid;
       image:TVkImage;
     end;

     PPVkImageSparseMemoryRequirementsInfo2KHR=^PVkImageSparseMemoryRequirementsInfo2KHR;
     PVkImageSparseMemoryRequirementsInfo2KHR=^TVkImageSparseMemoryRequirementsInfo2KHR;
     TVkImageSparseMemoryRequirementsInfo2KHR=TVkImageSparseMemoryRequirementsInfo2;

     PPVkMemoryRequirements2=^PVkMemoryRequirements2;
     PVkMemoryRequirements2=^TVkMemoryRequirements2;
     TVkMemoryRequirements2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2
       pNext:PVkVoid;
       memoryRequirements:TVkMemoryRequirements;
     end;

     PPVkMemoryRequirements2KHR=^PVkMemoryRequirements2KHR;
     PVkMemoryRequirements2KHR=^TVkMemoryRequirements2KHR;
     TVkMemoryRequirements2KHR=TVkMemoryRequirements2;

     PPVkSparseImageMemoryRequirements2=^PVkSparseImageMemoryRequirements2;
     PVkSparseImageMemoryRequirements2=^TVkSparseImageMemoryRequirements2;
     TVkSparseImageMemoryRequirements2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2
       pNext:PVkVoid;
       memoryRequirements:TVkSparseImageMemoryRequirements;
     end;

     PPVkSparseImageMemoryRequirements2KHR=^PVkSparseImageMemoryRequirements2KHR;
     PVkSparseImageMemoryRequirements2KHR=^TVkSparseImageMemoryRequirements2KHR;
     TVkSparseImageMemoryRequirements2KHR=TVkSparseImageMemoryRequirements2;

     PPVkPhysicalDevicePointClippingProperties=^PVkPhysicalDevicePointClippingProperties;
     PVkPhysicalDevicePointClippingProperties=^TVkPhysicalDevicePointClippingProperties;
     TVkPhysicalDevicePointClippingProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES
       pNext:PVkVoid;
       pointClippingBehavior:TVkPointClippingBehavior;
     end;

     PPVkPhysicalDevicePointClippingPropertiesKHR=^PVkPhysicalDevicePointClippingPropertiesKHR;
     PVkPhysicalDevicePointClippingPropertiesKHR=^TVkPhysicalDevicePointClippingPropertiesKHR;
     TVkPhysicalDevicePointClippingPropertiesKHR=TVkPhysicalDevicePointClippingProperties;

     PPVkMemoryDedicatedRequirements=^PVkMemoryDedicatedRequirements;
     PVkMemoryDedicatedRequirements=^TVkMemoryDedicatedRequirements;
     TVkMemoryDedicatedRequirements=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS
       pNext:PVkVoid;
       prefersDedicatedAllocation:TVkBool32;
       requiresDedicatedAllocation:TVkBool32;
     end;

     PPVkMemoryDedicatedRequirementsKHR=^PVkMemoryDedicatedRequirementsKHR;
     PVkMemoryDedicatedRequirementsKHR=^TVkMemoryDedicatedRequirementsKHR;
     TVkMemoryDedicatedRequirementsKHR=TVkMemoryDedicatedRequirements;

     PPVkMemoryDedicatedAllocateInfo=^PVkMemoryDedicatedAllocateInfo;
     PVkMemoryDedicatedAllocateInfo=^TVkMemoryDedicatedAllocateInfo;
     TVkMemoryDedicatedAllocateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO
       pNext:PVkVoid;
       image:TVkImage;
       buffer:TVkBuffer;
     end;

     PPVkMemoryDedicatedAllocateInfoKHR=^PVkMemoryDedicatedAllocateInfoKHR;
     PVkMemoryDedicatedAllocateInfoKHR=^TVkMemoryDedicatedAllocateInfoKHR;
     TVkMemoryDedicatedAllocateInfoKHR=TVkMemoryDedicatedAllocateInfo;

     PPVkImageViewUsageCreateInfo=^PVkImageViewUsageCreateInfo;
     PVkImageViewUsageCreateInfo=^TVkImageViewUsageCreateInfo;
     TVkImageViewUsageCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO
       pNext:PVkVoid;
       usage:TVkImageUsageFlags;
     end;

     PPVkImageViewUsageCreateInfoKHR=^PVkImageViewUsageCreateInfoKHR;
     PVkImageViewUsageCreateInfoKHR=^TVkImageViewUsageCreateInfoKHR;
     TVkImageViewUsageCreateInfoKHR=TVkImageViewUsageCreateInfo;

     PPVkPipelineTessellationDomainOriginStateCreateInfo=^PVkPipelineTessellationDomainOriginStateCreateInfo;
     PVkPipelineTessellationDomainOriginStateCreateInfo=^TVkPipelineTessellationDomainOriginStateCreateInfo;
     TVkPipelineTessellationDomainOriginStateCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO
       pNext:PVkVoid;
       domainOrigin:TVkTessellationDomainOrigin;
     end;

     PPVkPipelineTessellationDomainOriginStateCreateInfoKHR=^PVkPipelineTessellationDomainOriginStateCreateInfoKHR;
     PVkPipelineTessellationDomainOriginStateCreateInfoKHR=^TVkPipelineTessellationDomainOriginStateCreateInfoKHR;
     TVkPipelineTessellationDomainOriginStateCreateInfoKHR=TVkPipelineTessellationDomainOriginStateCreateInfo;

     PPVkSamplerYcbcrConversionInfo=^PVkSamplerYcbcrConversionInfo;
     PVkSamplerYcbcrConversionInfo=^TVkSamplerYcbcrConversionInfo;
     TVkSamplerYcbcrConversionInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO
       pNext:PVkVoid;
       conversion:TVkSamplerYcbcrConversion;
     end;

     PPVkSamplerYcbcrConversionInfoKHR=^PVkSamplerYcbcrConversionInfoKHR;
     PVkSamplerYcbcrConversionInfoKHR=^TVkSamplerYcbcrConversionInfoKHR;
     TVkSamplerYcbcrConversionInfoKHR=TVkSamplerYcbcrConversionInfo;

     PPVkSamplerYcbcrConversionCreateInfo=^PVkSamplerYcbcrConversionCreateInfo;
     PVkSamplerYcbcrConversionCreateInfo=^TVkSamplerYcbcrConversionCreateInfo;
     TVkSamplerYcbcrConversionCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO
       pNext:PVkVoid;
       format:TVkFormat;
       ycbcrModel:TVkSamplerYcbcrModelConversion;
       ycbcrRange:TVkSamplerYcbcrRange;
       components:TVkComponentMapping;
       xChromaOffset:TVkChromaLocation;
       yChromaOffset:TVkChromaLocation;
       chromaFilter:TVkFilter;
       forceExplicitReconstruction:TVkBool32;
     end;

     PPVkSamplerYcbcrConversionCreateInfoKHR=^PVkSamplerYcbcrConversionCreateInfoKHR;
     PVkSamplerYcbcrConversionCreateInfoKHR=^TVkSamplerYcbcrConversionCreateInfoKHR;
     TVkSamplerYcbcrConversionCreateInfoKHR=TVkSamplerYcbcrConversionCreateInfo;

     PPVkBindImagePlaneMemoryInfo=^PVkBindImagePlaneMemoryInfo;
     PVkBindImagePlaneMemoryInfo=^TVkBindImagePlaneMemoryInfo;
     TVkBindImagePlaneMemoryInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO
       pNext:PVkVoid;
       planeAspect:TVkImageAspectFlagBits;
     end;

     PPVkBindImagePlaneMemoryInfoKHR=^PVkBindImagePlaneMemoryInfoKHR;
     PVkBindImagePlaneMemoryInfoKHR=^TVkBindImagePlaneMemoryInfoKHR;
     TVkBindImagePlaneMemoryInfoKHR=TVkBindImagePlaneMemoryInfo;

     PPVkImagePlaneMemoryRequirementsInfo=^PVkImagePlaneMemoryRequirementsInfo;
     PVkImagePlaneMemoryRequirementsInfo=^TVkImagePlaneMemoryRequirementsInfo;
     TVkImagePlaneMemoryRequirementsInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO
       pNext:PVkVoid;
       planeAspect:TVkImageAspectFlagBits;
     end;

     PPVkImagePlaneMemoryRequirementsInfoKHR=^PVkImagePlaneMemoryRequirementsInfoKHR;
     PVkImagePlaneMemoryRequirementsInfoKHR=^TVkImagePlaneMemoryRequirementsInfoKHR;
     TVkImagePlaneMemoryRequirementsInfoKHR=TVkImagePlaneMemoryRequirementsInfo;

     PPVkPhysicalDeviceSamplerYcbcrConversionFeatures=^PVkPhysicalDeviceSamplerYcbcrConversionFeatures;
     PVkPhysicalDeviceSamplerYcbcrConversionFeatures=^TVkPhysicalDeviceSamplerYcbcrConversionFeatures;
     TVkPhysicalDeviceSamplerYcbcrConversionFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
       pNext:PVkVoid;
       samplerYcbcrConversion:TVkBool32;
     end;

     PPVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR=^PVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
     PVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR=^TVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
     TVkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR=TVkPhysicalDeviceSamplerYcbcrConversionFeatures;

     PPVkSamplerYcbcrConversionImageFormatProperties=^PVkSamplerYcbcrConversionImageFormatProperties;
     PVkSamplerYcbcrConversionImageFormatProperties=^TVkSamplerYcbcrConversionImageFormatProperties;
     TVkSamplerYcbcrConversionImageFormatProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES
       pNext:PVkVoid;
       combinedImageSamplerDescriptorCount:TVkUInt32;
     end;

     PPVkSamplerYcbcrConversionImageFormatPropertiesKHR=^PVkSamplerYcbcrConversionImageFormatPropertiesKHR;
     PVkSamplerYcbcrConversionImageFormatPropertiesKHR=^TVkSamplerYcbcrConversionImageFormatPropertiesKHR;
     TVkSamplerYcbcrConversionImageFormatPropertiesKHR=TVkSamplerYcbcrConversionImageFormatProperties;

     PPVkTextureLODGatherFormatPropertiesAMD=^PVkTextureLODGatherFormatPropertiesAMD;
     PVkTextureLODGatherFormatPropertiesAMD=^TVkTextureLODGatherFormatPropertiesAMD;
     TVkTextureLODGatherFormatPropertiesAMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD
       pNext:PVkVoid;
       supportsTextureGatherLODBiasAMD:TVkBool32;
     end;

     PPVkConditionalRenderingBeginInfoEXT=^PVkConditionalRenderingBeginInfoEXT;
     PVkConditionalRenderingBeginInfoEXT=^TVkConditionalRenderingBeginInfoEXT;
     TVkConditionalRenderingBeginInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT
       pNext:PVkVoid;
       buffer:TVkBuffer;
       offset:TVkDeviceSize;
       flags:TVkConditionalRenderingFlagsEXT;
     end;

     PPVkProtectedSubmitInfo=^PVkProtectedSubmitInfo;
     PVkProtectedSubmitInfo=^TVkProtectedSubmitInfo;
     TVkProtectedSubmitInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO
       pNext:PVkVoid;
       protectedSubmit:TVkBool32;
     end;

     PPVkPhysicalDeviceProtectedMemoryFeatures=^PVkPhysicalDeviceProtectedMemoryFeatures;
     PVkPhysicalDeviceProtectedMemoryFeatures=^TVkPhysicalDeviceProtectedMemoryFeatures;
     TVkPhysicalDeviceProtectedMemoryFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES
       pNext:PVkVoid;
       protectedMemory:TVkBool32;
     end;

     PPVkPhysicalDeviceProtectedMemoryProperties=^PVkPhysicalDeviceProtectedMemoryProperties;
     PVkPhysicalDeviceProtectedMemoryProperties=^TVkPhysicalDeviceProtectedMemoryProperties;
     TVkPhysicalDeviceProtectedMemoryProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES
       pNext:PVkVoid;
       protectedNoFault:TVkBool32;
     end;

     PPVkDeviceQueueInfo2=^PVkDeviceQueueInfo2;
     PVkDeviceQueueInfo2=^TVkDeviceQueueInfo2;
     TVkDeviceQueueInfo2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2
       pNext:PVkVoid;
       flags:TVkDeviceQueueCreateFlags;
       queueFamilyIndex:TVkUInt32;
       queueIndex:TVkUInt32;
     end;

     PPVkPipelineCoverageToColorStateCreateInfoNV=^PVkPipelineCoverageToColorStateCreateInfoNV;
     PVkPipelineCoverageToColorStateCreateInfoNV=^TVkPipelineCoverageToColorStateCreateInfoNV;
     TVkPipelineCoverageToColorStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       flags:TVkPipelineCoverageToColorStateCreateFlagsNV;
       coverageToColorEnable:TVkBool32;
       coverageToColorLocation:TVkUInt32;
     end;

     PPVkPhysicalDeviceSamplerFilterMinmaxProperties=^PVkPhysicalDeviceSamplerFilterMinmaxProperties;
     PVkPhysicalDeviceSamplerFilterMinmaxProperties=^TVkPhysicalDeviceSamplerFilterMinmaxProperties;
     TVkPhysicalDeviceSamplerFilterMinmaxProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES
       pNext:PVkVoid;
       filterMinmaxSingleComponentFormats:TVkBool32;
       filterMinmaxImageComponentMapping:TVkBool32;
     end;

     PPVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT=^PVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
     PVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT=^TVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
     TVkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT=TVkPhysicalDeviceSamplerFilterMinmaxProperties;

     PPVkSampleLocationEXT=^PVkSampleLocationEXT;
     PVkSampleLocationEXT=^TVkSampleLocationEXT;
     TVkSampleLocationEXT=record
       x:TVkFloat;
       y:TVkFloat;
     end;

     PPVkSampleLocationsInfoEXT=^PVkSampleLocationsInfoEXT;
     PVkSampleLocationsInfoEXT=^TVkSampleLocationsInfoEXT;
     TVkSampleLocationsInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT
       pNext:PVkVoid;
       sampleLocationsPerPixel:TVkSampleCountFlagBits;
       sampleLocationGridSize:TVkExtent2D;
       sampleLocationsCount:TVkUInt32;
       pSampleLocations:PVkSampleLocationEXT;
     end;

     PPVkAttachmentSampleLocationsEXT=^PVkAttachmentSampleLocationsEXT;
     PVkAttachmentSampleLocationsEXT=^TVkAttachmentSampleLocationsEXT;
     TVkAttachmentSampleLocationsEXT=record
       attachmentIndex:TVkUInt32;
       sampleLocationsInfo:TVkSampleLocationsInfoEXT;
     end;

     PPVkSubpassSampleLocationsEXT=^PVkSubpassSampleLocationsEXT;
     PVkSubpassSampleLocationsEXT=^TVkSubpassSampleLocationsEXT;
     TVkSubpassSampleLocationsEXT=record
       subpassIndex:TVkUInt32;
       sampleLocationsInfo:TVkSampleLocationsInfoEXT;
     end;

     PPVkRenderPassSampleLocationsBeginInfoEXT=^PVkRenderPassSampleLocationsBeginInfoEXT;
     PVkRenderPassSampleLocationsBeginInfoEXT=^TVkRenderPassSampleLocationsBeginInfoEXT;
     TVkRenderPassSampleLocationsBeginInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT
       pNext:PVkVoid;
       attachmentInitialSampleLocationsCount:TVkUInt32;
       pAttachmentInitialSampleLocations:PVkAttachmentSampleLocationsEXT;
       postSubpassSampleLocationsCount:TVkUInt32;
       pPostSubpassSampleLocations:PVkSubpassSampleLocationsEXT;
     end;

     PPVkPipelineSampleLocationsStateCreateInfoEXT=^PVkPipelineSampleLocationsStateCreateInfoEXT;
     PVkPipelineSampleLocationsStateCreateInfoEXT=^TVkPipelineSampleLocationsStateCreateInfoEXT;
     TVkPipelineSampleLocationsStateCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT
       pNext:PVkVoid;
       sampleLocationsEnable:TVkBool32;
       sampleLocationsInfo:TVkSampleLocationsInfoEXT;
     end;

     PPVkPhysicalDeviceSampleLocationsPropertiesEXT=^PVkPhysicalDeviceSampleLocationsPropertiesEXT;
     PVkPhysicalDeviceSampleLocationsPropertiesEXT=^TVkPhysicalDeviceSampleLocationsPropertiesEXT;
     TVkPhysicalDeviceSampleLocationsPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT
       pNext:PVkVoid;
       sampleLocationSampleCounts:TVkSampleCountFlags;
       maxSampleLocationGridSize:TVkExtent2D;
       sampleLocationCoordinateRange:array[0..1] of TVkFloat;
       sampleLocationSubPixelBits:TVkUInt32;
       variableSampleLocations:TVkBool32;
     end;

     PPVkMultisamplePropertiesEXT=^PVkMultisamplePropertiesEXT;
     PVkMultisamplePropertiesEXT=^TVkMultisamplePropertiesEXT;
     TVkMultisamplePropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT
       pNext:PVkVoid;
       maxSampleLocationGridSize:TVkExtent2D;
     end;

     PPVkSamplerReductionModeCreateInfo=^PVkSamplerReductionModeCreateInfo;
     PVkSamplerReductionModeCreateInfo=^TVkSamplerReductionModeCreateInfo;
     TVkSamplerReductionModeCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO
       pNext:PVkVoid;
       reductionMode:TVkSamplerReductionMode;
     end;

     PPVkSamplerReductionModeCreateInfoEXT=^PVkSamplerReductionModeCreateInfoEXT;
     PVkSamplerReductionModeCreateInfoEXT=^TVkSamplerReductionModeCreateInfoEXT;
     TVkSamplerReductionModeCreateInfoEXT=TVkSamplerReductionModeCreateInfo;

     PPVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT=^PVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
     PVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT=^TVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
     TVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT
       pNext:PVkVoid;
       advancedBlendCoherentOperations:TVkBool32;
     end;

     PPVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT=^PVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
     PVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT=^TVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
     TVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT
       pNext:PVkVoid;
       advancedBlendMaxColorAttachments:TVkUInt32;
       advancedBlendIndependentBlend:TVkBool32;
       advancedBlendNonPremultipliedSrcColor:TVkBool32;
       advancedBlendNonPremultipliedDstColor:TVkBool32;
       advancedBlendCorrelatedOverlap:TVkBool32;
       advancedBlendAllOperations:TVkBool32;
     end;

     PPVkPipelineColorBlendAdvancedStateCreateInfoEXT=^PVkPipelineColorBlendAdvancedStateCreateInfoEXT;
     PVkPipelineColorBlendAdvancedStateCreateInfoEXT=^TVkPipelineColorBlendAdvancedStateCreateInfoEXT;
     TVkPipelineColorBlendAdvancedStateCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT
       pNext:PVkVoid;
       srcPremultiplied:TVkBool32;
       dstPremultiplied:TVkBool32;
       blendOverlap:TVkBlendOverlapEXT;
     end;

     PPVkPhysicalDeviceInlineUniformBlockFeaturesEXT=^PVkPhysicalDeviceInlineUniformBlockFeaturesEXT;
     PVkPhysicalDeviceInlineUniformBlockFeaturesEXT=^TVkPhysicalDeviceInlineUniformBlockFeaturesEXT;
     TVkPhysicalDeviceInlineUniformBlockFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT
       pNext:PVkVoid;
       inlineUniformBlock:TVkBool32;
       descriptorBindingInlineUniformBlockUpdateAfterBind:TVkBool32;
     end;

     PPVkPhysicalDeviceInlineUniformBlockPropertiesEXT=^PVkPhysicalDeviceInlineUniformBlockPropertiesEXT;
     PVkPhysicalDeviceInlineUniformBlockPropertiesEXT=^TVkPhysicalDeviceInlineUniformBlockPropertiesEXT;
     TVkPhysicalDeviceInlineUniformBlockPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT
       pNext:PVkVoid;
       maxInlineUniformBlockSize:TVkUInt32;
       maxPerStageDescriptorInlineUniformBlocks:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks:TVkUInt32;
       maxDescriptorSetInlineUniformBlocks:TVkUInt32;
       maxDescriptorSetUpdateAfterBindInlineUniformBlocks:TVkUInt32;
     end;

     PPVkWriteDescriptorSetInlineUniformBlockEXT=^PVkWriteDescriptorSetInlineUniformBlockEXT;
     PVkWriteDescriptorSetInlineUniformBlockEXT=^TVkWriteDescriptorSetInlineUniformBlockEXT;
     TVkWriteDescriptorSetInlineUniformBlockEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT
       pNext:PVkVoid;
       dataSize:TVkUInt32;
       pData:PVkVoid;
     end;

     PPVkDescriptorPoolInlineUniformBlockCreateInfoEXT=^PVkDescriptorPoolInlineUniformBlockCreateInfoEXT;
     PVkDescriptorPoolInlineUniformBlockCreateInfoEXT=^TVkDescriptorPoolInlineUniformBlockCreateInfoEXT;
     TVkDescriptorPoolInlineUniformBlockCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT
       pNext:PVkVoid;
       maxInlineUniformBlockBindings:TVkUInt32;
     end;

     PPVkPipelineCoverageModulationStateCreateInfoNV=^PVkPipelineCoverageModulationStateCreateInfoNV;
     PVkPipelineCoverageModulationStateCreateInfoNV=^TVkPipelineCoverageModulationStateCreateInfoNV;
     TVkPipelineCoverageModulationStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       flags:TVkPipelineCoverageModulationStateCreateFlagsNV;
       coverageModulationMode:TVkCoverageModulationModeNV;
       coverageModulationTableEnable:TVkBool32;
       coverageModulationTableCount:TVkUInt32;
       pCoverageModulationTable:PVkFloat;
     end;

     PPVkImageFormatListCreateInfo=^PVkImageFormatListCreateInfo;
     PVkImageFormatListCreateInfo=^TVkImageFormatListCreateInfo;
     TVkImageFormatListCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO
       pNext:PVkVoid;
       viewFormatCount:TVkUInt32;
       pViewFormats:PVkFormat;
     end;

     PPVkImageFormatListCreateInfoKHR=^PVkImageFormatListCreateInfoKHR;
     PVkImageFormatListCreateInfoKHR=^TVkImageFormatListCreateInfoKHR;
     TVkImageFormatListCreateInfoKHR=TVkImageFormatListCreateInfo;

     PPVkValidationCacheCreateInfoEXT=^PVkValidationCacheCreateInfoEXT;
     PVkValidationCacheCreateInfoEXT=^TVkValidationCacheCreateInfoEXT;
     TVkValidationCacheCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkValidationCacheCreateFlagsEXT;
       initialDataSize:TVkSize;
       pInitialData:PVkVoid;
     end;

     PPVkShaderModuleValidationCacheCreateInfoEXT=^PVkShaderModuleValidationCacheCreateInfoEXT;
     PVkShaderModuleValidationCacheCreateInfoEXT=^TVkShaderModuleValidationCacheCreateInfoEXT;
     TVkShaderModuleValidationCacheCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT
       pNext:PVkVoid;
       validationCache:TVkValidationCacheEXT;
     end;

     PPVkPhysicalDeviceMaintenance3Properties=^PVkPhysicalDeviceMaintenance3Properties;
     PVkPhysicalDeviceMaintenance3Properties=^TVkPhysicalDeviceMaintenance3Properties;
     TVkPhysicalDeviceMaintenance3Properties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES
       pNext:PVkVoid;
       maxPerSetDescriptors:TVkUInt32;
       maxMemoryAllocationSize:TVkDeviceSize;
     end;

     PPVkPhysicalDeviceMaintenance3PropertiesKHR=^PVkPhysicalDeviceMaintenance3PropertiesKHR;
     PVkPhysicalDeviceMaintenance3PropertiesKHR=^TVkPhysicalDeviceMaintenance3PropertiesKHR;
     TVkPhysicalDeviceMaintenance3PropertiesKHR=TVkPhysicalDeviceMaintenance3Properties;

     PPVkDescriptorSetLayoutSupport=^PVkDescriptorSetLayoutSupport;
     PVkDescriptorSetLayoutSupport=^TVkDescriptorSetLayoutSupport;
     TVkDescriptorSetLayoutSupport=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT
       pNext:PVkVoid;
       supported:TVkBool32;
     end;

     PPVkDescriptorSetLayoutSupportKHR=^PVkDescriptorSetLayoutSupportKHR;
     PVkDescriptorSetLayoutSupportKHR=^TVkDescriptorSetLayoutSupportKHR;
     TVkDescriptorSetLayoutSupportKHR=TVkDescriptorSetLayoutSupport;

     PPVkPhysicalDeviceShaderDrawParametersFeatures=^PVkPhysicalDeviceShaderDrawParametersFeatures;
     PVkPhysicalDeviceShaderDrawParametersFeatures=^TVkPhysicalDeviceShaderDrawParametersFeatures;
     TVkPhysicalDeviceShaderDrawParametersFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
       pNext:PVkVoid;
       shaderDrawParameters:TVkBool32;
     end;

     PPVkPhysicalDeviceShaderDrawParameterFeatures=^PVkPhysicalDeviceShaderDrawParameterFeatures;
     PVkPhysicalDeviceShaderDrawParameterFeatures=^TVkPhysicalDeviceShaderDrawParameterFeatures;
     TVkPhysicalDeviceShaderDrawParameterFeatures=TVkPhysicalDeviceShaderDrawParametersFeatures;

     PPVkPhysicalDeviceShaderFloat16Int8Features=^PVkPhysicalDeviceShaderFloat16Int8Features;
     PVkPhysicalDeviceShaderFloat16Int8Features=^TVkPhysicalDeviceShaderFloat16Int8Features;
     TVkPhysicalDeviceShaderFloat16Int8Features=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES
       pNext:PVkVoid;
       shaderFloat16:TVkBool32;
       shaderInt8:TVkBool32;
     end;

     PPVkPhysicalDeviceShaderFloat16Int8FeaturesKHR=^PVkPhysicalDeviceShaderFloat16Int8FeaturesKHR;
     PVkPhysicalDeviceShaderFloat16Int8FeaturesKHR=^TVkPhysicalDeviceShaderFloat16Int8FeaturesKHR;
     TVkPhysicalDeviceShaderFloat16Int8FeaturesKHR=TVkPhysicalDeviceShaderFloat16Int8Features;

     PPVkPhysicalDeviceFloat16Int8FeaturesKHR=^PVkPhysicalDeviceFloat16Int8FeaturesKHR;
     PVkPhysicalDeviceFloat16Int8FeaturesKHR=^TVkPhysicalDeviceFloat16Int8FeaturesKHR;
     TVkPhysicalDeviceFloat16Int8FeaturesKHR=TVkPhysicalDeviceShaderFloat16Int8Features;

     PPVkPhysicalDeviceFloatControlsProperties=^PVkPhysicalDeviceFloatControlsProperties;
     PVkPhysicalDeviceFloatControlsProperties=^TVkPhysicalDeviceFloatControlsProperties;
     TVkPhysicalDeviceFloatControlsProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES
       pNext:PVkVoid;
       denormBehaviorIndependence:TVkShaderFloatControlsIndependence;
       roundingModeIndependence:TVkShaderFloatControlsIndependence;
       shaderSignedZeroInfNanPreserveFloat16:TVkBool32;
       shaderSignedZeroInfNanPreserveFloat32:TVkBool32;
       shaderSignedZeroInfNanPreserveFloat64:TVkBool32;
       shaderDenormPreserveFloat16:TVkBool32;
       shaderDenormPreserveFloat32:TVkBool32;
       shaderDenormPreserveFloat64:TVkBool32;
       shaderDenormFlushToZeroFloat16:TVkBool32;
       shaderDenormFlushToZeroFloat32:TVkBool32;
       shaderDenormFlushToZeroFloat64:TVkBool32;
       shaderRoundingModeRTEFloat16:TVkBool32;
       shaderRoundingModeRTEFloat32:TVkBool32;
       shaderRoundingModeRTEFloat64:TVkBool32;
       shaderRoundingModeRTZFloat16:TVkBool32;
       shaderRoundingModeRTZFloat32:TVkBool32;
       shaderRoundingModeRTZFloat64:TVkBool32;
     end;

     PPVkPhysicalDeviceFloatControlsPropertiesKHR=^PVkPhysicalDeviceFloatControlsPropertiesKHR;
     PVkPhysicalDeviceFloatControlsPropertiesKHR=^TVkPhysicalDeviceFloatControlsPropertiesKHR;
     TVkPhysicalDeviceFloatControlsPropertiesKHR=TVkPhysicalDeviceFloatControlsProperties;

     PPVkPhysicalDeviceHostQueryResetFeatures=^PVkPhysicalDeviceHostQueryResetFeatures;
     PVkPhysicalDeviceHostQueryResetFeatures=^TVkPhysicalDeviceHostQueryResetFeatures;
     TVkPhysicalDeviceHostQueryResetFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES
       pNext:PVkVoid;
       hostQueryReset:TVkBool32;
     end;

     PPVkPhysicalDeviceHostQueryResetFeaturesEXT=^PVkPhysicalDeviceHostQueryResetFeaturesEXT;
     PVkPhysicalDeviceHostQueryResetFeaturesEXT=^TVkPhysicalDeviceHostQueryResetFeaturesEXT;
     TVkPhysicalDeviceHostQueryResetFeaturesEXT=TVkPhysicalDeviceHostQueryResetFeatures;

{$ifdef Android}
     PPVkNativeBufferUsage2ANDROID=^PVkNativeBufferUsage2ANDROID;
     PVkNativeBufferUsage2ANDROID=^TVkNativeBufferUsage2ANDROID;
     TVkNativeBufferUsage2ANDROID=record
       consumer:TVkUInt64;
       producer:TVkUInt64;
     end;
{$endif}

{$ifdef Android}
     PPVkNativeBufferANDROID=^PVkNativeBufferANDROID;
     PVkNativeBufferANDROID=^TVkNativeBufferANDROID;
     TVkNativeBufferANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID
       pNext:PVkVoid;
       handle:PVkVoid;
       stride:TVkInt32;
       format:TVkInt32;
       usage:TVkInt32;
       usage2:TVkNativeBufferUsage2ANDROID;
     end;
{$endif}

{$ifdef Android}
     PPVkSwapchainImageCreateInfoANDROID=^PVkSwapchainImageCreateInfoANDROID;
     PVkSwapchainImageCreateInfoANDROID=^TVkSwapchainImageCreateInfoANDROID;
     TVkSwapchainImageCreateInfoANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID
       pNext:PVkVoid;
       usage:TVkSwapchainImageUsageFlagsANDROID;
     end;
{$endif}

{$ifdef Android}
     PPVkPhysicalDevicePresentationPropertiesANDROID=^PVkPhysicalDevicePresentationPropertiesANDROID;
     PVkPhysicalDevicePresentationPropertiesANDROID=^TVkPhysicalDevicePresentationPropertiesANDROID;
     TVkPhysicalDevicePresentationPropertiesANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID
       pNext:PVkVoid;
       sharedImage:TVkBool32;
     end;
{$endif}

     PPVkShaderResourceUsageAMD=^PVkShaderResourceUsageAMD;
     PVkShaderResourceUsageAMD=^TVkShaderResourceUsageAMD;
     TVkShaderResourceUsageAMD=record
       numUsedVgprs:TVkUInt32;
       numUsedSgprs:TVkUInt32;
       ldsSizePerLocalWorkGroup:TVkUInt32;
       ldsUsageSizeInBytes:TVkSize;
       scratchMemUsageInBytes:TVkSize;
     end;

     PPVkShaderStatisticsInfoAMD=^PVkShaderStatisticsInfoAMD;
     PVkShaderStatisticsInfoAMD=^TVkShaderStatisticsInfoAMD;
     TVkShaderStatisticsInfoAMD=record
       shaderStageMask:TVkShaderStageFlags;
       resourceUsage:TVkShaderResourceUsageAMD;
       numPhysicalVgprs:TVkUInt32;
       numPhysicalSgprs:TVkUInt32;
       numAvailableVgprs:TVkUInt32;
       numAvailableSgprs:TVkUInt32;
       computeWorkGroupSize:array[0..2] of TVkUInt32;
     end;

     PPVkDeviceQueueGlobalPriorityCreateInfoEXT=^PVkDeviceQueueGlobalPriorityCreateInfoEXT;
     PVkDeviceQueueGlobalPriorityCreateInfoEXT=^TVkDeviceQueueGlobalPriorityCreateInfoEXT;
     TVkDeviceQueueGlobalPriorityCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT
       pNext:PVkVoid;
       globalPriority:TVkQueueGlobalPriorityEXT;
     end;

     PPVkDebugUtilsLabelEXT=^PVkDebugUtilsLabelEXT;
     PVkDebugUtilsLabelEXT=^TVkDebugUtilsLabelEXT;
     TVkDebugUtilsLabelEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT
       pNext:PVkVoid;
       pLabelName:PVkChar;
       color:array[0..3] of TVkFloat;
     end;

     PPVkDebugUtilsObjectTagInfoEXT=^PVkDebugUtilsObjectTagInfoEXT;
     PVkDebugUtilsObjectTagInfoEXT=^TVkDebugUtilsObjectTagInfoEXT;
     TVkDebugUtilsObjectTagInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT
       pNext:PVkVoid;
       objectType:TVkObjectType;
       objectHandle:TVkUInt64;
       tagName:TVkUInt64;
       tagSize:TVkSize;
       pTag:PVkVoid;
     end;

     PPVkDebugUtilsMessengerCallbackDataEXT=^PVkDebugUtilsMessengerCallbackDataEXT;
     PVkDebugUtilsMessengerCallbackDataEXT=^TVkDebugUtilsMessengerCallbackDataEXT;
     TVkDebugUtilsMessengerCallbackDataEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT
       pNext:PVkVoid;
       flags:TVkDebugUtilsMessengerCallbackDataFlagsEXT;
       pMessageIdName:PVkChar;
       messageIdNumber:TVkInt32;
       pMessage:PVkChar;
       queueLabelCount:TVkUInt32;
       pQueueLabels:PVkDebugUtilsLabelEXT;
       cmdBufLabelCount:TVkUInt32;
       pCmdBufLabels:PVkDebugUtilsLabelEXT;
       objectCount:TVkUInt32;
       pObjects:PVkDebugUtilsObjectNameInfoEXT;
     end;

     PPPFN_vkDebugUtilsMessengerCallbackEXT=^PPFN_vkDebugUtilsMessengerCallbackEXT;
     PPFN_vkDebugUtilsMessengerCallbackEXT=^TPFN_vkDebugUtilsMessengerCallbackEXT;
     TPFN_vkDebugUtilsMessengerCallbackEXT=function(messageSeverity:TVkDebugUtilsMessageSeverityFlagBitsEXT;messageTypes:TVkDebugUtilsMessageTypeFlagsEXT;const pCallbackData:PVkDebugUtilsMessengerCallbackDataEXT;pUserData:PVkVoid):TVkBool32; vkExtdecl;

     PPVkDebugUtilsMessengerCreateInfoEXT=^PVkDebugUtilsMessengerCreateInfoEXT;
     PVkDebugUtilsMessengerCreateInfoEXT=^TVkDebugUtilsMessengerCreateInfoEXT;
     TVkDebugUtilsMessengerCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkDebugUtilsMessengerCreateFlagsEXT;
       messageSeverity:TVkDebugUtilsMessageSeverityFlagsEXT;
       messageType:TVkDebugUtilsMessageTypeFlagsEXT;
       pfnUserCallback:TPFN_vkDebugUtilsMessengerCallbackEXT;
       pUserData:PVkVoid;
     end;

     PPVkImportMemoryHostPointerInfoEXT=^PVkImportMemoryHostPointerInfoEXT;
     PVkImportMemoryHostPointerInfoEXT=^TVkImportMemoryHostPointerInfoEXT;
     TVkImportMemoryHostPointerInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT
       pNext:PVkVoid;
       handleType:TVkExternalMemoryHandleTypeFlagBits;
       pHostPointer:PVkVoid;
     end;

     PPVkMemoryHostPointerPropertiesEXT=^PVkMemoryHostPointerPropertiesEXT;
     PVkMemoryHostPointerPropertiesEXT=^TVkMemoryHostPointerPropertiesEXT;
     TVkMemoryHostPointerPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT
       pNext:PVkVoid;
       memoryTypeBits:TVkUInt32;
     end;

     PPVkPhysicalDeviceExternalMemoryHostPropertiesEXT=^PVkPhysicalDeviceExternalMemoryHostPropertiesEXT;
     PVkPhysicalDeviceExternalMemoryHostPropertiesEXT=^TVkPhysicalDeviceExternalMemoryHostPropertiesEXT;
     TVkPhysicalDeviceExternalMemoryHostPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT
       pNext:PVkVoid;
       minImportedHostPointerAlignment:TVkDeviceSize;
     end;

     PPVkPhysicalDeviceConservativeRasterizationPropertiesEXT=^PVkPhysicalDeviceConservativeRasterizationPropertiesEXT;
     PVkPhysicalDeviceConservativeRasterizationPropertiesEXT=^TVkPhysicalDeviceConservativeRasterizationPropertiesEXT;
     TVkPhysicalDeviceConservativeRasterizationPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT
       pNext:PVkVoid;
       primitiveOverestimationSize:TVkFloat;
       maxExtraPrimitiveOverestimationSize:TVkFloat;
       extraPrimitiveOverestimationSizeGranularity:TVkFloat;
       primitiveUnderestimation:TVkBool32;
       conservativePointAndLineRasterization:TVkBool32;
       degenerateTrianglesRasterized:TVkBool32;
       degenerateLinesRasterized:TVkBool32;
       fullyCoveredFragmentShaderInputVariable:TVkBool32;
       conservativeRasterizationPostDepthCoverage:TVkBool32;
     end;

     PPVkCalibratedTimestampInfoEXT=^PVkCalibratedTimestampInfoEXT;
     PVkCalibratedTimestampInfoEXT=^TVkCalibratedTimestampInfoEXT;
     TVkCalibratedTimestampInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT
       pNext:PVkVoid;
       timeDomain:TVkTimeDomainEXT;
     end;

     PPVkPhysicalDeviceShaderCorePropertiesAMD=^PVkPhysicalDeviceShaderCorePropertiesAMD;
     PVkPhysicalDeviceShaderCorePropertiesAMD=^TVkPhysicalDeviceShaderCorePropertiesAMD;
     TVkPhysicalDeviceShaderCorePropertiesAMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD
       pNext:PVkVoid;
       shaderEngineCount:TVkUInt32;
       shaderArraysPerEngineCount:TVkUInt32;
       computeUnitsPerShaderArray:TVkUInt32;
       simdPerComputeUnit:TVkUInt32;
       wavefrontsPerSimd:TVkUInt32;
       wavefrontSize:TVkUInt32;
       sgprsPerSimd:TVkUInt32;
       minSgprAllocation:TVkUInt32;
       maxSgprAllocation:TVkUInt32;
       sgprAllocationGranularity:TVkUInt32;
       vgprsPerSimd:TVkUInt32;
       minVgprAllocation:TVkUInt32;
       maxVgprAllocation:TVkUInt32;
       vgprAllocationGranularity:TVkUInt32;
     end;

     PPVkPhysicalDeviceShaderCoreProperties2AMD=^PVkPhysicalDeviceShaderCoreProperties2AMD;
     PVkPhysicalDeviceShaderCoreProperties2AMD=^TVkPhysicalDeviceShaderCoreProperties2AMD;
     TVkPhysicalDeviceShaderCoreProperties2AMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD
       pNext:PVkVoid;
       shaderCoreFeatures:TVkShaderCorePropertiesFlagsAMD;
       activeComputeUnitCount:TVkUInt32;
     end;

     PPVkPipelineRasterizationConservativeStateCreateInfoEXT=^PVkPipelineRasterizationConservativeStateCreateInfoEXT;
     PVkPipelineRasterizationConservativeStateCreateInfoEXT=^TVkPipelineRasterizationConservativeStateCreateInfoEXT;
     TVkPipelineRasterizationConservativeStateCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkPipelineRasterizationConservativeStateCreateFlagsEXT;
       conservativeRasterizationMode:TVkConservativeRasterizationModeEXT;
       extraPrimitiveOverestimationSize:TVkFloat;
     end;

     PPVkPhysicalDeviceDescriptorIndexingFeatures=^PVkPhysicalDeviceDescriptorIndexingFeatures;
     PVkPhysicalDeviceDescriptorIndexingFeatures=^TVkPhysicalDeviceDescriptorIndexingFeatures;
     TVkPhysicalDeviceDescriptorIndexingFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES
       pNext:PVkVoid;
       shaderInputAttachmentArrayDynamicIndexing:TVkBool32;
       shaderUniformTexelBufferArrayDynamicIndexing:TVkBool32;
       shaderStorageTexelBufferArrayDynamicIndexing:TVkBool32;
       shaderUniformBufferArrayNonUniformIndexing:TVkBool32;
       shaderSampledImageArrayNonUniformIndexing:TVkBool32;
       shaderStorageBufferArrayNonUniformIndexing:TVkBool32;
       shaderStorageImageArrayNonUniformIndexing:TVkBool32;
       shaderInputAttachmentArrayNonUniformIndexing:TVkBool32;
       shaderUniformTexelBufferArrayNonUniformIndexing:TVkBool32;
       shaderStorageTexelBufferArrayNonUniformIndexing:TVkBool32;
       descriptorBindingUniformBufferUpdateAfterBind:TVkBool32;
       descriptorBindingSampledImageUpdateAfterBind:TVkBool32;
       descriptorBindingStorageImageUpdateAfterBind:TVkBool32;
       descriptorBindingStorageBufferUpdateAfterBind:TVkBool32;
       descriptorBindingUniformTexelBufferUpdateAfterBind:TVkBool32;
       descriptorBindingStorageTexelBufferUpdateAfterBind:TVkBool32;
       descriptorBindingUpdateUnusedWhilePending:TVkBool32;
       descriptorBindingPartiallyBound:TVkBool32;
       descriptorBindingVariableDescriptorCount:TVkBool32;
       runtimeDescriptorArray:TVkBool32;
     end;

     PPVkPhysicalDeviceDescriptorIndexingFeaturesEXT=^PVkPhysicalDeviceDescriptorIndexingFeaturesEXT;
     PVkPhysicalDeviceDescriptorIndexingFeaturesEXT=^TVkPhysicalDeviceDescriptorIndexingFeaturesEXT;
     TVkPhysicalDeviceDescriptorIndexingFeaturesEXT=TVkPhysicalDeviceDescriptorIndexingFeatures;

     PPVkPhysicalDeviceDescriptorIndexingProperties=^PVkPhysicalDeviceDescriptorIndexingProperties;
     PVkPhysicalDeviceDescriptorIndexingProperties=^TVkPhysicalDeviceDescriptorIndexingProperties;
     TVkPhysicalDeviceDescriptorIndexingProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES
       pNext:PVkVoid;
       maxUpdateAfterBindDescriptorsInAllPools:TVkUInt32;
       shaderUniformBufferArrayNonUniformIndexingNative:TVkBool32;
       shaderSampledImageArrayNonUniformIndexingNative:TVkBool32;
       shaderStorageBufferArrayNonUniformIndexingNative:TVkBool32;
       shaderStorageImageArrayNonUniformIndexingNative:TVkBool32;
       shaderInputAttachmentArrayNonUniformIndexingNative:TVkBool32;
       robustBufferAccessUpdateAfterBind:TVkBool32;
       quadDivergentImplicitLod:TVkBool32;
       maxPerStageDescriptorUpdateAfterBindSamplers:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindUniformBuffers:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindStorageBuffers:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindSampledImages:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindStorageImages:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindInputAttachments:TVkUInt32;
       maxPerStageUpdateAfterBindResources:TVkUInt32;
       maxDescriptorSetUpdateAfterBindSamplers:TVkUInt32;
       maxDescriptorSetUpdateAfterBindUniformBuffers:TVkUInt32;
       maxDescriptorSetUpdateAfterBindUniformBuffersDynamic:TVkUInt32;
       maxDescriptorSetUpdateAfterBindStorageBuffers:TVkUInt32;
       maxDescriptorSetUpdateAfterBindStorageBuffersDynamic:TVkUInt32;
       maxDescriptorSetUpdateAfterBindSampledImages:TVkUInt32;
       maxDescriptorSetUpdateAfterBindStorageImages:TVkUInt32;
       maxDescriptorSetUpdateAfterBindInputAttachments:TVkUInt32;
     end;

     PPVkPhysicalDeviceDescriptorIndexingPropertiesEXT=^PVkPhysicalDeviceDescriptorIndexingPropertiesEXT;
     PVkPhysicalDeviceDescriptorIndexingPropertiesEXT=^TVkPhysicalDeviceDescriptorIndexingPropertiesEXT;
     TVkPhysicalDeviceDescriptorIndexingPropertiesEXT=TVkPhysicalDeviceDescriptorIndexingProperties;

     PPVkDescriptorSetLayoutBindingFlagsCreateInfo=^PVkDescriptorSetLayoutBindingFlagsCreateInfo;
     PVkDescriptorSetLayoutBindingFlagsCreateInfo=^TVkDescriptorSetLayoutBindingFlagsCreateInfo;
     TVkDescriptorSetLayoutBindingFlagsCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO
       pNext:PVkVoid;
       bindingCount:TVkUInt32;
       pBindingFlags:PVkDescriptorBindingFlags;
     end;

     PPVkDescriptorSetLayoutBindingFlagsCreateInfoEXT=^PVkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
     PVkDescriptorSetLayoutBindingFlagsCreateInfoEXT=^TVkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
     TVkDescriptorSetLayoutBindingFlagsCreateInfoEXT=TVkDescriptorSetLayoutBindingFlagsCreateInfo;

     PPVkDescriptorSetVariableDescriptorCountAllocateInfo=^PVkDescriptorSetVariableDescriptorCountAllocateInfo;
     PVkDescriptorSetVariableDescriptorCountAllocateInfo=^TVkDescriptorSetVariableDescriptorCountAllocateInfo;
     TVkDescriptorSetVariableDescriptorCountAllocateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO
       pNext:PVkVoid;
       descriptorSetCount:TVkUInt32;
       pDescriptorCounts:PVkUInt32;
     end;

     PPVkDescriptorSetVariableDescriptorCountAllocateInfoEXT=^PVkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
     PVkDescriptorSetVariableDescriptorCountAllocateInfoEXT=^TVkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
     TVkDescriptorSetVariableDescriptorCountAllocateInfoEXT=TVkDescriptorSetVariableDescriptorCountAllocateInfo;

     PPVkDescriptorSetVariableDescriptorCountLayoutSupport=^PVkDescriptorSetVariableDescriptorCountLayoutSupport;
     PVkDescriptorSetVariableDescriptorCountLayoutSupport=^TVkDescriptorSetVariableDescriptorCountLayoutSupport;
     TVkDescriptorSetVariableDescriptorCountLayoutSupport=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT
       pNext:PVkVoid;
       maxVariableDescriptorCount:TVkUInt32;
     end;

     PPVkDescriptorSetVariableDescriptorCountLayoutSupportEXT=^PVkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
     PVkDescriptorSetVariableDescriptorCountLayoutSupportEXT=^TVkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
     TVkDescriptorSetVariableDescriptorCountLayoutSupportEXT=TVkDescriptorSetVariableDescriptorCountLayoutSupport;

     PPVkAttachmentDescription2=^PVkAttachmentDescription2;
     PVkAttachmentDescription2=^TVkAttachmentDescription2;
     TVkAttachmentDescription2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2
       pNext:PVkVoid;
       flags:TVkAttachmentDescriptionFlags;
       format:TVkFormat;
       samples:TVkSampleCountFlagBits;
       loadOp:TVkAttachmentLoadOp;
       storeOp:TVkAttachmentStoreOp;
       stencilLoadOp:TVkAttachmentLoadOp;
       stencilStoreOp:TVkAttachmentStoreOp;
       initialLayout:TVkImageLayout;
       finalLayout:TVkImageLayout;
     end;

     PPVkAttachmentDescription2KHR=^PVkAttachmentDescription2KHR;
     PVkAttachmentDescription2KHR=^TVkAttachmentDescription2KHR;
     TVkAttachmentDescription2KHR=TVkAttachmentDescription2;

     PPVkAttachmentReference2=^PVkAttachmentReference2;
     PVkAttachmentReference2=^TVkAttachmentReference2;
     TVkAttachmentReference2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2
       pNext:PVkVoid;
       attachment:TVkUInt32;
       layout:TVkImageLayout;
       aspectMask:TVkImageAspectFlags;
     end;

     PPVkAttachmentReference2KHR=^PVkAttachmentReference2KHR;
     PVkAttachmentReference2KHR=^TVkAttachmentReference2KHR;
     TVkAttachmentReference2KHR=TVkAttachmentReference2;

     PPVkSubpassDescription2=^PVkSubpassDescription2;
     PVkSubpassDescription2=^TVkSubpassDescription2;
     TVkSubpassDescription2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2
       pNext:PVkVoid;
       flags:TVkSubpassDescriptionFlags;
       pipelineBindPoint:TVkPipelineBindPoint;
       viewMask:TVkUInt32;
       inputAttachmentCount:TVkUInt32;
       pInputAttachments:PVkAttachmentReference2;
       colorAttachmentCount:TVkUInt32;
       pColorAttachments:PVkAttachmentReference2;
       pResolveAttachments:PVkAttachmentReference2;
       pDepthStencilAttachment:PVkAttachmentReference2;
       preserveAttachmentCount:TVkUInt32;
       pPreserveAttachments:PVkUInt32;
     end;

     PPVkSubpassDescription2KHR=^PVkSubpassDescription2KHR;
     PVkSubpassDescription2KHR=^TVkSubpassDescription2KHR;
     TVkSubpassDescription2KHR=TVkSubpassDescription2;

     PPVkSubpassDependency2=^PVkSubpassDependency2;
     PVkSubpassDependency2=^TVkSubpassDependency2;
     TVkSubpassDependency2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2
       pNext:PVkVoid;
       srcSubpass:TVkUInt32;
       dstSubpass:TVkUInt32;
       srcStageMask:TVkPipelineStageFlags;
       dstStageMask:TVkPipelineStageFlags;
       srcAccessMask:TVkAccessFlags;
       dstAccessMask:TVkAccessFlags;
       dependencyFlags:TVkDependencyFlags;
       viewOffset:TVkInt32;
     end;

     PPVkSubpassDependency2KHR=^PVkSubpassDependency2KHR;
     PVkSubpassDependency2KHR=^TVkSubpassDependency2KHR;
     TVkSubpassDependency2KHR=TVkSubpassDependency2;

     PPVkRenderPassCreateInfo2=^PVkRenderPassCreateInfo2;
     PVkRenderPassCreateInfo2=^TVkRenderPassCreateInfo2;
     TVkRenderPassCreateInfo2=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2
       pNext:PVkVoid;
       flags:TVkRenderPassCreateFlags;
       attachmentCount:TVkUInt32;
       pAttachments:PVkAttachmentDescription2;
       subpassCount:TVkUInt32;
       pSubpasses:PVkSubpassDescription2;
       dependencyCount:TVkUInt32;
       pDependencies:PVkSubpassDependency2;
       correlatedViewMaskCount:TVkUInt32;
       pCorrelatedViewMasks:PVkUInt32;
     end;

     PPVkRenderPassCreateInfo2KHR=^PVkRenderPassCreateInfo2KHR;
     PVkRenderPassCreateInfo2KHR=^TVkRenderPassCreateInfo2KHR;
     TVkRenderPassCreateInfo2KHR=TVkRenderPassCreateInfo2;

     PPVkSubpassBeginInfo=^PVkSubpassBeginInfo;
     PVkSubpassBeginInfo=^TVkSubpassBeginInfo;
     TVkSubpassBeginInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO
       pNext:PVkVoid;
       contents:TVkSubpassContents;
     end;

     PPVkSubpassBeginInfoKHR=^PVkSubpassBeginInfoKHR;
     PVkSubpassBeginInfoKHR=^TVkSubpassBeginInfoKHR;
     TVkSubpassBeginInfoKHR=TVkSubpassBeginInfo;

     PPVkSubpassEndInfo=^PVkSubpassEndInfo;
     PVkSubpassEndInfo=^TVkSubpassEndInfo;
     TVkSubpassEndInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SUBPASS_END_INFO
       pNext:PVkVoid;
     end;

     PPVkSubpassEndInfoKHR=^PVkSubpassEndInfoKHR;
     PVkSubpassEndInfoKHR=^TVkSubpassEndInfoKHR;
     TVkSubpassEndInfoKHR=TVkSubpassEndInfo;

     PPVkPhysicalDeviceTimelineSemaphoreFeatures=^PVkPhysicalDeviceTimelineSemaphoreFeatures;
     PVkPhysicalDeviceTimelineSemaphoreFeatures=^TVkPhysicalDeviceTimelineSemaphoreFeatures;
     TVkPhysicalDeviceTimelineSemaphoreFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES
       pNext:PVkVoid;
       timelineSemaphore:TVkBool32;
     end;

     PPVkPhysicalDeviceTimelineSemaphoreFeaturesKHR=^PVkPhysicalDeviceTimelineSemaphoreFeaturesKHR;
     PVkPhysicalDeviceTimelineSemaphoreFeaturesKHR=^TVkPhysicalDeviceTimelineSemaphoreFeaturesKHR;
     TVkPhysicalDeviceTimelineSemaphoreFeaturesKHR=TVkPhysicalDeviceTimelineSemaphoreFeatures;

     PPVkPhysicalDeviceTimelineSemaphoreProperties=^PVkPhysicalDeviceTimelineSemaphoreProperties;
     PVkPhysicalDeviceTimelineSemaphoreProperties=^TVkPhysicalDeviceTimelineSemaphoreProperties;
     TVkPhysicalDeviceTimelineSemaphoreProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES
       pNext:PVkVoid;
       maxTimelineSemaphoreValueDifference:TVkUInt64;
     end;

     PPVkPhysicalDeviceTimelineSemaphorePropertiesKHR=^PVkPhysicalDeviceTimelineSemaphorePropertiesKHR;
     PVkPhysicalDeviceTimelineSemaphorePropertiesKHR=^TVkPhysicalDeviceTimelineSemaphorePropertiesKHR;
     TVkPhysicalDeviceTimelineSemaphorePropertiesKHR=TVkPhysicalDeviceTimelineSemaphoreProperties;

     PPVkSemaphoreTypeCreateInfo=^PVkSemaphoreTypeCreateInfo;
     PVkSemaphoreTypeCreateInfo=^TVkSemaphoreTypeCreateInfo;
     TVkSemaphoreTypeCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO
       pNext:PVkVoid;
       semaphoreType:TVkSemaphoreType;
       initialValue:TVkUInt64;
     end;

     PPVkSemaphoreTypeCreateInfoKHR=^PVkSemaphoreTypeCreateInfoKHR;
     PVkSemaphoreTypeCreateInfoKHR=^TVkSemaphoreTypeCreateInfoKHR;
     TVkSemaphoreTypeCreateInfoKHR=TVkSemaphoreTypeCreateInfo;

     PPVkTimelineSemaphoreSubmitInfo=^PVkTimelineSemaphoreSubmitInfo;
     PVkTimelineSemaphoreSubmitInfo=^TVkTimelineSemaphoreSubmitInfo;
     TVkTimelineSemaphoreSubmitInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO
       pNext:PVkVoid;
       waitSemaphoreValueCount:TVkUInt32;
       pWaitSemaphoreValues:PVkUInt64;
       signalSemaphoreValueCount:TVkUInt32;
       pSignalSemaphoreValues:PVkUInt64;
     end;

     PPVkTimelineSemaphoreSubmitInfoKHR=^PVkTimelineSemaphoreSubmitInfoKHR;
     PVkTimelineSemaphoreSubmitInfoKHR=^TVkTimelineSemaphoreSubmitInfoKHR;
     TVkTimelineSemaphoreSubmitInfoKHR=TVkTimelineSemaphoreSubmitInfo;

     PPVkSemaphoreWaitInfo=^PVkSemaphoreWaitInfo;
     PVkSemaphoreWaitInfo=^TVkSemaphoreWaitInfo;
     TVkSemaphoreWaitInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO
       pNext:PVkVoid;
       flags:TVkSemaphoreWaitFlags;
       semaphoreCount:TVkUInt32;
       pSemaphores:PVkSemaphore;
       pValues:PVkUInt64;
     end;

     PPVkSemaphoreWaitInfoKHR=^PVkSemaphoreWaitInfoKHR;
     PVkSemaphoreWaitInfoKHR=^TVkSemaphoreWaitInfoKHR;
     TVkSemaphoreWaitInfoKHR=TVkSemaphoreWaitInfo;

     PPVkSemaphoreSignalInfo=^PVkSemaphoreSignalInfo;
     PVkSemaphoreSignalInfo=^TVkSemaphoreSignalInfo;
     TVkSemaphoreSignalInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO
       pNext:PVkVoid;
       semaphore:TVkSemaphore;
       value:TVkUInt64;
     end;

     PPVkSemaphoreSignalInfoKHR=^PVkSemaphoreSignalInfoKHR;
     PVkSemaphoreSignalInfoKHR=^TVkSemaphoreSignalInfoKHR;
     TVkSemaphoreSignalInfoKHR=TVkSemaphoreSignalInfo;

     PPVkVertexInputBindingDivisorDescriptionEXT=^PVkVertexInputBindingDivisorDescriptionEXT;
     PVkVertexInputBindingDivisorDescriptionEXT=^TVkVertexInputBindingDivisorDescriptionEXT;
     TVkVertexInputBindingDivisorDescriptionEXT=record
       binding:TVkUInt32;
       divisor:TVkUInt32;
     end;

     PPVkPipelineVertexInputDivisorStateCreateInfoEXT=^PVkPipelineVertexInputDivisorStateCreateInfoEXT;
     PVkPipelineVertexInputDivisorStateCreateInfoEXT=^TVkPipelineVertexInputDivisorStateCreateInfoEXT;
     TVkPipelineVertexInputDivisorStateCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT
       pNext:PVkVoid;
       vertexBindingDivisorCount:TVkUInt32;
       pVertexBindingDivisors:PVkVertexInputBindingDivisorDescriptionEXT;
     end;

     PPVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT=^PVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
     PVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT=^TVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
     TVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT
       pNext:PVkVoid;
       maxVertexAttribDivisor:TVkUInt32;
     end;

     PPVkPhysicalDevicePCIBusInfoPropertiesEXT=^PVkPhysicalDevicePCIBusInfoPropertiesEXT;
     PVkPhysicalDevicePCIBusInfoPropertiesEXT=^TVkPhysicalDevicePCIBusInfoPropertiesEXT;
     TVkPhysicalDevicePCIBusInfoPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT
       pNext:PVkVoid;
       pciDomain:TVkUInt32;
       pciBus:TVkUInt32;
       pciDevice:TVkUInt32;
       pciFunction:TVkUInt32;
     end;

{$ifdef Android}
     PPVkImportAndroidHardwareBufferInfoANDROID=^PVkImportAndroidHardwareBufferInfoANDROID;
     PVkImportAndroidHardwareBufferInfoANDROID=^TVkImportAndroidHardwareBufferInfoANDROID;
     TVkImportAndroidHardwareBufferInfoANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
       pNext:PVkVoid;
       buffer:PVkAndroidAHardwareBuffer;
     end;
{$endif}

{$ifdef Android}
     PPVkAndroidHardwareBufferUsageANDROID=^PVkAndroidHardwareBufferUsageANDROID;
     PVkAndroidHardwareBufferUsageANDROID=^TVkAndroidHardwareBufferUsageANDROID;
     TVkAndroidHardwareBufferUsageANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID
       pNext:PVkVoid;
       androidHardwareBufferUsage:TVkUInt64;
     end;
{$endif}

{$ifdef Android}
     PPVkAndroidHardwareBufferPropertiesANDROID=^PVkAndroidHardwareBufferPropertiesANDROID;
     PVkAndroidHardwareBufferPropertiesANDROID=^TVkAndroidHardwareBufferPropertiesANDROID;
     TVkAndroidHardwareBufferPropertiesANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID
       pNext:PVkVoid;
       allocationSize:TVkDeviceSize;
       memoryTypeBits:TVkUInt32;
     end;
{$endif}

{$ifdef Android}
     PPVkMemoryGetAndroidHardwareBufferInfoANDROID=^PVkMemoryGetAndroidHardwareBufferInfoANDROID;
     PVkMemoryGetAndroidHardwareBufferInfoANDROID=^TVkMemoryGetAndroidHardwareBufferInfoANDROID;
     TVkMemoryGetAndroidHardwareBufferInfoANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
       pNext:PVkVoid;
       memory:TVkDeviceMemory;
     end;
{$endif}

{$ifdef Android}
     PPVkAndroidHardwareBufferFormatPropertiesANDROID=^PVkAndroidHardwareBufferFormatPropertiesANDROID;
     PVkAndroidHardwareBufferFormatPropertiesANDROID=^TVkAndroidHardwareBufferFormatPropertiesANDROID;
     TVkAndroidHardwareBufferFormatPropertiesANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID
       pNext:PVkVoid;
       format:TVkFormat;
       externalFormat:TVkUInt64;
       formatFeatures:TVkFormatFeatureFlags;
       samplerYcbcrConversionComponents:TVkComponentMapping;
       suggestedYcbcrModel:TVkSamplerYcbcrModelConversion;
       suggestedYcbcrRange:TVkSamplerYcbcrRange;
       suggestedXChromaOffset:TVkChromaLocation;
       suggestedYChromaOffset:TVkChromaLocation;
     end;
{$endif}

     PPVkCommandBufferInheritanceConditionalRenderingInfoEXT=^PVkCommandBufferInheritanceConditionalRenderingInfoEXT;
     PVkCommandBufferInheritanceConditionalRenderingInfoEXT=^TVkCommandBufferInheritanceConditionalRenderingInfoEXT;
     TVkCommandBufferInheritanceConditionalRenderingInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT
       pNext:PVkVoid;
       conditionalRenderingEnable:TVkBool32;
     end;

{$ifdef Android}
     PPVkExternalFormatANDROID=^PVkExternalFormatANDROID;
     PVkExternalFormatANDROID=^TVkExternalFormatANDROID;
     TVkExternalFormatANDROID=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID
       pNext:PVkVoid;
       externalFormat:TVkUInt64;
     end;
{$endif}

     PPVkPhysicalDevice8BitStorageFeatures=^PVkPhysicalDevice8BitStorageFeatures;
     PVkPhysicalDevice8BitStorageFeatures=^TVkPhysicalDevice8BitStorageFeatures;
     TVkPhysicalDevice8BitStorageFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES
       pNext:PVkVoid;
       storageBuffer8BitAccess:TVkBool32;
       uniformAndStorageBuffer8BitAccess:TVkBool32;
       storagePushConstant8:TVkBool32;
     end;

     PPVkPhysicalDevice8BitStorageFeaturesKHR=^PVkPhysicalDevice8BitStorageFeaturesKHR;
     PVkPhysicalDevice8BitStorageFeaturesKHR=^TVkPhysicalDevice8BitStorageFeaturesKHR;
     TVkPhysicalDevice8BitStorageFeaturesKHR=TVkPhysicalDevice8BitStorageFeatures;

     PPVkPhysicalDeviceConditionalRenderingFeaturesEXT=^PVkPhysicalDeviceConditionalRenderingFeaturesEXT;
     PVkPhysicalDeviceConditionalRenderingFeaturesEXT=^TVkPhysicalDeviceConditionalRenderingFeaturesEXT;
     TVkPhysicalDeviceConditionalRenderingFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT
       pNext:PVkVoid;
       conditionalRendering:TVkBool32;
       inheritedConditionalRendering:TVkBool32;
     end;

     PPVkPhysicalDeviceVulkanMemoryModelFeatures=^PVkPhysicalDeviceVulkanMemoryModelFeatures;
     PVkPhysicalDeviceVulkanMemoryModelFeatures=^TVkPhysicalDeviceVulkanMemoryModelFeatures;
     TVkPhysicalDeviceVulkanMemoryModelFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES
       pNext:PVkVoid;
       vulkanMemoryModel:TVkBool32;
       vulkanMemoryModelDeviceScope:TVkBool32;
       vulkanMemoryModelAvailabilityVisibilityChains:TVkBool32;
     end;

     PPVkPhysicalDeviceVulkanMemoryModelFeaturesKHR=^PVkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
     PVkPhysicalDeviceVulkanMemoryModelFeaturesKHR=^TVkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
     TVkPhysicalDeviceVulkanMemoryModelFeaturesKHR=TVkPhysicalDeviceVulkanMemoryModelFeatures;

     PPVkPhysicalDeviceShaderAtomicInt64Features=^PVkPhysicalDeviceShaderAtomicInt64Features;
     PVkPhysicalDeviceShaderAtomicInt64Features=^TVkPhysicalDeviceShaderAtomicInt64Features;
     TVkPhysicalDeviceShaderAtomicInt64Features=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES
       pNext:PVkVoid;
       shaderBufferInt64Atomics:TVkBool32;
       shaderSharedInt64Atomics:TVkBool32;
     end;

     PPVkPhysicalDeviceShaderAtomicInt64FeaturesKHR=^PVkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
     PVkPhysicalDeviceShaderAtomicInt64FeaturesKHR=^TVkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
     TVkPhysicalDeviceShaderAtomicInt64FeaturesKHR=TVkPhysicalDeviceShaderAtomicInt64Features;

     PPVkPhysicalDeviceShaderAtomicFloatFeaturesEXT=^PVkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
     PVkPhysicalDeviceShaderAtomicFloatFeaturesEXT=^TVkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
     TVkPhysicalDeviceShaderAtomicFloatFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT
       pNext:PVkVoid;
       shaderBufferFloat32Atomics:TVkBool32;
       shaderBufferFloat32AtomicAdd:TVkBool32;
       shaderBufferFloat64Atomics:TVkBool32;
       shaderBufferFloat64AtomicAdd:TVkBool32;
       shaderSharedFloat32Atomics:TVkBool32;
       shaderSharedFloat32AtomicAdd:TVkBool32;
       shaderSharedFloat64Atomics:TVkBool32;
       shaderSharedFloat64AtomicAdd:TVkBool32;
       shaderImageFloat32Atomics:TVkBool32;
       shaderImageFloat32AtomicAdd:TVkBool32;
       sparseImageFloat32Atomics:TVkBool32;
       sparseImageFloat32AtomicAdd:TVkBool32;
     end;

     PPVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT=^PVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
     PVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT=^TVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
     TVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT
       pNext:PVkVoid;
       vertexAttributeInstanceRateDivisor:TVkBool32;
       vertexAttributeInstanceRateZeroDivisor:TVkBool32;
     end;

     PPVkQueueFamilyCheckpointPropertiesNV=^PVkQueueFamilyCheckpointPropertiesNV;
     PVkQueueFamilyCheckpointPropertiesNV=^TVkQueueFamilyCheckpointPropertiesNV;
     TVkQueueFamilyCheckpointPropertiesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV
       pNext:PVkVoid;
       checkpointExecutionStageMask:TVkPipelineStageFlags;
     end;

     PPVkCheckpointDataNV=^PVkCheckpointDataNV;
     PVkCheckpointDataNV=^TVkCheckpointDataNV;
     TVkCheckpointDataNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV
       pNext:PVkVoid;
       stage:TVkPipelineStageFlagBits;
       pCheckpointMarker:PVkVoid;
     end;

     PPVkPhysicalDeviceDepthStencilResolveProperties=^PVkPhysicalDeviceDepthStencilResolveProperties;
     PVkPhysicalDeviceDepthStencilResolveProperties=^TVkPhysicalDeviceDepthStencilResolveProperties;
     TVkPhysicalDeviceDepthStencilResolveProperties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES
       pNext:PVkVoid;
       supportedDepthResolveModes:TVkResolveModeFlags;
       supportedStencilResolveModes:TVkResolveModeFlags;
       independentResolveNone:TVkBool32;
       independentResolve:TVkBool32;
     end;

     PPVkPhysicalDeviceDepthStencilResolvePropertiesKHR=^PVkPhysicalDeviceDepthStencilResolvePropertiesKHR;
     PVkPhysicalDeviceDepthStencilResolvePropertiesKHR=^TVkPhysicalDeviceDepthStencilResolvePropertiesKHR;
     TVkPhysicalDeviceDepthStencilResolvePropertiesKHR=TVkPhysicalDeviceDepthStencilResolveProperties;

     PPVkSubpassDescriptionDepthStencilResolve=^PVkSubpassDescriptionDepthStencilResolve;
     PVkSubpassDescriptionDepthStencilResolve=^TVkSubpassDescriptionDepthStencilResolve;
     TVkSubpassDescriptionDepthStencilResolve=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE
       pNext:PVkVoid;
       depthResolveMode:TVkResolveModeFlagBits;
       stencilResolveMode:TVkResolveModeFlagBits;
       pDepthStencilResolveAttachment:PVkAttachmentReference2;
     end;

     PPVkSubpassDescriptionDepthStencilResolveKHR=^PVkSubpassDescriptionDepthStencilResolveKHR;
     PVkSubpassDescriptionDepthStencilResolveKHR=^TVkSubpassDescriptionDepthStencilResolveKHR;
     TVkSubpassDescriptionDepthStencilResolveKHR=TVkSubpassDescriptionDepthStencilResolve;

     PPVkImageViewASTCDecodeModeEXT=^PVkImageViewASTCDecodeModeEXT;
     PVkImageViewASTCDecodeModeEXT=^TVkImageViewASTCDecodeModeEXT;
     TVkImageViewASTCDecodeModeEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT
       pNext:PVkVoid;
       decodeMode:TVkFormat;
     end;

     PPVkPhysicalDeviceASTCDecodeFeaturesEXT=^PVkPhysicalDeviceASTCDecodeFeaturesEXT;
     PVkPhysicalDeviceASTCDecodeFeaturesEXT=^TVkPhysicalDeviceASTCDecodeFeaturesEXT;
     TVkPhysicalDeviceASTCDecodeFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT
       pNext:PVkVoid;
       decodeModeSharedExponent:TVkBool32;
     end;

     PPVkPhysicalDeviceTransformFeedbackFeaturesEXT=^PVkPhysicalDeviceTransformFeedbackFeaturesEXT;
     PVkPhysicalDeviceTransformFeedbackFeaturesEXT=^TVkPhysicalDeviceTransformFeedbackFeaturesEXT;
     TVkPhysicalDeviceTransformFeedbackFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT
       pNext:PVkVoid;
       transformFeedback:TVkBool32;
       geometryStreams:TVkBool32;
     end;

     PPVkPhysicalDeviceTransformFeedbackPropertiesEXT=^PVkPhysicalDeviceTransformFeedbackPropertiesEXT;
     PVkPhysicalDeviceTransformFeedbackPropertiesEXT=^TVkPhysicalDeviceTransformFeedbackPropertiesEXT;
     TVkPhysicalDeviceTransformFeedbackPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT
       pNext:PVkVoid;
       maxTransformFeedbackStreams:TVkUInt32;
       maxTransformFeedbackBuffers:TVkUInt32;
       maxTransformFeedbackBufferSize:TVkDeviceSize;
       maxTransformFeedbackStreamDataSize:TVkUInt32;
       maxTransformFeedbackBufferDataSize:TVkUInt32;
       maxTransformFeedbackBufferDataStride:TVkUInt32;
       transformFeedbackQueries:TVkBool32;
       transformFeedbackStreamsLinesTriangles:TVkBool32;
       transformFeedbackRasterizationStreamSelect:TVkBool32;
       transformFeedbackDraw:TVkBool32;
     end;

     PPVkPipelineRasterizationStateStreamCreateInfoEXT=^PVkPipelineRasterizationStateStreamCreateInfoEXT;
     PVkPipelineRasterizationStateStreamCreateInfoEXT=^TVkPipelineRasterizationStateStreamCreateInfoEXT;
     TVkPipelineRasterizationStateStreamCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkPipelineRasterizationStateStreamCreateFlagsEXT;
       rasterizationStream:TVkUInt32;
     end;

     PPVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV=^PVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
     PVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV=^TVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
     TVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV
       pNext:PVkVoid;
       representativeFragmentTest:TVkBool32;
     end;

     PPVkPipelineRepresentativeFragmentTestStateCreateInfoNV=^PVkPipelineRepresentativeFragmentTestStateCreateInfoNV;
     PVkPipelineRepresentativeFragmentTestStateCreateInfoNV=^TVkPipelineRepresentativeFragmentTestStateCreateInfoNV;
     TVkPipelineRepresentativeFragmentTestStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       representativeFragmentTestEnable:TVkBool32;
     end;

     PPVkPhysicalDeviceExclusiveScissorFeaturesNV=^PVkPhysicalDeviceExclusiveScissorFeaturesNV;
     PVkPhysicalDeviceExclusiveScissorFeaturesNV=^TVkPhysicalDeviceExclusiveScissorFeaturesNV;
     TVkPhysicalDeviceExclusiveScissorFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV
       pNext:PVkVoid;
       exclusiveScissor:TVkBool32;
     end;

     PPVkPipelineViewportExclusiveScissorStateCreateInfoNV=^PVkPipelineViewportExclusiveScissorStateCreateInfoNV;
     PVkPipelineViewportExclusiveScissorStateCreateInfoNV=^TVkPipelineViewportExclusiveScissorStateCreateInfoNV;
     TVkPipelineViewportExclusiveScissorStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       exclusiveScissorCount:TVkUInt32;
       pExclusiveScissors:PVkRect2D;
     end;

     PPVkPhysicalDeviceCornerSampledImageFeaturesNV=^PVkPhysicalDeviceCornerSampledImageFeaturesNV;
     PVkPhysicalDeviceCornerSampledImageFeaturesNV=^TVkPhysicalDeviceCornerSampledImageFeaturesNV;
     TVkPhysicalDeviceCornerSampledImageFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV
       pNext:PVkVoid;
       cornerSampledImage:TVkBool32;
     end;

     PPVkPhysicalDeviceComputeShaderDerivativesFeaturesNV=^PVkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
     PVkPhysicalDeviceComputeShaderDerivativesFeaturesNV=^TVkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
     TVkPhysicalDeviceComputeShaderDerivativesFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV
       pNext:PVkVoid;
       computeDerivativeGroupQuads:TVkBool32;
       computeDerivativeGroupLinear:TVkBool32;
     end;

     PPVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV=^PVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
     PVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV=^TVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
     TVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV
       pNext:PVkVoid;
       fragmentShaderBarycentric:TVkBool32;
     end;

     PPVkPhysicalDeviceShaderImageFootprintFeaturesNV=^PVkPhysicalDeviceShaderImageFootprintFeaturesNV;
     PVkPhysicalDeviceShaderImageFootprintFeaturesNV=^TVkPhysicalDeviceShaderImageFootprintFeaturesNV;
     TVkPhysicalDeviceShaderImageFootprintFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV
       pNext:PVkVoid;
       imageFootprint:TVkBool32;
     end;

     PPVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV=^PVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
     PVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV=^TVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
     TVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV
       pNext:PVkVoid;
       dedicatedAllocationImageAliasing:TVkBool32;
     end;

     PPVkShadingRatePaletteNV=^PVkShadingRatePaletteNV;
     PVkShadingRatePaletteNV=^TVkShadingRatePaletteNV;
     TVkShadingRatePaletteNV=record
       shadingRatePaletteEntryCount:TVkUInt32;
       pShadingRatePaletteEntries:PVkShadingRatePaletteEntryNV;
     end;

     PPVkPipelineViewportShadingRateImageStateCreateInfoNV=^PVkPipelineViewportShadingRateImageStateCreateInfoNV;
     PVkPipelineViewportShadingRateImageStateCreateInfoNV=^TVkPipelineViewportShadingRateImageStateCreateInfoNV;
     TVkPipelineViewportShadingRateImageStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       shadingRateImageEnable:TVkBool32;
       viewportCount:TVkUInt32;
       pShadingRatePalettes:PVkShadingRatePaletteNV;
     end;

     PPVkPhysicalDeviceShadingRateImageFeaturesNV=^PVkPhysicalDeviceShadingRateImageFeaturesNV;
     PVkPhysicalDeviceShadingRateImageFeaturesNV=^TVkPhysicalDeviceShadingRateImageFeaturesNV;
     TVkPhysicalDeviceShadingRateImageFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV
       pNext:PVkVoid;
       shadingRateImage:TVkBool32;
       shadingRateCoarseSampleOrder:TVkBool32;
     end;

     PPVkPhysicalDeviceShadingRateImagePropertiesNV=^PVkPhysicalDeviceShadingRateImagePropertiesNV;
     PVkPhysicalDeviceShadingRateImagePropertiesNV=^TVkPhysicalDeviceShadingRateImagePropertiesNV;
     TVkPhysicalDeviceShadingRateImagePropertiesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV
       pNext:PVkVoid;
       shadingRateTexelSize:TVkExtent2D;
       shadingRatePaletteSize:TVkUInt32;
       shadingRateMaxCoarseSamples:TVkUInt32;
     end;

     PPVkCoarseSampleLocationNV=^PVkCoarseSampleLocationNV;
     PVkCoarseSampleLocationNV=^TVkCoarseSampleLocationNV;
     TVkCoarseSampleLocationNV=record
       pixelX:TVkUInt32;
       pixelY:TVkUInt32;
       sample:TVkUInt32;
     end;

     PPVkCoarseSampleOrderCustomNV=^PVkCoarseSampleOrderCustomNV;
     PVkCoarseSampleOrderCustomNV=^TVkCoarseSampleOrderCustomNV;
     TVkCoarseSampleOrderCustomNV=record
       shadingRate:TVkShadingRatePaletteEntryNV;
       sampleCount:TVkUInt32;
       sampleLocationCount:TVkUInt32;
       pSampleLocations:PVkCoarseSampleLocationNV;
     end;

     PPVkPipelineViewportCoarseSampleOrderStateCreateInfoNV=^PVkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
     PVkPipelineViewportCoarseSampleOrderStateCreateInfoNV=^TVkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
     TVkPipelineViewportCoarseSampleOrderStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       sampleOrderType:TVkCoarseSampleOrderTypeNV;
       customSampleOrderCount:TVkUInt32;
       pCustomSampleOrders:PVkCoarseSampleOrderCustomNV;
     end;

     PPVkPhysicalDeviceMeshShaderFeaturesNV=^PVkPhysicalDeviceMeshShaderFeaturesNV;
     PVkPhysicalDeviceMeshShaderFeaturesNV=^TVkPhysicalDeviceMeshShaderFeaturesNV;
     TVkPhysicalDeviceMeshShaderFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV
       pNext:PVkVoid;
       taskShader:TVkBool32;
       meshShader:TVkBool32;
     end;

     PPVkPhysicalDeviceMeshShaderPropertiesNV=^PVkPhysicalDeviceMeshShaderPropertiesNV;
     PVkPhysicalDeviceMeshShaderPropertiesNV=^TVkPhysicalDeviceMeshShaderPropertiesNV;
     TVkPhysicalDeviceMeshShaderPropertiesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV
       pNext:PVkVoid;
       maxDrawMeshTasksCount:TVkUInt32;
       maxTaskWorkGroupInvocations:TVkUInt32;
       maxTaskWorkGroupSize:array[0..2] of TVkUInt32;
       maxTaskTotalMemorySize:TVkUInt32;
       maxTaskOutputCount:TVkUInt32;
       maxMeshWorkGroupInvocations:TVkUInt32;
       maxMeshWorkGroupSize:array[0..2] of TVkUInt32;
       maxMeshTotalMemorySize:TVkUInt32;
       maxMeshOutputVertices:TVkUInt32;
       maxMeshOutputPrimitives:TVkUInt32;
       maxMeshMultiviewViewCount:TVkUInt32;
       meshOutputPerVertexGranularity:TVkUInt32;
       meshOutputPerPrimitiveGranularity:TVkUInt32;
     end;

     PPVkDrawMeshTasksIndirectCommandNV=^PVkDrawMeshTasksIndirectCommandNV;
     PVkDrawMeshTasksIndirectCommandNV=^TVkDrawMeshTasksIndirectCommandNV;
     TVkDrawMeshTasksIndirectCommandNV=record
       taskCount:TVkUInt32;
       firstTask:TVkUInt32;
     end;

     PPVkRayTracingShaderGroupCreateInfoNV=^PVkRayTracingShaderGroupCreateInfoNV;
     PVkRayTracingShaderGroupCreateInfoNV=^TVkRayTracingShaderGroupCreateInfoNV;
     TVkRayTracingShaderGroupCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV
       pNext:PVkVoid;
       type_:TVkRayTracingShaderGroupTypeKHR;
       generalShader:TVkUInt32;
       closestHitShader:TVkUInt32;
       anyHitShader:TVkUInt32;
       intersectionShader:TVkUInt32;
     end;

     PPVkRayTracingShaderGroupCreateInfoKHR=^PVkRayTracingShaderGroupCreateInfoKHR;
     PVkRayTracingShaderGroupCreateInfoKHR=^TVkRayTracingShaderGroupCreateInfoKHR;
     TVkRayTracingShaderGroupCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR
       pNext:PVkVoid;
       type_:TVkRayTracingShaderGroupTypeKHR;
       generalShader:TVkUInt32;
       closestHitShader:TVkUInt32;
       anyHitShader:TVkUInt32;
       intersectionShader:TVkUInt32;
       pShaderGroupCaptureReplayHandle:PVkVoid;
     end;

     PPVkRayTracingPipelineCreateInfoNV=^PVkRayTracingPipelineCreateInfoNV;
     PVkRayTracingPipelineCreateInfoNV=^TVkRayTracingPipelineCreateInfoNV;
     TVkRayTracingPipelineCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV
       pNext:PVkVoid;
       flags:TVkPipelineCreateFlags;
       stageCount:TVkUInt32;
       pStages:PVkPipelineShaderStageCreateInfo;
       groupCount:TVkUInt32;
       pGroups:PVkRayTracingShaderGroupCreateInfoNV;
       maxRecursionDepth:TVkUInt32;
       layout:TVkPipelineLayout;
       basePipelineHandle:TVkPipeline;
       basePipelineIndex:TVkInt32;
     end;

     PPVkRayTracingPipelineInterfaceCreateInfoKHR=^PVkRayTracingPipelineInterfaceCreateInfoKHR;
     PVkRayTracingPipelineInterfaceCreateInfoKHR=^TVkRayTracingPipelineInterfaceCreateInfoKHR;
     TVkRayTracingPipelineInterfaceCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR
       pNext:PVkVoid;
       maxPayloadSize:TVkUInt32;
       maxAttributeSize:TVkUInt32;
       maxCallableSize:TVkUInt32;
     end;

     PPVkGeometryTrianglesNV=^PVkGeometryTrianglesNV;
     PVkGeometryTrianglesNV=^TVkGeometryTrianglesNV;
     TVkGeometryTrianglesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV
       pNext:PVkVoid;
       vertexData:TVkBuffer;
       vertexOffset:TVkDeviceSize;
       vertexCount:TVkUInt32;
       vertexStride:TVkDeviceSize;
       vertexFormat:TVkFormat;
       indexData:TVkBuffer;
       indexOffset:TVkDeviceSize;
       indexCount:TVkUInt32;
       indexType:TVkIndexType;
       transformData:TVkBuffer;
       transformOffset:TVkDeviceSize;
     end;

     PPVkGeometryAABBNV=^PVkGeometryAABBNV;
     PVkGeometryAABBNV=^TVkGeometryAABBNV;
     TVkGeometryAABBNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV
       pNext:PVkVoid;
       aabbData:TVkBuffer;
       numAABBs:TVkUInt32;
       stride:TVkUInt32;
       offset:TVkDeviceSize;
     end;

     PPVkGeometryDataNV=^PVkGeometryDataNV;
     PVkGeometryDataNV=^TVkGeometryDataNV;
     TVkGeometryDataNV=record
       triangles:TVkGeometryTrianglesNV;
       aabbs:TVkGeometryAABBNV;
     end;

     PPVkGeometryNV=^PVkGeometryNV;
     PVkGeometryNV=^TVkGeometryNV;
     TVkGeometryNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_GEOMETRY_NV
       pNext:PVkVoid;
       geometryType:TVkGeometryTypeKHR;
       geometry:TVkGeometryDataNV;
       flags:TVkGeometryFlagsKHR;
     end;

     PPVkAccelerationStructureInfoNV=^PVkAccelerationStructureInfoNV;
     PVkAccelerationStructureInfoNV=^TVkAccelerationStructureInfoNV;
     TVkAccelerationStructureInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV
       pNext:PVkVoid;
       type_:TVkAccelerationStructureTypeNV;
       flags:TVkBuildAccelerationStructureFlagsNV;
       instanceCount:TVkUInt32;
       geometryCount:TVkUInt32;
       pGeometries:PVkGeometryNV;
     end;

     PPVkAccelerationStructureCreateInfoNV=^PVkAccelerationStructureCreateInfoNV;
     PVkAccelerationStructureCreateInfoNV=^TVkAccelerationStructureCreateInfoNV;
     TVkAccelerationStructureCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV
       pNext:PVkVoid;
       compactedSize:TVkDeviceSize;
       info:TVkAccelerationStructureInfoNV;
     end;

     PPVkBindAccelerationStructureMemoryInfoKHR=^PVkBindAccelerationStructureMemoryInfoKHR;
     PVkBindAccelerationStructureMemoryInfoKHR=^TVkBindAccelerationStructureMemoryInfoKHR;
     TVkBindAccelerationStructureMemoryInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR
       pNext:PVkVoid;
       accelerationStructure:TVkAccelerationStructureKHR;
       memory:TVkDeviceMemory;
       memoryOffset:TVkDeviceSize;
       deviceIndexCount:TVkUInt32;
       pDeviceIndices:PVkUInt32;
     end;

     PPVkBindAccelerationStructureMemoryInfoNV=^PVkBindAccelerationStructureMemoryInfoNV;
     PVkBindAccelerationStructureMemoryInfoNV=^TVkBindAccelerationStructureMemoryInfoNV;
     TVkBindAccelerationStructureMemoryInfoNV=TVkBindAccelerationStructureMemoryInfoKHR;

     PPVkWriteDescriptorSetAccelerationStructureKHR=^PVkWriteDescriptorSetAccelerationStructureKHR;
     PVkWriteDescriptorSetAccelerationStructureKHR=^TVkWriteDescriptorSetAccelerationStructureKHR;
     TVkWriteDescriptorSetAccelerationStructureKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR
       pNext:PVkVoid;
       accelerationStructureCount:TVkUInt32;
       pAccelerationStructures:PVkAccelerationStructureKHR;
     end;

     PPVkWriteDescriptorSetAccelerationStructureNV=^PVkWriteDescriptorSetAccelerationStructureNV;
     PVkWriteDescriptorSetAccelerationStructureNV=^TVkWriteDescriptorSetAccelerationStructureNV;
     TVkWriteDescriptorSetAccelerationStructureNV=TVkWriteDescriptorSetAccelerationStructureKHR;

     PPVkAccelerationStructureMemoryRequirementsInfoKHR=^PVkAccelerationStructureMemoryRequirementsInfoKHR;
     PVkAccelerationStructureMemoryRequirementsInfoKHR=^TVkAccelerationStructureMemoryRequirementsInfoKHR;
     TVkAccelerationStructureMemoryRequirementsInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR
       pNext:PVkVoid;
       type_:TVkAccelerationStructureMemoryRequirementsTypeKHR;
       buildType:TVkAccelerationStructureBuildTypeKHR;
       accelerationStructure:TVkAccelerationStructureKHR;
     end;

     PPVkAccelerationStructureMemoryRequirementsInfoNV=^PVkAccelerationStructureMemoryRequirementsInfoNV;
     PVkAccelerationStructureMemoryRequirementsInfoNV=^TVkAccelerationStructureMemoryRequirementsInfoNV;
     TVkAccelerationStructureMemoryRequirementsInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV
       pNext:PVkVoid;
       type_:TVkAccelerationStructureMemoryRequirementsTypeNV;
       accelerationStructure:TVkAccelerationStructureNV;
     end;

     PPVkPhysicalDeviceRayTracingFeaturesKHR=^PVkPhysicalDeviceRayTracingFeaturesKHR;
     PVkPhysicalDeviceRayTracingFeaturesKHR=^TVkPhysicalDeviceRayTracingFeaturesKHR;
     TVkPhysicalDeviceRayTracingFeaturesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR
       pNext:PVkVoid;
       rayTracing:TVkBool32;
       rayTracingShaderGroupHandleCaptureReplay:TVkBool32;
       rayTracingShaderGroupHandleCaptureReplayMixed:TVkBool32;
       rayTracingAccelerationStructureCaptureReplay:TVkBool32;
       rayTracingIndirectTraceRays:TVkBool32;
       rayTracingIndirectAccelerationStructureBuild:TVkBool32;
       rayTracingHostAccelerationStructureCommands:TVkBool32;
       rayQuery:TVkBool32;
       rayTracingPrimitiveCulling:TVkBool32;
     end;

     PPVkPhysicalDeviceRayTracingPropertiesKHR=^PVkPhysicalDeviceRayTracingPropertiesKHR;
     PVkPhysicalDeviceRayTracingPropertiesKHR=^TVkPhysicalDeviceRayTracingPropertiesKHR;
     TVkPhysicalDeviceRayTracingPropertiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR
       pNext:PVkVoid;
       shaderGroupHandleSize:TVkUInt32;
       maxRecursionDepth:TVkUInt32;
       maxShaderGroupStride:TVkUInt32;
       shaderGroupBaseAlignment:TVkUInt32;
       maxGeometryCount:TVkUInt64;
       maxInstanceCount:TVkUInt64;
       maxPrimitiveCount:TVkUInt64;
       maxDescriptorSetAccelerationStructures:TVkUInt32;
       shaderGroupHandleCaptureReplaySize:TVkUInt32;
     end;

     PPVkPhysicalDeviceRayTracingPropertiesNV=^PVkPhysicalDeviceRayTracingPropertiesNV;
     PVkPhysicalDeviceRayTracingPropertiesNV=^TVkPhysicalDeviceRayTracingPropertiesNV;
     TVkPhysicalDeviceRayTracingPropertiesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV
       pNext:PVkVoid;
       shaderGroupHandleSize:TVkUInt32;
       maxRecursionDepth:TVkUInt32;
       maxShaderGroupStride:TVkUInt32;
       shaderGroupBaseAlignment:TVkUInt32;
       maxGeometryCount:TVkUInt64;
       maxInstanceCount:TVkUInt64;
       maxTriangleCount:TVkUInt64;
       maxDescriptorSetAccelerationStructures:TVkUInt32;
     end;

     PPVkStridedBufferRegionKHR=^PVkStridedBufferRegionKHR;
     PVkStridedBufferRegionKHR=^TVkStridedBufferRegionKHR;
     TVkStridedBufferRegionKHR=record
       buffer:TVkBuffer;
       offset:TVkDeviceSize;
       stride:TVkDeviceSize;
       size:TVkDeviceSize;
     end;

     PPVkTraceRaysIndirectCommandKHR=^PVkTraceRaysIndirectCommandKHR;
     PVkTraceRaysIndirectCommandKHR=^TVkTraceRaysIndirectCommandKHR;
     TVkTraceRaysIndirectCommandKHR=record
       width:TVkUInt32;
       height:TVkUInt32;
       depth:TVkUInt32;
     end;

     PPVkDrmFormatModifierPropertiesEXT=^PVkDrmFormatModifierPropertiesEXT;
     PVkDrmFormatModifierPropertiesEXT=^TVkDrmFormatModifierPropertiesEXT;
     TVkDrmFormatModifierPropertiesEXT=record
       drmFormatModifier:TVkUInt64;
       drmFormatModifierPlaneCount:TVkUInt32;
       drmFormatModifierTilingFeatures:TVkFormatFeatureFlags;
     end;

     PPVkDrmFormatModifierPropertiesListEXT=^PVkDrmFormatModifierPropertiesListEXT;
     PVkDrmFormatModifierPropertiesListEXT=^TVkDrmFormatModifierPropertiesListEXT;
     TVkDrmFormatModifierPropertiesListEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT
       pNext:PVkVoid;
       drmFormatModifierCount:TVkUInt32;
       pDrmFormatModifierProperties:PVkDrmFormatModifierPropertiesEXT;
     end;

     PPVkPhysicalDeviceImageDrmFormatModifierInfoEXT=^PVkPhysicalDeviceImageDrmFormatModifierInfoEXT;
     PVkPhysicalDeviceImageDrmFormatModifierInfoEXT=^TVkPhysicalDeviceImageDrmFormatModifierInfoEXT;
     TVkPhysicalDeviceImageDrmFormatModifierInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT
       pNext:PVkVoid;
       drmFormatModifier:TVkUInt64;
       sharingMode:TVkSharingMode;
       queueFamilyIndexCount:TVkUInt32;
       pQueueFamilyIndices:PVkUInt32;
     end;

     PPVkImageDrmFormatModifierListCreateInfoEXT=^PVkImageDrmFormatModifierListCreateInfoEXT;
     PVkImageDrmFormatModifierListCreateInfoEXT=^TVkImageDrmFormatModifierListCreateInfoEXT;
     TVkImageDrmFormatModifierListCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT
       pNext:PVkVoid;
       drmFormatModifierCount:TVkUInt32;
       pDrmFormatModifiers:PVkUInt64;
     end;

     PPVkImageDrmFormatModifierExplicitCreateInfoEXT=^PVkImageDrmFormatModifierExplicitCreateInfoEXT;
     PVkImageDrmFormatModifierExplicitCreateInfoEXT=^TVkImageDrmFormatModifierExplicitCreateInfoEXT;
     TVkImageDrmFormatModifierExplicitCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT
       pNext:PVkVoid;
       drmFormatModifier:TVkUInt64;
       drmFormatModifierPlaneCount:TVkUInt32;
       pPlaneLayouts:PVkSubresourceLayout;
     end;

     PPVkImageDrmFormatModifierPropertiesEXT=^PVkImageDrmFormatModifierPropertiesEXT;
     PVkImageDrmFormatModifierPropertiesEXT=^TVkImageDrmFormatModifierPropertiesEXT;
     TVkImageDrmFormatModifierPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT
       pNext:PVkVoid;
       drmFormatModifier:TVkUInt64;
     end;

     PPVkImageStencilUsageCreateInfo=^PVkImageStencilUsageCreateInfo;
     PVkImageStencilUsageCreateInfo=^TVkImageStencilUsageCreateInfo;
     TVkImageStencilUsageCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO
       pNext:PVkVoid;
       stencilUsage:TVkImageUsageFlags;
     end;

     PPVkImageStencilUsageCreateInfoEXT=^PVkImageStencilUsageCreateInfoEXT;
     PVkImageStencilUsageCreateInfoEXT=^TVkImageStencilUsageCreateInfoEXT;
     TVkImageStencilUsageCreateInfoEXT=TVkImageStencilUsageCreateInfo;

     PPVkDeviceMemoryOverallocationCreateInfoAMD=^PVkDeviceMemoryOverallocationCreateInfoAMD;
     PVkDeviceMemoryOverallocationCreateInfoAMD=^TVkDeviceMemoryOverallocationCreateInfoAMD;
     TVkDeviceMemoryOverallocationCreateInfoAMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD
       pNext:PVkVoid;
       overallocationBehavior:TVkMemoryOverallocationBehaviorAMD;
     end;

     PPVkPhysicalDeviceFragmentDensityMapFeaturesEXT=^PVkPhysicalDeviceFragmentDensityMapFeaturesEXT;
     PVkPhysicalDeviceFragmentDensityMapFeaturesEXT=^TVkPhysicalDeviceFragmentDensityMapFeaturesEXT;
     TVkPhysicalDeviceFragmentDensityMapFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT
       pNext:PVkVoid;
       fragmentDensityMap:TVkBool32;
       fragmentDensityMapDynamic:TVkBool32;
       fragmentDensityMapNonSubsampledImages:TVkBool32;
     end;

     PPVkPhysicalDeviceFragmentDensityMap2FeaturesEXT=^PVkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
     PVkPhysicalDeviceFragmentDensityMap2FeaturesEXT=^TVkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
     TVkPhysicalDeviceFragmentDensityMap2FeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT
       pNext:PVkVoid;
       fragmentDensityMapDeferred:TVkBool32;
     end;

     PPVkPhysicalDeviceFragmentDensityMapPropertiesEXT=^PVkPhysicalDeviceFragmentDensityMapPropertiesEXT;
     PVkPhysicalDeviceFragmentDensityMapPropertiesEXT=^TVkPhysicalDeviceFragmentDensityMapPropertiesEXT;
     TVkPhysicalDeviceFragmentDensityMapPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT
       pNext:PVkVoid;
       minFragmentDensityTexelSize:TVkExtent2D;
       maxFragmentDensityTexelSize:TVkExtent2D;
       fragmentDensityInvocations:TVkBool32;
     end;

     PPVkPhysicalDeviceFragmentDensityMap2PropertiesEXT=^PVkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
     PVkPhysicalDeviceFragmentDensityMap2PropertiesEXT=^TVkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
     TVkPhysicalDeviceFragmentDensityMap2PropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT
       pNext:PVkVoid;
       subsampledLoads:TVkBool32;
       subsampledCoarseReconstructionEarlyAccess:TVkBool32;
       maxSubsampledArrayLayers:TVkUInt32;
       maxDescriptorSetSubsampledSamplers:TVkUInt32;
     end;

     PPVkRenderPassFragmentDensityMapCreateInfoEXT=^PVkRenderPassFragmentDensityMapCreateInfoEXT;
     PVkRenderPassFragmentDensityMapCreateInfoEXT=^TVkRenderPassFragmentDensityMapCreateInfoEXT;
     TVkRenderPassFragmentDensityMapCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT
       pNext:PVkVoid;
       fragmentDensityMapAttachment:TVkAttachmentReference;
     end;

     PPVkPhysicalDeviceScalarBlockLayoutFeatures=^PVkPhysicalDeviceScalarBlockLayoutFeatures;
     PVkPhysicalDeviceScalarBlockLayoutFeatures=^TVkPhysicalDeviceScalarBlockLayoutFeatures;
     TVkPhysicalDeviceScalarBlockLayoutFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES
       pNext:PVkVoid;
       scalarBlockLayout:TVkBool32;
     end;

     PPVkPhysicalDeviceScalarBlockLayoutFeaturesEXT=^PVkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
     PVkPhysicalDeviceScalarBlockLayoutFeaturesEXT=^TVkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
     TVkPhysicalDeviceScalarBlockLayoutFeaturesEXT=TVkPhysicalDeviceScalarBlockLayoutFeatures;

     PPVkSurfaceProtectedCapabilitiesKHR=^PVkSurfaceProtectedCapabilitiesKHR;
     PVkSurfaceProtectedCapabilitiesKHR=^TVkSurfaceProtectedCapabilitiesKHR;
     TVkSurfaceProtectedCapabilitiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR
       pNext:PVkVoid;
       supportsProtected:TVkBool32;
     end;

     PPVkPhysicalDeviceUniformBufferStandardLayoutFeatures=^PVkPhysicalDeviceUniformBufferStandardLayoutFeatures;
     PVkPhysicalDeviceUniformBufferStandardLayoutFeatures=^TVkPhysicalDeviceUniformBufferStandardLayoutFeatures;
     TVkPhysicalDeviceUniformBufferStandardLayoutFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES
       pNext:PVkVoid;
       uniformBufferStandardLayout:TVkBool32;
     end;

     PPVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR=^PVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;
     PVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR=^TVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;
     TVkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR=TVkPhysicalDeviceUniformBufferStandardLayoutFeatures;

     PPVkPhysicalDeviceDepthClipEnableFeaturesEXT=^PVkPhysicalDeviceDepthClipEnableFeaturesEXT;
     PVkPhysicalDeviceDepthClipEnableFeaturesEXT=^TVkPhysicalDeviceDepthClipEnableFeaturesEXT;
     TVkPhysicalDeviceDepthClipEnableFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT
       pNext:PVkVoid;
       depthClipEnable:TVkBool32;
     end;

     PPVkPipelineRasterizationDepthClipStateCreateInfoEXT=^PVkPipelineRasterizationDepthClipStateCreateInfoEXT;
     PVkPipelineRasterizationDepthClipStateCreateInfoEXT=^TVkPipelineRasterizationDepthClipStateCreateInfoEXT;
     TVkPipelineRasterizationDepthClipStateCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkPipelineRasterizationDepthClipStateCreateFlagsEXT;
       depthClipEnable:TVkBool32;
     end;

     PPVkPhysicalDeviceMemoryBudgetPropertiesEXT=^PVkPhysicalDeviceMemoryBudgetPropertiesEXT;
     PVkPhysicalDeviceMemoryBudgetPropertiesEXT=^TVkPhysicalDeviceMemoryBudgetPropertiesEXT;
     TVkPhysicalDeviceMemoryBudgetPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT
       pNext:PVkVoid;
       heapBudget:array[0..VK_MAX_MEMORY_HEAPS-1] of TVkDeviceSize;
       heapUsage:array[0..VK_MAX_MEMORY_HEAPS-1] of TVkDeviceSize;
     end;

     PPVkPhysicalDeviceMemoryPriorityFeaturesEXT=^PVkPhysicalDeviceMemoryPriorityFeaturesEXT;
     PVkPhysicalDeviceMemoryPriorityFeaturesEXT=^TVkPhysicalDeviceMemoryPriorityFeaturesEXT;
     TVkPhysicalDeviceMemoryPriorityFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT
       pNext:PVkVoid;
       memoryPriority:TVkBool32;
     end;

     PPVkMemoryPriorityAllocateInfoEXT=^PVkMemoryPriorityAllocateInfoEXT;
     PVkMemoryPriorityAllocateInfoEXT=^TVkMemoryPriorityAllocateInfoEXT;
     TVkMemoryPriorityAllocateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT
       pNext:PVkVoid;
       priority:TVkFloat;
     end;

     PPVkPhysicalDeviceBufferDeviceAddressFeatures=^PVkPhysicalDeviceBufferDeviceAddressFeatures;
     PVkPhysicalDeviceBufferDeviceAddressFeatures=^TVkPhysicalDeviceBufferDeviceAddressFeatures;
     TVkPhysicalDeviceBufferDeviceAddressFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES
       pNext:PVkVoid;
       bufferDeviceAddress:TVkBool32;
       bufferDeviceAddressCaptureReplay:TVkBool32;
       bufferDeviceAddressMultiDevice:TVkBool32;
     end;

     PPVkPhysicalDeviceBufferDeviceAddressFeaturesKHR=^PVkPhysicalDeviceBufferDeviceAddressFeaturesKHR;
     PVkPhysicalDeviceBufferDeviceAddressFeaturesKHR=^TVkPhysicalDeviceBufferDeviceAddressFeaturesKHR;
     TVkPhysicalDeviceBufferDeviceAddressFeaturesKHR=TVkPhysicalDeviceBufferDeviceAddressFeatures;

     PPVkPhysicalDeviceBufferDeviceAddressFeaturesEXT=^PVkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
     PVkPhysicalDeviceBufferDeviceAddressFeaturesEXT=^TVkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
     TVkPhysicalDeviceBufferDeviceAddressFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT
       pNext:PVkVoid;
       bufferDeviceAddress:TVkBool32;
       bufferDeviceAddressCaptureReplay:TVkBool32;
       bufferDeviceAddressMultiDevice:TVkBool32;
     end;

     PPVkPhysicalDeviceBufferAddressFeaturesEXT=^PVkPhysicalDeviceBufferAddressFeaturesEXT;
     PVkPhysicalDeviceBufferAddressFeaturesEXT=^TVkPhysicalDeviceBufferAddressFeaturesEXT;
     TVkPhysicalDeviceBufferAddressFeaturesEXT=TVkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

     PPVkBufferDeviceAddressInfo=^PVkBufferDeviceAddressInfo;
     PVkBufferDeviceAddressInfo=^TVkBufferDeviceAddressInfo;
     TVkBufferDeviceAddressInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO
       pNext:PVkVoid;
       buffer:TVkBuffer;
     end;

     PPVkBufferDeviceAddressInfoKHR=^PVkBufferDeviceAddressInfoKHR;
     PVkBufferDeviceAddressInfoKHR=^TVkBufferDeviceAddressInfoKHR;
     TVkBufferDeviceAddressInfoKHR=TVkBufferDeviceAddressInfo;

     PPVkBufferDeviceAddressInfoEXT=^PVkBufferDeviceAddressInfoEXT;
     PVkBufferDeviceAddressInfoEXT=^TVkBufferDeviceAddressInfoEXT;
     TVkBufferDeviceAddressInfoEXT=TVkBufferDeviceAddressInfo;

     PPVkBufferOpaqueCaptureAddressCreateInfo=^PVkBufferOpaqueCaptureAddressCreateInfo;
     PVkBufferOpaqueCaptureAddressCreateInfo=^TVkBufferOpaqueCaptureAddressCreateInfo;
     TVkBufferOpaqueCaptureAddressCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO
       pNext:PVkVoid;
       opaqueCaptureAddress:TVkUInt64;
     end;

     PPVkBufferOpaqueCaptureAddressCreateInfoKHR=^PVkBufferOpaqueCaptureAddressCreateInfoKHR;
     PVkBufferOpaqueCaptureAddressCreateInfoKHR=^TVkBufferOpaqueCaptureAddressCreateInfoKHR;
     TVkBufferOpaqueCaptureAddressCreateInfoKHR=TVkBufferOpaqueCaptureAddressCreateInfo;

     PPVkBufferDeviceAddressCreateInfoEXT=^PVkBufferDeviceAddressCreateInfoEXT;
     PVkBufferDeviceAddressCreateInfoEXT=^TVkBufferDeviceAddressCreateInfoEXT;
     TVkBufferDeviceAddressCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT
       pNext:PVkVoid;
       deviceAddress:TVkDeviceAddress;
     end;

     PPVkPhysicalDeviceImageViewImageFormatInfoEXT=^PVkPhysicalDeviceImageViewImageFormatInfoEXT;
     PVkPhysicalDeviceImageViewImageFormatInfoEXT=^TVkPhysicalDeviceImageViewImageFormatInfoEXT;
     TVkPhysicalDeviceImageViewImageFormatInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT
       pNext:PVkVoid;
       imageViewType:TVkImageViewType;
     end;

     PPVkFilterCubicImageViewImageFormatPropertiesEXT=^PVkFilterCubicImageViewImageFormatPropertiesEXT;
     PVkFilterCubicImageViewImageFormatPropertiesEXT=^TVkFilterCubicImageViewImageFormatPropertiesEXT;
     TVkFilterCubicImageViewImageFormatPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT
       pNext:PVkVoid;
       filterCubic:TVkBool32;
       filterCubicMinmax:TVkBool32;
     end;

     PPVkPhysicalDeviceImagelessFramebufferFeatures=^PVkPhysicalDeviceImagelessFramebufferFeatures;
     PVkPhysicalDeviceImagelessFramebufferFeatures=^TVkPhysicalDeviceImagelessFramebufferFeatures;
     TVkPhysicalDeviceImagelessFramebufferFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES
       pNext:PVkVoid;
       imagelessFramebuffer:TVkBool32;
     end;

     PPVkPhysicalDeviceImagelessFramebufferFeaturesKHR=^PVkPhysicalDeviceImagelessFramebufferFeaturesKHR;
     PVkPhysicalDeviceImagelessFramebufferFeaturesKHR=^TVkPhysicalDeviceImagelessFramebufferFeaturesKHR;
     TVkPhysicalDeviceImagelessFramebufferFeaturesKHR=TVkPhysicalDeviceImagelessFramebufferFeatures;

     PPVkFramebufferAttachmentImageInfo=^PVkFramebufferAttachmentImageInfo;
     PVkFramebufferAttachmentImageInfo=^TVkFramebufferAttachmentImageInfo;
     TVkFramebufferAttachmentImageInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO
       pNext:PVkVoid;
       flags:TVkImageCreateFlags;
       usage:TVkImageUsageFlags;
       width:TVkUInt32;
       height:TVkUInt32;
       layerCount:TVkUInt32;
       viewFormatCount:TVkUInt32;
       pViewFormats:PVkFormat;
     end;

     PPVkFramebufferAttachmentsCreateInfo=^PVkFramebufferAttachmentsCreateInfo;
     PVkFramebufferAttachmentsCreateInfo=^TVkFramebufferAttachmentsCreateInfo;
     TVkFramebufferAttachmentsCreateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO
       pNext:PVkVoid;
       attachmentImageInfoCount:TVkUInt32;
       pAttachmentImageInfos:PVkFramebufferAttachmentImageInfo;
     end;

     PPVkFramebufferAttachmentsCreateInfoKHR=^PVkFramebufferAttachmentsCreateInfoKHR;
     PVkFramebufferAttachmentsCreateInfoKHR=^TVkFramebufferAttachmentsCreateInfoKHR;
     TVkFramebufferAttachmentsCreateInfoKHR=TVkFramebufferAttachmentsCreateInfo;

     PPVkFramebufferAttachmentImageInfoKHR=^PVkFramebufferAttachmentImageInfoKHR;
     PVkFramebufferAttachmentImageInfoKHR=^TVkFramebufferAttachmentImageInfoKHR;
     TVkFramebufferAttachmentImageInfoKHR=TVkFramebufferAttachmentImageInfo;

     PPVkRenderPassAttachmentBeginInfo=^PVkRenderPassAttachmentBeginInfo;
     PVkRenderPassAttachmentBeginInfo=^TVkRenderPassAttachmentBeginInfo;
     TVkRenderPassAttachmentBeginInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO
       pNext:PVkVoid; //< Pointer to next structure
       attachmentCount:TVkUInt32;
       pAttachments:PVkImageView;
     end;

     PPVkRenderPassAttachmentBeginInfoKHR=^PVkRenderPassAttachmentBeginInfoKHR;
     PVkRenderPassAttachmentBeginInfoKHR=^TVkRenderPassAttachmentBeginInfoKHR;
     TVkRenderPassAttachmentBeginInfoKHR=TVkRenderPassAttachmentBeginInfo;

     PPVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT=^PVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;
     PVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT=^TVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;
     TVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT
       pNext:PVkVoid;
       textureCompressionASTC_HDR:TVkBool32;
     end;

     PPVkPhysicalDeviceCooperativeMatrixFeaturesNV=^PVkPhysicalDeviceCooperativeMatrixFeaturesNV;
     PVkPhysicalDeviceCooperativeMatrixFeaturesNV=^TVkPhysicalDeviceCooperativeMatrixFeaturesNV;
     TVkPhysicalDeviceCooperativeMatrixFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV
       pNext:PVkVoid;
       cooperativeMatrix:TVkBool32;
       cooperativeMatrixRobustBufferAccess:TVkBool32;
     end;

     PPVkPhysicalDeviceCooperativeMatrixPropertiesNV=^PVkPhysicalDeviceCooperativeMatrixPropertiesNV;
     PVkPhysicalDeviceCooperativeMatrixPropertiesNV=^TVkPhysicalDeviceCooperativeMatrixPropertiesNV;
     TVkPhysicalDeviceCooperativeMatrixPropertiesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV
       pNext:PVkVoid;
       cooperativeMatrixSupportedStages:TVkShaderStageFlags;
     end;

     PPVkCooperativeMatrixPropertiesNV=^PVkCooperativeMatrixPropertiesNV;
     PVkCooperativeMatrixPropertiesNV=^TVkCooperativeMatrixPropertiesNV;
     TVkCooperativeMatrixPropertiesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV
       pNext:PVkVoid;
       MSize:TVkUInt32;
       NSize:TVkUInt32;
       KSize:TVkUInt32;
       AType:TVkComponentTypeNV;
       BType:TVkComponentTypeNV;
       CType:TVkComponentTypeNV;
       DType:TVkComponentTypeNV;
       scope:TVkScopeNV;
     end;

     PPVkPhysicalDeviceYcbcrImageArraysFeaturesEXT=^PVkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
     PVkPhysicalDeviceYcbcrImageArraysFeaturesEXT=^TVkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
     TVkPhysicalDeviceYcbcrImageArraysFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT
       pNext:PVkVoid;
       ycbcrImageArrays:TVkBool32;
     end;

     PPVkImageViewHandleInfoNVX=^PVkImageViewHandleInfoNVX;
     PVkImageViewHandleInfoNVX=^TVkImageViewHandleInfoNVX;
     TVkImageViewHandleInfoNVX=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX
       pNext:PVkVoid;
       imageView:TVkImageView;
       descriptorType:TVkDescriptorType;
       sampler:TVkSampler;
     end;

     PPVkImageViewAddressPropertiesNVX=^PVkImageViewAddressPropertiesNVX;
     PVkImageViewAddressPropertiesNVX=^TVkImageViewAddressPropertiesNVX;
     TVkImageViewAddressPropertiesNVX=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX
       pNext:PVkVoid;
       deviceAddress:TVkDeviceAddress;
       size:TVkDeviceSize;
     end;

     PPVkPresentFrameTokenGGP=^PVkPresentFrameTokenGGP;
     PVkPresentFrameTokenGGP=^TVkPresentFrameTokenGGP;
     TVkPresentFrameTokenGGP=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP
       pNext:PVkVoid;
       frameToken:TGgpFrameToken;
     end;

     PPVkPipelineCreationFeedbackEXT=^PVkPipelineCreationFeedbackEXT;
     PVkPipelineCreationFeedbackEXT=^TVkPipelineCreationFeedbackEXT;
     TVkPipelineCreationFeedbackEXT=record
       flags:TVkPipelineCreationFeedbackFlagsEXT;
       duration:TVkUInt64;
     end;

     PPVkPipelineCreationFeedbackCreateInfoEXT=^PVkPipelineCreationFeedbackCreateInfoEXT;
     PVkPipelineCreationFeedbackCreateInfoEXT=^TVkPipelineCreationFeedbackCreateInfoEXT;
     TVkPipelineCreationFeedbackCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT
       pNext:PVkVoid;
       pPipelineCreationFeedback:PVkPipelineCreationFeedbackEXT;
       pipelineStageCreationFeedbackCount:TVkUInt32;
       pPipelineStageCreationFeedbacks:PPVkPipelineCreationFeedbackEXT;
     end;

     PPVkSurfaceFullScreenExclusiveInfoEXT=^PVkSurfaceFullScreenExclusiveInfoEXT;
     PVkSurfaceFullScreenExclusiveInfoEXT=^TVkSurfaceFullScreenExclusiveInfoEXT;
     TVkSurfaceFullScreenExclusiveInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT
       pNext:PVkVoid;
       fullScreenExclusive:TVkFullScreenExclusiveEXT;
     end;

     PPVkSurfaceFullScreenExclusiveWin32InfoEXT=^PVkSurfaceFullScreenExclusiveWin32InfoEXT;
     PVkSurfaceFullScreenExclusiveWin32InfoEXT=^TVkSurfaceFullScreenExclusiveWin32InfoEXT;
     TVkSurfaceFullScreenExclusiveWin32InfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT
       pNext:PVkVoid;
       hmonitor:THMONITOR;
     end;

     PPVkSurfaceCapabilitiesFullScreenExclusiveEXT=^PVkSurfaceCapabilitiesFullScreenExclusiveEXT;
     PVkSurfaceCapabilitiesFullScreenExclusiveEXT=^TVkSurfaceCapabilitiesFullScreenExclusiveEXT;
     TVkSurfaceCapabilitiesFullScreenExclusiveEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT
       pNext:PVkVoid;
       fullScreenExclusiveSupported:TVkBool32;
     end;

     PPVkPhysicalDevicePerformanceQueryFeaturesKHR=^PVkPhysicalDevicePerformanceQueryFeaturesKHR;
     PVkPhysicalDevicePerformanceQueryFeaturesKHR=^TVkPhysicalDevicePerformanceQueryFeaturesKHR;
     TVkPhysicalDevicePerformanceQueryFeaturesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR
       pNext:PVkVoid;
       performanceCounterQueryPools:TVkBool32;
       performanceCounterMultipleQueryPools:TVkBool32;
     end;

     PPVkPhysicalDevicePerformanceQueryPropertiesKHR=^PVkPhysicalDevicePerformanceQueryPropertiesKHR;
     PVkPhysicalDevicePerformanceQueryPropertiesKHR=^TVkPhysicalDevicePerformanceQueryPropertiesKHR;
     TVkPhysicalDevicePerformanceQueryPropertiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR
       pNext:PVkVoid;
       allowCommandBufferQueryCopies:TVkBool32;
     end;

     PPVkPerformanceCounterKHR=^PVkPerformanceCounterKHR;
     PVkPerformanceCounterKHR=^TVkPerformanceCounterKHR;
     TVkPerformanceCounterKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR
       pNext:PVkVoid; //< Pointer to next structure
       aunit:TVkPerformanceCounterUnitKHR;
       scope:TVkPerformanceCounterScopeKHR;
       storage:TVkPerformanceCounterStorageKHR;
       uuid:array[0..VK_UUID_SIZE-1] of TVkUInt8;
     end;

     PPVkPerformanceCounterDescriptionKHR=^PVkPerformanceCounterDescriptionKHR;
     PVkPerformanceCounterDescriptionKHR=^TVkPerformanceCounterDescriptionKHR;
     TVkPerformanceCounterDescriptionKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR
       pNext:PVkVoid; //< Pointer to next structure
       flags:TVkPerformanceCounterDescriptionFlagsKHR;
       name:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       category:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       description:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
     end;

     PPVkQueryPoolPerformanceCreateInfoKHR=^PVkQueryPoolPerformanceCreateInfoKHR;
     PVkQueryPoolPerformanceCreateInfoKHR=^TVkQueryPoolPerformanceCreateInfoKHR;
     TVkQueryPoolPerformanceCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR
       pNext:PVkVoid; //< Pointer to next structure
       queueFamilyIndex:TVkUInt32;
       counterIndexCount:TVkUInt32;
       pCounterIndices:PVkUInt32;
     end;

     PPVkPerformanceCounterResultKHR=^PVkPerformanceCounterResultKHR;
     PVkPerformanceCounterResultKHR=^TVkPerformanceCounterResultKHR;
     TVkPerformanceCounterResultKHR=record
      case longint of
       0:(
        int32:TVkInt32;
       );
       1:(
        int64:TVkInt64;
       );
       2:(
        uint32:TVkUInt32;
       );
       3:(
        uint64:TVkUInt64;
       );
       4:(
        float32:TVkFloat;
       );
       5:(
        float64:TVkDouble;
       );
     end;

     PPVkAcquireProfilingLockInfoKHR=^PVkAcquireProfilingLockInfoKHR;
     PVkAcquireProfilingLockInfoKHR=^TVkAcquireProfilingLockInfoKHR;
     TVkAcquireProfilingLockInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR
       pNext:PVkVoid;
       flags:TVkAcquireProfilingLockFlagsKHR;
       timeout:TVkUInt64;
     end;

     PPVkPerformanceQuerySubmitInfoKHR=^PVkPerformanceQuerySubmitInfoKHR;
     PVkPerformanceQuerySubmitInfoKHR=^TVkPerformanceQuerySubmitInfoKHR;
     TVkPerformanceQuerySubmitInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR
       pNext:PVkVoid;
       counterPassIndex:TVkUInt32;
     end;

     PPVkHeadlessSurfaceCreateInfoEXT=^PVkHeadlessSurfaceCreateInfoEXT;
     PVkHeadlessSurfaceCreateInfoEXT=^TVkHeadlessSurfaceCreateInfoEXT;
     TVkHeadlessSurfaceCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT
       pNext:PVkVoid;
       flags:TVkHeadlessSurfaceCreateFlagsEXT;
     end;

     PPVkPhysicalDeviceCoverageReductionModeFeaturesNV=^PVkPhysicalDeviceCoverageReductionModeFeaturesNV;
     PVkPhysicalDeviceCoverageReductionModeFeaturesNV=^TVkPhysicalDeviceCoverageReductionModeFeaturesNV;
     TVkPhysicalDeviceCoverageReductionModeFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV
       pNext:PVkVoid;
       coverageReductionMode:TVkBool32;
     end;

     PPVkPipelineCoverageReductionStateCreateInfoNV=^PVkPipelineCoverageReductionStateCreateInfoNV;
     PVkPipelineCoverageReductionStateCreateInfoNV=^TVkPipelineCoverageReductionStateCreateInfoNV;
     TVkPipelineCoverageReductionStateCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV
       pNext:PVkVoid;
       flags:TVkPipelineCoverageReductionStateCreateFlagsNV;
       coverageReductionMode:TVkCoverageReductionModeNV;
     end;

     PPVkFramebufferMixedSamplesCombinationNV=^PVkFramebufferMixedSamplesCombinationNV;
     PVkFramebufferMixedSamplesCombinationNV=^TVkFramebufferMixedSamplesCombinationNV;
     TVkFramebufferMixedSamplesCombinationNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV
       pNext:PVkVoid;
       coverageReductionMode:TVkCoverageReductionModeNV;
       rasterizationSamples:TVkSampleCountFlagBits;
       depthStencilSamples:TVkSampleCountFlags;
       colorSamples:TVkSampleCountFlags;
     end;

     PPVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL=^PVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
     PVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL=^TVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
     TVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL
       pNext:PVkVoid;
       shaderIntegerFunctions2:TVkBool32;
     end;

     PPVkPerformanceValueDataINTEL=^PVkPerformanceValueDataINTEL;
     PVkPerformanceValueDataINTEL=^TVkPerformanceValueDataINTEL;
     TVkPerformanceValueDataINTEL=record
      case longint of
       0:(
        value32:TVkUInt32;
       );
       1:(
        value64:TVkUInt64;
       );
       2:(
        valueFloat:TVkFloat;
       );
       3:(
        valueBool:TVkBool32;
       );
       4:(
        valueString:PVkChar;
       );
     end;

     PPVkPerformanceValueINTEL=^PVkPerformanceValueINTEL;
     PVkPerformanceValueINTEL=^TVkPerformanceValueINTEL;
     TVkPerformanceValueINTEL=record
       type_:TVkPerformanceValueTypeINTEL;
       data:TVkPerformanceValueDataINTEL;
     end;

     PPVkInitializePerformanceApiInfoINTEL=^PVkInitializePerformanceApiInfoINTEL;
     PVkInitializePerformanceApiInfoINTEL=^TVkInitializePerformanceApiInfoINTEL;
     TVkInitializePerformanceApiInfoINTEL=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL
       pNext:PVkVoid;
       pUserData:PVkVoid;
     end;

     PPVkQueryPoolPerformanceQueryCreateInfoINTEL=^PVkQueryPoolPerformanceQueryCreateInfoINTEL;
     PVkQueryPoolPerformanceQueryCreateInfoINTEL=^TVkQueryPoolPerformanceQueryCreateInfoINTEL;
     TVkQueryPoolPerformanceQueryCreateInfoINTEL=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL
       pNext:PVkVoid;
       performanceCountersSampling:TVkQueryPoolSamplingModeINTEL;
     end;

     PPVkQueryPoolCreateInfoINTEL=^PVkQueryPoolCreateInfoINTEL;
     PVkQueryPoolCreateInfoINTEL=^TVkQueryPoolCreateInfoINTEL;
     TVkQueryPoolCreateInfoINTEL=TVkQueryPoolPerformanceQueryCreateInfoINTEL;

     PPVkPerformanceMarkerInfoINTEL=^PVkPerformanceMarkerInfoINTEL;
     PVkPerformanceMarkerInfoINTEL=^TVkPerformanceMarkerInfoINTEL;
     TVkPerformanceMarkerInfoINTEL=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL
       pNext:PVkVoid;
       marker:TVkUInt64;
     end;

     PPVkPerformanceStreamMarkerInfoINTEL=^PVkPerformanceStreamMarkerInfoINTEL;
     PVkPerformanceStreamMarkerInfoINTEL=^TVkPerformanceStreamMarkerInfoINTEL;
     TVkPerformanceStreamMarkerInfoINTEL=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL
       pNext:PVkVoid;
       marker:TVkUInt32;
     end;

     PPVkPerformanceOverrideInfoINTEL=^PVkPerformanceOverrideInfoINTEL;
     PVkPerformanceOverrideInfoINTEL=^TVkPerformanceOverrideInfoINTEL;
     TVkPerformanceOverrideInfoINTEL=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL
       pNext:PVkVoid;
       type_:TVkPerformanceOverrideTypeINTEL;
       enable:TVkBool32;
       parameter:TVkUInt64;
     end;

     PPVkPerformanceConfigurationAcquireInfoINTEL=^PVkPerformanceConfigurationAcquireInfoINTEL;
     PVkPerformanceConfigurationAcquireInfoINTEL=^TVkPerformanceConfigurationAcquireInfoINTEL;
     TVkPerformanceConfigurationAcquireInfoINTEL=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL
       pNext:PVkVoid;
       type_:TVkPerformanceConfigurationTypeINTEL;
     end;

     PPVkPhysicalDeviceShaderClockFeaturesKHR=^PVkPhysicalDeviceShaderClockFeaturesKHR;
     PVkPhysicalDeviceShaderClockFeaturesKHR=^TVkPhysicalDeviceShaderClockFeaturesKHR;
     TVkPhysicalDeviceShaderClockFeaturesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR
       pNext:PVkVoid;
       shaderSubgroupClock:TVkBool32;
       shaderDeviceClock:TVkBool32;
     end;

     PPVkPhysicalDeviceIndexTypeUint8FeaturesEXT=^PVkPhysicalDeviceIndexTypeUint8FeaturesEXT;
     PVkPhysicalDeviceIndexTypeUint8FeaturesEXT=^TVkPhysicalDeviceIndexTypeUint8FeaturesEXT;
     TVkPhysicalDeviceIndexTypeUint8FeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT
       pNext:PVkVoid;
       indexTypeUint8:TVkBool32;
     end;

     PPVkPhysicalDeviceShaderSMBuiltinsPropertiesNV=^PVkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
     PVkPhysicalDeviceShaderSMBuiltinsPropertiesNV=^TVkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
     TVkPhysicalDeviceShaderSMBuiltinsPropertiesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV
       pNext:PVkVoid;
       shaderSMCount:TVkUInt32;
       shaderWarpsPerSM:TVkUInt32;
     end;

     PPVkPhysicalDeviceShaderSMBuiltinsFeaturesNV=^PVkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
     PVkPhysicalDeviceShaderSMBuiltinsFeaturesNV=^TVkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
     TVkPhysicalDeviceShaderSMBuiltinsFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV
       pNext:PVkVoid;
       shaderSMBuiltins:TVkBool32;
     end;

     PPVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT=^PVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
     PVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT=^TVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
     TVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT
       pNext:PVkVoid;
       fragmentShaderSampleInterlock:TVkBool32;
       fragmentShaderPixelInterlock:TVkBool32;
       fragmentShaderShadingRateInterlock:TVkBool32;
     end;

     PPVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures=^PVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
     PVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures=^TVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
     TVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES
       pNext:PVkVoid;
       separateDepthStencilLayouts:TVkBool32;
     end;

     PPVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR=^PVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;
     PVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR=^TVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;
     TVkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR=TVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

     PPVkAttachmentReferenceStencilLayout=^PVkAttachmentReferenceStencilLayout;
     PVkAttachmentReferenceStencilLayout=^TVkAttachmentReferenceStencilLayout;
     TVkAttachmentReferenceStencilLayout=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT
       pNext:PVkVoid;
       stencilLayout:TVkImageLayout;
     end;

     PPVkAttachmentReferenceStencilLayoutKHR=^PVkAttachmentReferenceStencilLayoutKHR;
     PVkAttachmentReferenceStencilLayoutKHR=^TVkAttachmentReferenceStencilLayoutKHR;
     TVkAttachmentReferenceStencilLayoutKHR=TVkAttachmentReferenceStencilLayout;

     PPVkAttachmentDescriptionStencilLayout=^PVkAttachmentDescriptionStencilLayout;
     PVkAttachmentDescriptionStencilLayout=^TVkAttachmentDescriptionStencilLayout;
     TVkAttachmentDescriptionStencilLayout=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT
       pNext:PVkVoid;
       stencilInitialLayout:TVkImageLayout;
       stencilFinalLayout:TVkImageLayout;
     end;

     PPVkAttachmentDescriptionStencilLayoutKHR=^PVkAttachmentDescriptionStencilLayoutKHR;
     PVkAttachmentDescriptionStencilLayoutKHR=^TVkAttachmentDescriptionStencilLayoutKHR;
     TVkAttachmentDescriptionStencilLayoutKHR=TVkAttachmentDescriptionStencilLayout;

     PPVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR=^PVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
     PVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR=^TVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
     TVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR
       pNext:PVkVoid;
       pipelineExecutableInfo:TVkBool32;
     end;

     PPVkPipelineInfoKHR=^PVkPipelineInfoKHR;
     PVkPipelineInfoKHR=^TVkPipelineInfoKHR;
     TVkPipelineInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR
       pNext:PVkVoid;
       pipeline:TVkPipeline;
     end;

     PPVkPipelineExecutablePropertiesKHR=^PVkPipelineExecutablePropertiesKHR;
     PVkPipelineExecutablePropertiesKHR=^TVkPipelineExecutablePropertiesKHR;
     TVkPipelineExecutablePropertiesKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR
       pNext:PVkVoid;
       stages:TVkShaderStageFlags;
       name:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       description:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       subgroupSize:TVkUInt32;
     end;

     PPVkPipelineExecutableInfoKHR=^PVkPipelineExecutableInfoKHR;
     PVkPipelineExecutableInfoKHR=^TVkPipelineExecutableInfoKHR;
     TVkPipelineExecutableInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR
       pNext:PVkVoid;
       pipeline:TVkPipeline;
       executableIndex:TVkUInt32;
     end;

     PPVkPipelineExecutableStatisticValueKHR=^PVkPipelineExecutableStatisticValueKHR;
     PVkPipelineExecutableStatisticValueKHR=^TVkPipelineExecutableStatisticValueKHR;
     TVkPipelineExecutableStatisticValueKHR=record
      case longint of
       0:(
        b32:TVkBool32;
       );
       1:(
        i64:TVkInt64;
       );
       2:(
        u64:TVkUInt64;
       );
       3:(
        f64:TVkDouble;
       );
     end;

     PPVkPipelineExecutableStatisticKHR=^PVkPipelineExecutableStatisticKHR;
     PVkPipelineExecutableStatisticKHR=^TVkPipelineExecutableStatisticKHR;
     TVkPipelineExecutableStatisticKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR
       pNext:PVkVoid;
       name:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       description:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       format:TVkPipelineExecutableStatisticFormatKHR;
       value:TVkPipelineExecutableStatisticValueKHR;
     end;

     PPVkPipelineExecutableInternalRepresentationKHR=^PVkPipelineExecutableInternalRepresentationKHR;
     PVkPipelineExecutableInternalRepresentationKHR=^TVkPipelineExecutableInternalRepresentationKHR;
     TVkPipelineExecutableInternalRepresentationKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR
       pNext:PVkVoid;
       name:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       description:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       isText:TVkBool32;
       dataSize:TVkSize;
       pData:PVkVoid;
     end;

     PPVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT=^PVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;
     PVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT=^TVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;
     TVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT
       pNext:PVkVoid;
       shaderDemoteToHelperInvocation:TVkBool32;
     end;

     PPVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT=^PVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
     PVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT=^TVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
     TVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT
       pNext:PVkVoid;
       texelBufferAlignment:TVkBool32;
     end;

     PPVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT=^PVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;
     PVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT=^TVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;
     TVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT
       pNext:PVkVoid;
       storageTexelBufferOffsetAlignmentBytes:TVkDeviceSize;
       storageTexelBufferOffsetSingleTexelAlignment:TVkBool32;
       uniformTexelBufferOffsetAlignmentBytes:TVkDeviceSize;
       uniformTexelBufferOffsetSingleTexelAlignment:TVkBool32;
     end;

     PPVkPhysicalDeviceSubgroupSizeControlFeaturesEXT=^PVkPhysicalDeviceSubgroupSizeControlFeaturesEXT;
     PVkPhysicalDeviceSubgroupSizeControlFeaturesEXT=^TVkPhysicalDeviceSubgroupSizeControlFeaturesEXT;
     TVkPhysicalDeviceSubgroupSizeControlFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT
       pNext:PVkVoid;
       subgroupSizeControl:TVkBool32;
       computeFullSubgroups:TVkBool32;
     end;

     PPVkPhysicalDeviceSubgroupSizeControlPropertiesEXT=^PVkPhysicalDeviceSubgroupSizeControlPropertiesEXT;
     PVkPhysicalDeviceSubgroupSizeControlPropertiesEXT=^TVkPhysicalDeviceSubgroupSizeControlPropertiesEXT;
     TVkPhysicalDeviceSubgroupSizeControlPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT
       pNext:PVkVoid;
       minSubgroupSize:TVkUInt32;
       maxSubgroupSize:TVkUInt32;
       maxComputeWorkgroupSubgroups:TVkUInt32;
       requiredSubgroupSizeStages:TVkShaderStageFlags;
     end;

     PPVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT=^PVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;
     PVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT=^TVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;
     TVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT
       pNext:PVkVoid;
       requiredSubgroupSize:TVkUInt32;
     end;

     PPVkMemoryOpaqueCaptureAddressAllocateInfo=^PVkMemoryOpaqueCaptureAddressAllocateInfo;
     PVkMemoryOpaqueCaptureAddressAllocateInfo=^TVkMemoryOpaqueCaptureAddressAllocateInfo;
     TVkMemoryOpaqueCaptureAddressAllocateInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO
       pNext:PVkVoid;
       opaqueCaptureAddress:TVkUInt64;
     end;

     PPVkMemoryOpaqueCaptureAddressAllocateInfoKHR=^PVkMemoryOpaqueCaptureAddressAllocateInfoKHR;
     PVkMemoryOpaqueCaptureAddressAllocateInfoKHR=^TVkMemoryOpaqueCaptureAddressAllocateInfoKHR;
     TVkMemoryOpaqueCaptureAddressAllocateInfoKHR=TVkMemoryOpaqueCaptureAddressAllocateInfo;

     PPVkDeviceMemoryOpaqueCaptureAddressInfo=^PVkDeviceMemoryOpaqueCaptureAddressInfo;
     PVkDeviceMemoryOpaqueCaptureAddressInfo=^TVkDeviceMemoryOpaqueCaptureAddressInfo;
     TVkDeviceMemoryOpaqueCaptureAddressInfo=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO
       pNext:PVkVoid;
       memory:TVkDeviceMemory;
     end;

     PPVkDeviceMemoryOpaqueCaptureAddressInfoKHR=^PVkDeviceMemoryOpaqueCaptureAddressInfoKHR;
     PVkDeviceMemoryOpaqueCaptureAddressInfoKHR=^TVkDeviceMemoryOpaqueCaptureAddressInfoKHR;
     TVkDeviceMemoryOpaqueCaptureAddressInfoKHR=TVkDeviceMemoryOpaqueCaptureAddressInfo;

     PPVkPhysicalDeviceLineRasterizationFeaturesEXT=^PVkPhysicalDeviceLineRasterizationFeaturesEXT;
     PVkPhysicalDeviceLineRasterizationFeaturesEXT=^TVkPhysicalDeviceLineRasterizationFeaturesEXT;
     TVkPhysicalDeviceLineRasterizationFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT
       pNext:PVkVoid;
       rectangularLines:TVkBool32;
       bresenhamLines:TVkBool32;
       smoothLines:TVkBool32;
       stippledRectangularLines:TVkBool32;
       stippledBresenhamLines:TVkBool32;
       stippledSmoothLines:TVkBool32;
     end;

     PPVkPhysicalDeviceLineRasterizationPropertiesEXT=^PVkPhysicalDeviceLineRasterizationPropertiesEXT;
     PVkPhysicalDeviceLineRasterizationPropertiesEXT=^TVkPhysicalDeviceLineRasterizationPropertiesEXT;
     TVkPhysicalDeviceLineRasterizationPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT
       pNext:PVkVoid;
       lineSubPixelPrecisionBits:TVkUInt32;
     end;

     PPVkPipelineRasterizationLineStateCreateInfoEXT=^PVkPipelineRasterizationLineStateCreateInfoEXT;
     PVkPipelineRasterizationLineStateCreateInfoEXT=^TVkPipelineRasterizationLineStateCreateInfoEXT;
     TVkPipelineRasterizationLineStateCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT
       pNext:PVkVoid;
       lineRasterizationMode:TVkLineRasterizationModeEXT;
       stippledLineEnable:TVkBool32;
       lineStippleFactor:TVkUInt32;
       lineStipplePattern:TVkUInt16;
     end;

     PPVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT=^PVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;
     PVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT=^TVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;
     TVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT
       pNext:PVkVoid;
       pipelineCreationCacheControl:TVkBool32;
     end;

     PPVkPhysicalDeviceVulkan11Features=^PVkPhysicalDeviceVulkan11Features;
     PVkPhysicalDeviceVulkan11Features=^TVkPhysicalDeviceVulkan11Features;
     TVkPhysicalDeviceVulkan11Features=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES
       pNext:PVkVoid;
       storageBuffer16BitAccess:TVkBool32;
       uniformAndStorageBuffer16BitAccess:TVkBool32;
       storagePushConstant16:TVkBool32;
       storageInputOutput16:TVkBool32;
       multiview:TVkBool32;
       multiviewGeometryShader:TVkBool32;
       multiviewTessellationShader:TVkBool32;
       variablePointersStorageBuffer:TVkBool32;
       variablePointers:TVkBool32;
       protectedMemory:TVkBool32;
       samplerYcbcrConversion:TVkBool32;
       shaderDrawParameters:TVkBool32;
     end;

     PPVkPhysicalDeviceVulkan11Properties=^PVkPhysicalDeviceVulkan11Properties;
     PVkPhysicalDeviceVulkan11Properties=^TVkPhysicalDeviceVulkan11Properties;
     TVkPhysicalDeviceVulkan11Properties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES
       pNext:PVkVoid;
       deviceUUID:array[0..VK_UUID_SIZE-1] of TVkUInt8;
       driverUUID:array[0..VK_UUID_SIZE-1] of TVkUInt8;
       deviceLUID:array[0..VK_LUID_SIZE-1] of TVkUInt8;
       deviceNodeMask:TVkUInt32;
       deviceLUIDValid:TVkBool32;
       subgroupSize:TVkUInt32;
       subgroupSupportedStages:TVkShaderStageFlags;
       subgroupSupportedOperations:TVkSubgroupFeatureFlags;
       subgroupQuadOperationsInAllStages:TVkBool32;
       pointClippingBehavior:TVkPointClippingBehavior;
       maxMultiviewViewCount:TVkUInt32;
       maxMultiviewInstanceIndex:TVkUInt32;
       protectedNoFault:TVkBool32;
       maxPerSetDescriptors:TVkUInt32;
       maxMemoryAllocationSize:TVkDeviceSize;
     end;

     PPVkPhysicalDeviceVulkan12Features=^PVkPhysicalDeviceVulkan12Features;
     PVkPhysicalDeviceVulkan12Features=^TVkPhysicalDeviceVulkan12Features;
     TVkPhysicalDeviceVulkan12Features=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES
       pNext:PVkVoid;
       samplerMirrorClampToEdge:TVkBool32;
       drawIndirectCount:TVkBool32;
       storageBuffer8BitAccess:TVkBool32;
       uniformAndStorageBuffer8BitAccess:TVkBool32;
       storagePushConstant8:TVkBool32;
       shaderBufferInt64Atomics:TVkBool32;
       shaderSharedInt64Atomics:TVkBool32;
       shaderFloat16:TVkBool32;
       shaderInt8:TVkBool32;
       descriptorIndexing:TVkBool32;
       shaderInputAttachmentArrayDynamicIndexing:TVkBool32;
       shaderUniformTexelBufferArrayDynamicIndexing:TVkBool32;
       shaderStorageTexelBufferArrayDynamicIndexing:TVkBool32;
       shaderUniformBufferArrayNonUniformIndexing:TVkBool32;
       shaderSampledImageArrayNonUniformIndexing:TVkBool32;
       shaderStorageBufferArrayNonUniformIndexing:TVkBool32;
       shaderStorageImageArrayNonUniformIndexing:TVkBool32;
       shaderInputAttachmentArrayNonUniformIndexing:TVkBool32;
       shaderUniformTexelBufferArrayNonUniformIndexing:TVkBool32;
       shaderStorageTexelBufferArrayNonUniformIndexing:TVkBool32;
       descriptorBindingUniformBufferUpdateAfterBind:TVkBool32;
       descriptorBindingSampledImageUpdateAfterBind:TVkBool32;
       descriptorBindingStorageImageUpdateAfterBind:TVkBool32;
       descriptorBindingStorageBufferUpdateAfterBind:TVkBool32;
       descriptorBindingUniformTexelBufferUpdateAfterBind:TVkBool32;
       descriptorBindingStorageTexelBufferUpdateAfterBind:TVkBool32;
       descriptorBindingUpdateUnusedWhilePending:TVkBool32;
       descriptorBindingPartiallyBound:TVkBool32;
       descriptorBindingVariableDescriptorCount:TVkBool32;
       runtimeDescriptorArray:TVkBool32;
       samplerFilterMinmax:TVkBool32;
       scalarBlockLayout:TVkBool32;
       imagelessFramebuffer:TVkBool32;
       uniformBufferStandardLayout:TVkBool32;
       shaderSubgroupExtendedTypes:TVkBool32;
       separateDepthStencilLayouts:TVkBool32;
       hostQueryReset:TVkBool32;
       timelineSemaphore:TVkBool32;
       bufferDeviceAddress:TVkBool32;
       bufferDeviceAddressCaptureReplay:TVkBool32;
       bufferDeviceAddressMultiDevice:TVkBool32;
       vulkanMemoryModel:TVkBool32;
       vulkanMemoryModelDeviceScope:TVkBool32;
       vulkanMemoryModelAvailabilityVisibilityChains:TVkBool32;
       shaderOutputViewportIndex:TVkBool32;
       shaderOutputLayer:TVkBool32;
       subgroupBroadcastDynamicId:TVkBool32;
     end;

     PPVkPhysicalDeviceVulkan12Properties=^PVkPhysicalDeviceVulkan12Properties;
     PVkPhysicalDeviceVulkan12Properties=^TVkPhysicalDeviceVulkan12Properties;
     TVkPhysicalDeviceVulkan12Properties=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES
       pNext:PVkVoid;
       driverID:TVkDriverId;
       driverName:array[0..VK_MAX_DRIVER_NAME_SIZE-1] of TVkChar;
       driverInfo:array[0..VK_MAX_DRIVER_INFO_SIZE-1] of TVkChar;
       conformanceVersion:TVkConformanceVersion;
       denormBehaviorIndependence:TVkShaderFloatControlsIndependence;
       roundingModeIndependence:TVkShaderFloatControlsIndependence;
       shaderSignedZeroInfNanPreserveFloat16:TVkBool32;
       shaderSignedZeroInfNanPreserveFloat32:TVkBool32;
       shaderSignedZeroInfNanPreserveFloat64:TVkBool32;
       shaderDenormPreserveFloat16:TVkBool32;
       shaderDenormPreserveFloat32:TVkBool32;
       shaderDenormPreserveFloat64:TVkBool32;
       shaderDenormFlushToZeroFloat16:TVkBool32;
       shaderDenormFlushToZeroFloat32:TVkBool32;
       shaderDenormFlushToZeroFloat64:TVkBool32;
       shaderRoundingModeRTEFloat16:TVkBool32;
       shaderRoundingModeRTEFloat32:TVkBool32;
       shaderRoundingModeRTEFloat64:TVkBool32;
       shaderRoundingModeRTZFloat16:TVkBool32;
       shaderRoundingModeRTZFloat32:TVkBool32;
       shaderRoundingModeRTZFloat64:TVkBool32;
       maxUpdateAfterBindDescriptorsInAllPools:TVkUInt32;
       shaderUniformBufferArrayNonUniformIndexingNative:TVkBool32;
       shaderSampledImageArrayNonUniformIndexingNative:TVkBool32;
       shaderStorageBufferArrayNonUniformIndexingNative:TVkBool32;
       shaderStorageImageArrayNonUniformIndexingNative:TVkBool32;
       shaderInputAttachmentArrayNonUniformIndexingNative:TVkBool32;
       robustBufferAccessUpdateAfterBind:TVkBool32;
       quadDivergentImplicitLod:TVkBool32;
       maxPerStageDescriptorUpdateAfterBindSamplers:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindUniformBuffers:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindStorageBuffers:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindSampledImages:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindStorageImages:TVkUInt32;
       maxPerStageDescriptorUpdateAfterBindInputAttachments:TVkUInt32;
       maxPerStageUpdateAfterBindResources:TVkUInt32;
       maxDescriptorSetUpdateAfterBindSamplers:TVkUInt32;
       maxDescriptorSetUpdateAfterBindUniformBuffers:TVkUInt32;
       maxDescriptorSetUpdateAfterBindUniformBuffersDynamic:TVkUInt32;
       maxDescriptorSetUpdateAfterBindStorageBuffers:TVkUInt32;
       maxDescriptorSetUpdateAfterBindStorageBuffersDynamic:TVkUInt32;
       maxDescriptorSetUpdateAfterBindSampledImages:TVkUInt32;
       maxDescriptorSetUpdateAfterBindStorageImages:TVkUInt32;
       maxDescriptorSetUpdateAfterBindInputAttachments:TVkUInt32;
       supportedDepthResolveModes:TVkResolveModeFlags;
       supportedStencilResolveModes:TVkResolveModeFlags;
       independentResolveNone:TVkBool32;
       independentResolve:TVkBool32;
       filterMinmaxSingleComponentFormats:TVkBool32;
       filterMinmaxImageComponentMapping:TVkBool32;
       maxTimelineSemaphoreValueDifference:TVkUInt64;
       framebufferIntegerColorSampleCounts:TVkSampleCountFlags;
     end;

     PPVkPipelineCompilerControlCreateInfoAMD=^PVkPipelineCompilerControlCreateInfoAMD;
     PVkPipelineCompilerControlCreateInfoAMD=^TVkPipelineCompilerControlCreateInfoAMD;
     TVkPipelineCompilerControlCreateInfoAMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD
       pNext:PVkVoid;
       compilerControlFlags:TVkPipelineCompilerControlFlagsAMD;
     end;

     PPVkPhysicalDeviceCoherentMemoryFeaturesAMD=^PVkPhysicalDeviceCoherentMemoryFeaturesAMD;
     PVkPhysicalDeviceCoherentMemoryFeaturesAMD=^TVkPhysicalDeviceCoherentMemoryFeaturesAMD;
     TVkPhysicalDeviceCoherentMemoryFeaturesAMD=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD
       pNext:PVkVoid;
       deviceCoherentMemory:TVkBool32;
     end;

     PPVkPhysicalDeviceToolPropertiesEXT=^PVkPhysicalDeviceToolPropertiesEXT;
     PVkPhysicalDeviceToolPropertiesEXT=^TVkPhysicalDeviceToolPropertiesEXT;
     TVkPhysicalDeviceToolPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT
       pNext:PVkVoid;
       name:array[0..VK_MAX_EXTENSION_NAME_SIZE-1] of TVkChar;
       version:array[0..VK_MAX_EXTENSION_NAME_SIZE-1] of TVkChar;
       purposes:TVkToolPurposeFlagsEXT;
       description:array[0..VK_MAX_DESCRIPTION_SIZE-1] of TVkChar;
       layer:array[0..VK_MAX_EXTENSION_NAME_SIZE-1] of TVkChar;
     end;

     PPVkSamplerCustomBorderColorCreateInfoEXT=^PVkSamplerCustomBorderColorCreateInfoEXT;
     PVkSamplerCustomBorderColorCreateInfoEXT=^TVkSamplerCustomBorderColorCreateInfoEXT;
     TVkSamplerCustomBorderColorCreateInfoEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT
       pNext:PVkVoid;
       customBorderColor:TVkClearColorValue;
       format:TVkFormat;
     end;

     PPVkPhysicalDeviceCustomBorderColorPropertiesEXT=^PVkPhysicalDeviceCustomBorderColorPropertiesEXT;
     PVkPhysicalDeviceCustomBorderColorPropertiesEXT=^TVkPhysicalDeviceCustomBorderColorPropertiesEXT;
     TVkPhysicalDeviceCustomBorderColorPropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT
       pNext:PVkVoid;
       maxCustomBorderColorSamplers:TVkUInt32;
     end;

     PPVkPhysicalDeviceCustomBorderColorFeaturesEXT=^PVkPhysicalDeviceCustomBorderColorFeaturesEXT;
     PVkPhysicalDeviceCustomBorderColorFeaturesEXT=^TVkPhysicalDeviceCustomBorderColorFeaturesEXT;
     TVkPhysicalDeviceCustomBorderColorFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT
       pNext:PVkVoid;
       customBorderColors:TVkBool32;
       customBorderColorWithoutFormat:TVkBool32;
     end;

     PPVkDeviceOrHostAddressKHR=^PVkDeviceOrHostAddressKHR;
     PVkDeviceOrHostAddressKHR=^TVkDeviceOrHostAddressKHR;
     TVkDeviceOrHostAddressKHR=record
      case longint of
       0:(
        deviceAddress:TVkDeviceAddress;
       );
       1:(
        hostAddress:PVkVoid;
       );
     end;

     PPVkDeviceOrHostAddressConstKHR=^PVkDeviceOrHostAddressConstKHR;
     PVkDeviceOrHostAddressConstKHR=^TVkDeviceOrHostAddressConstKHR;
     TVkDeviceOrHostAddressConstKHR=record
      case longint of
       0:(
        deviceAddress:TVkDeviceAddress;
       );
       1:(
        hostAddress:PVkVoid;
       );
     end;

     PPVkAccelerationStructureGeometryTrianglesDataKHR=^PVkAccelerationStructureGeometryTrianglesDataKHR;
     PVkAccelerationStructureGeometryTrianglesDataKHR=^TVkAccelerationStructureGeometryTrianglesDataKHR;
     TVkAccelerationStructureGeometryTrianglesDataKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR
       pNext:PVkVoid;
       vertexFormat:TVkFormat;
       vertexData:TVkDeviceOrHostAddressConstKHR;
       vertexStride:TVkDeviceSize;
       indexType:TVkIndexType;
       indexData:TVkDeviceOrHostAddressConstKHR;
       transformData:TVkDeviceOrHostAddressConstKHR;
     end;

     PPVkAccelerationStructureGeometryAabbsDataKHR=^PVkAccelerationStructureGeometryAabbsDataKHR;
     PVkAccelerationStructureGeometryAabbsDataKHR=^TVkAccelerationStructureGeometryAabbsDataKHR;
     TVkAccelerationStructureGeometryAabbsDataKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR
       pNext:PVkVoid;
       data:TVkDeviceOrHostAddressConstKHR;
       stride:TVkDeviceSize;
     end;

     PPVkAccelerationStructureGeometryInstancesDataKHR=^PVkAccelerationStructureGeometryInstancesDataKHR;
     PVkAccelerationStructureGeometryInstancesDataKHR=^TVkAccelerationStructureGeometryInstancesDataKHR;
     TVkAccelerationStructureGeometryInstancesDataKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR
       pNext:PVkVoid;
       arrayOfPointers:TVkBool32;
       data:TVkDeviceOrHostAddressConstKHR;
     end;

     PPVkAccelerationStructureGeometryDataKHR=^PVkAccelerationStructureGeometryDataKHR;
     PVkAccelerationStructureGeometryDataKHR=^TVkAccelerationStructureGeometryDataKHR;
     TVkAccelerationStructureGeometryDataKHR=record
      case longint of
       0:(
        triangles:TVkAccelerationStructureGeometryTrianglesDataKHR;
       );
       1:(
        aabbs:TVkAccelerationStructureGeometryAabbsDataKHR;
       );
       2:(
        instances:TVkAccelerationStructureGeometryInstancesDataKHR;
       );
     end;

     PPVkAccelerationStructureGeometryKHR=^PVkAccelerationStructureGeometryKHR;
     PVkAccelerationStructureGeometryKHR=^TVkAccelerationStructureGeometryKHR;
     TVkAccelerationStructureGeometryKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR
       pNext:PVkVoid;
       geometryType:TVkGeometryTypeKHR;
       geometry:TVkAccelerationStructureGeometryDataKHR;
       flags:TVkGeometryFlagsKHR;
     end;

     PPVkAccelerationStructureBuildGeometryInfoKHR=^PVkAccelerationStructureBuildGeometryInfoKHR;
     PVkAccelerationStructureBuildGeometryInfoKHR=^TVkAccelerationStructureBuildGeometryInfoKHR;
     TVkAccelerationStructureBuildGeometryInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR
       pNext:PVkVoid;
       type_:TVkAccelerationStructureTypeKHR;
       flags:TVkBuildAccelerationStructureFlagsKHR;
       update:TVkBool32;
       srcAccelerationStructure:TVkAccelerationStructureKHR;
       dstAccelerationStructure:TVkAccelerationStructureKHR;
       geometryArrayOfPointers:TVkBool32;
       geometryCount:TVkUInt32;
       ppGeometries:PPVkAccelerationStructureGeometryKHR;
       scratchData:TVkDeviceOrHostAddressKHR;
     end;

     PPVkAccelerationStructureBuildOffsetInfoKHR=^PVkAccelerationStructureBuildOffsetInfoKHR;
     PVkAccelerationStructureBuildOffsetInfoKHR=^TVkAccelerationStructureBuildOffsetInfoKHR;
     TVkAccelerationStructureBuildOffsetInfoKHR=record
       primitiveCount:TVkUInt32;
       primitiveOffset:TVkUInt32;
       firstVertex:TVkUInt32;
       transformOffset:TVkUInt32;
     end;

     PPVkAccelerationStructureCreateGeometryTypeInfoKHR=^PVkAccelerationStructureCreateGeometryTypeInfoKHR;
     PVkAccelerationStructureCreateGeometryTypeInfoKHR=^TVkAccelerationStructureCreateGeometryTypeInfoKHR;
     TVkAccelerationStructureCreateGeometryTypeInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR
       pNext:PVkVoid;
       geometryType:TVkGeometryTypeKHR;
       maxPrimitiveCount:TVkUInt32;
       indexType:TVkIndexType;
       maxVertexCount:TVkUInt32;
       vertexFormat:TVkFormat;
       allowsTransforms:TVkBool32;
     end;

     PPVkAccelerationStructureCreateInfoKHR=^PVkAccelerationStructureCreateInfoKHR;
     PVkAccelerationStructureCreateInfoKHR=^TVkAccelerationStructureCreateInfoKHR;
     TVkAccelerationStructureCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR
       pNext:PVkVoid;
       compactedSize:TVkDeviceSize;
       type_:TVkAccelerationStructureTypeKHR;
       flags:TVkBuildAccelerationStructureFlagsKHR;
       maxGeometryCount:TVkUInt32;
       pGeometryInfos:PVkAccelerationStructureCreateGeometryTypeInfoKHR;
       deviceAddress:TVkDeviceAddress;
     end;

     PPVkAabbPositionsKHR=^PVkAabbPositionsKHR;
     PVkAabbPositionsKHR=^TVkAabbPositionsKHR;
     TVkAabbPositionsKHR=record
       minX:TVkFloat;
       minY:TVkFloat;
       minZ:TVkFloat;
       maxX:TVkFloat;
       maxY:TVkFloat;
       maxZ:TVkFloat;
     end;

     PPVkAabbPositionsNV=^PVkAabbPositionsNV;
     PVkAabbPositionsNV=^TVkAabbPositionsNV;
     TVkAabbPositionsNV=TVkAabbPositionsKHR;

     PPVkTransformMatrixKHR=^PVkTransformMatrixKHR;
     PVkTransformMatrixKHR=^TVkTransformMatrixKHR;
     TVkTransformMatrixKHR=record
       matrix:array[0..2] of TVkFloat;
     end;

     PPVkTransformMatrixNV=^PVkTransformMatrixNV;
     PVkTransformMatrixNV=^TVkTransformMatrixNV;
     TVkTransformMatrixNV=TVkTransformMatrixKHR;

     PPVkAccelerationStructureInstanceKHR=^PVkAccelerationStructureInstanceKHR;
     PVkAccelerationStructureInstanceKHR=^TVkAccelerationStructureInstanceKHR;
     TVkAccelerationStructureInstanceKHR=record
       transform:TVkTransformMatrixKHR;
       instanceCustomIndex:TVkUInt32;
       mask:TVkUInt32;
       instanceShaderBindingTableRecordOffset:TVkUInt32;
       flags:TVkGeometryInstanceFlagsKHR;
       accelerationStructureReference:TVkUInt64;
     end;

     PPVkAccelerationStructureInstanceNV=^PVkAccelerationStructureInstanceNV;
     PVkAccelerationStructureInstanceNV=^TVkAccelerationStructureInstanceNV;
     TVkAccelerationStructureInstanceNV=TVkAccelerationStructureInstanceKHR;

     PPVkAccelerationStructureDeviceAddressInfoKHR=^PVkAccelerationStructureDeviceAddressInfoKHR;
     PVkAccelerationStructureDeviceAddressInfoKHR=^TVkAccelerationStructureDeviceAddressInfoKHR;
     TVkAccelerationStructureDeviceAddressInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR
       pNext:PVkVoid;
       accelerationStructure:TVkAccelerationStructureKHR;
     end;

     PPVkAccelerationStructureVersionKHR=^PVkAccelerationStructureVersionKHR;
     PVkAccelerationStructureVersionKHR=^TVkAccelerationStructureVersionKHR;
     TVkAccelerationStructureVersionKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR
       pNext:PVkVoid;
       versionData:PVkUInt8;
     end;

     PPVkCopyAccelerationStructureInfoKHR=^PVkCopyAccelerationStructureInfoKHR;
     PVkCopyAccelerationStructureInfoKHR=^TVkCopyAccelerationStructureInfoKHR;
     TVkCopyAccelerationStructureInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR
       pNext:PVkVoid;
       src:TVkAccelerationStructureKHR;
       dst:TVkAccelerationStructureKHR;
       mode:TVkCopyAccelerationStructureModeKHR;
     end;

     PPVkCopyAccelerationStructureToMemoryInfoKHR=^PVkCopyAccelerationStructureToMemoryInfoKHR;
     PVkCopyAccelerationStructureToMemoryInfoKHR=^TVkCopyAccelerationStructureToMemoryInfoKHR;
     TVkCopyAccelerationStructureToMemoryInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR
       pNext:PVkVoid;
       src:TVkAccelerationStructureKHR;
       dst:TVkDeviceOrHostAddressKHR;
       mode:TVkCopyAccelerationStructureModeKHR;
     end;

     PPVkCopyMemoryToAccelerationStructureInfoKHR=^PVkCopyMemoryToAccelerationStructureInfoKHR;
     PVkCopyMemoryToAccelerationStructureInfoKHR=^TVkCopyMemoryToAccelerationStructureInfoKHR;
     TVkCopyMemoryToAccelerationStructureInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR
       pNext:PVkVoid;
       src:TVkDeviceOrHostAddressConstKHR;
       dst:TVkAccelerationStructureKHR;
       mode:TVkCopyAccelerationStructureModeKHR;
     end;

     PPVkPipelineLibraryCreateInfoKHR=^PVkPipelineLibraryCreateInfoKHR;
     PVkPipelineLibraryCreateInfoKHR=^TVkPipelineLibraryCreateInfoKHR;
     TVkPipelineLibraryCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR
       pNext:PVkVoid;
       libraryCount:TVkUInt32;
       pLibraries:PVkPipeline;
     end;

     PPVkDeferredOperationInfoKHR=^PVkDeferredOperationInfoKHR;
     PVkDeferredOperationInfoKHR=^TVkDeferredOperationInfoKHR;
     TVkDeferredOperationInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR
       pNext:PVkVoid;
       operationHandle:TVkDeferredOperationKHR;
     end;

     PPVkRayTracingPipelineCreateInfoKHR=^PVkRayTracingPipelineCreateInfoKHR;
     PVkRayTracingPipelineCreateInfoKHR=^TVkRayTracingPipelineCreateInfoKHR;
     TVkRayTracingPipelineCreateInfoKHR=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR
       pNext:PVkVoid;
       flags:TVkPipelineCreateFlags;
       stageCount:TVkUInt32;
       pStages:PVkPipelineShaderStageCreateInfo;
       groupCount:TVkUInt32;
       pGroups:PVkRayTracingShaderGroupCreateInfoKHR;
       maxRecursionDepth:TVkUInt32;
       libraries:TVkPipelineLibraryCreateInfoKHR;
       pLibraryInterface:PVkRayTracingPipelineInterfaceCreateInfoKHR;
       layout:TVkPipelineLayout;
       basePipelineHandle:TVkPipeline;
       basePipelineIndex:TVkInt32;
     end;

     PPVkPhysicalDeviceExtendedDynamicStateFeaturesEXT=^PVkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
     PVkPhysicalDeviceExtendedDynamicStateFeaturesEXT=^TVkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
     TVkPhysicalDeviceExtendedDynamicStateFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT
       pNext:PVkVoid;
       extendedDynamicState:TVkBool32;
     end;

     PPVkRenderPassTransformBeginInfoQCOM=^PVkRenderPassTransformBeginInfoQCOM;
     PVkRenderPassTransformBeginInfoQCOM=^TVkRenderPassTransformBeginInfoQCOM;
     TVkRenderPassTransformBeginInfoQCOM=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM
       pNext:PVkVoid;
       transform:TVkSurfaceTransformFlagBitsKHR;
     end;

     PPVkCommandBufferInheritanceRenderPassTransformInfoQCOM=^PVkCommandBufferInheritanceRenderPassTransformInfoQCOM;
     PVkCommandBufferInheritanceRenderPassTransformInfoQCOM=^TVkCommandBufferInheritanceRenderPassTransformInfoQCOM;
     TVkCommandBufferInheritanceRenderPassTransformInfoQCOM=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM
       pNext:PVkVoid;
       transform:TVkSurfaceTransformFlagBitsKHR;
       renderArea:TVkRect2D;
     end;

     PPVkPhysicalDeviceDiagnosticsConfigFeaturesNV=^PVkPhysicalDeviceDiagnosticsConfigFeaturesNV;
     PVkPhysicalDeviceDiagnosticsConfigFeaturesNV=^TVkPhysicalDeviceDiagnosticsConfigFeaturesNV;
     TVkPhysicalDeviceDiagnosticsConfigFeaturesNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV
       pNext:PVkVoid;
       diagnosticsConfig:TVkBool32;
     end;

     PPVkDeviceDiagnosticsConfigCreateInfoNV=^PVkDeviceDiagnosticsConfigCreateInfoNV;
     PVkDeviceDiagnosticsConfigCreateInfoNV=^TVkDeviceDiagnosticsConfigCreateInfoNV;
     TVkDeviceDiagnosticsConfigCreateInfoNV=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV
       pNext:PVkVoid;
       flags:TVkDeviceDiagnosticsConfigFlagsNV;
     end;

     PPVkPhysicalDeviceRobustness2FeaturesEXT=^PVkPhysicalDeviceRobustness2FeaturesEXT;
     PVkPhysicalDeviceRobustness2FeaturesEXT=^TVkPhysicalDeviceRobustness2FeaturesEXT;
     TVkPhysicalDeviceRobustness2FeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT
       pNext:PVkVoid;
       robustBufferAccess2:TVkBool32;
       robustImageAccess2:TVkBool32;
       nullDescriptor:TVkBool32;
     end;

     PPVkPhysicalDeviceRobustness2PropertiesEXT=^PVkPhysicalDeviceRobustness2PropertiesEXT;
     PVkPhysicalDeviceRobustness2PropertiesEXT=^TVkPhysicalDeviceRobustness2PropertiesEXT;
     TVkPhysicalDeviceRobustness2PropertiesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT
       pNext:PVkVoid;
       robustStorageBufferAccessSizeAlignment:TVkDeviceSize;
       robustUniformBufferAccessSizeAlignment:TVkDeviceSize;
     end;

     PPVkPhysicalDeviceImageRobustnessFeaturesEXT=^PVkPhysicalDeviceImageRobustnessFeaturesEXT;
     PVkPhysicalDeviceImageRobustnessFeaturesEXT=^TVkPhysicalDeviceImageRobustnessFeaturesEXT;
     TVkPhysicalDeviceImageRobustnessFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT
       pNext:PVkVoid;
       robustImageAccess:TVkBool32;
     end;

     PPVkPhysicalDevice4444FormatsFeaturesEXT=^PVkPhysicalDevice4444FormatsFeaturesEXT;
     PVkPhysicalDevice4444FormatsFeaturesEXT=^TVkPhysicalDevice4444FormatsFeaturesEXT;
     TVkPhysicalDevice4444FormatsFeaturesEXT=record
       sType:TVkStructureType; //< Must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT
       pNext:PVkVoid;
       formatA4R4G4B4:TVkBool32;
       formatA4B4G4R4:TVkBool32;
     end;


//========== Vulkan Functions Definitions ================ Total: 484

     TvkCreateInstance=function(const pCreateInfo:PVkInstanceCreateInfo;const pAllocator:PVkAllocationCallbacks;pInstance:PVkInstance):TVkResult; vkExtdecl;
     TvkDestroyInstance=procedure(instance:TVkInstance;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkEnumeratePhysicalDevices=function(instance:TVkInstance;pPhysicalDeviceCount:PVkUInt32;pPhysicalDevices:PVkPhysicalDevice):TVkResult; vkExtdecl;
     TvkGetDeviceProcAddr=function(device:TVkDevice;const pName:PVkChar):TPFN_vkVoidFunction; vkExtdecl;
     TvkGetInstanceProcAddr=function(instance:TVkInstance;const pName:PVkChar):TPFN_vkVoidFunction; vkExtdecl;
     TvkGetPhysicalDeviceProperties=procedure(physicalDevice:TVkPhysicalDevice;pProperties:PVkPhysicalDeviceProperties); vkExtdecl;
     TvkGetPhysicalDeviceQueueFamilyProperties=procedure(physicalDevice:TVkPhysicalDevice;pQueueFamilyPropertyCount:PVkUInt32;pQueueFamilyProperties:PVkQueueFamilyProperties); vkExtdecl;
     TvkGetPhysicalDeviceMemoryProperties=procedure(physicalDevice:TVkPhysicalDevice;pMemoryProperties:PVkPhysicalDeviceMemoryProperties); vkExtdecl;
     TvkGetPhysicalDeviceFeatures=procedure(physicalDevice:TVkPhysicalDevice;pFeatures:PVkPhysicalDeviceFeatures); vkExtdecl;
     TvkGetPhysicalDeviceFormatProperties=procedure(physicalDevice:TVkPhysicalDevice;format:TVkFormat;pFormatProperties:PVkFormatProperties); vkExtdecl;
     TvkGetPhysicalDeviceImageFormatProperties=function(physicalDevice:TVkPhysicalDevice;format:TVkFormat;type_:TVkImageType;tiling:TVkImageTiling;usage:TVkImageUsageFlags;flags:TVkImageCreateFlags;pImageFormatProperties:PVkImageFormatProperties):TVkResult; vkExtdecl;
     TvkCreateDevice=function(physicalDevice:TVkPhysicalDevice;const pCreateInfo:PVkDeviceCreateInfo;const pAllocator:PVkAllocationCallbacks;pDevice:PVkDevice):TVkResult; vkExtdecl;
     TvkDestroyDevice=procedure(device:TVkDevice;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkEnumerateInstanceVersion=function(pApiVersion:PVkUInt32):TVkResult; vkExtdecl;
     TvkEnumerateInstanceLayerProperties=function(pPropertyCount:PVkUInt32;pProperties:PVkLayerProperties):TVkResult; vkExtdecl;
     TvkEnumerateInstanceExtensionProperties=function(const pLayerName:PVkChar;pPropertyCount:PVkUInt32;pProperties:PVkExtensionProperties):TVkResult; vkExtdecl;
     TvkEnumerateDeviceLayerProperties=function(physicalDevice:TVkPhysicalDevice;pPropertyCount:PVkUInt32;pProperties:PVkLayerProperties):TVkResult; vkExtdecl;
     TvkEnumerateDeviceExtensionProperties=function(physicalDevice:TVkPhysicalDevice;const pLayerName:PVkChar;pPropertyCount:PVkUInt32;pProperties:PVkExtensionProperties):TVkResult; vkExtdecl;
     TvkGetDeviceQueue=procedure(device:TVkDevice;queueFamilyIndex:TVkUInt32;queueIndex:TVkUInt32;pQueue:PVkQueue); vkExtdecl;
     TvkQueueSubmit=function(queue:TVkQueue;submitCount:TVkUInt32;const pSubmits:PVkSubmitInfo;fence:TVkFence):TVkResult; vkExtdecl;
     TvkQueueWaitIdle=function(queue:TVkQueue):TVkResult; vkExtdecl;
     TvkDeviceWaitIdle=function(device:TVkDevice):TVkResult; vkExtdecl;
     TvkAllocateMemory=function(device:TVkDevice;const pAllocateInfo:PVkMemoryAllocateInfo;const pAllocator:PVkAllocationCallbacks;pMemory:PVkDeviceMemory):TVkResult; vkExtdecl;
     TvkFreeMemory=procedure(device:TVkDevice;memory:TVkDeviceMemory;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkMapMemory=function(device:TVkDevice;memory:TVkDeviceMemory;offset:TVkDeviceSize;size:TVkDeviceSize;flags:TVkMemoryMapFlags;ppData:PPVkVoid):TVkResult; vkExtdecl;
     TvkUnmapMemory=procedure(device:TVkDevice;memory:TVkDeviceMemory); vkExtdecl;
     TvkFlushMappedMemoryRanges=function(device:TVkDevice;memoryRangeCount:TVkUInt32;const pMemoryRanges:PVkMappedMemoryRange):TVkResult; vkExtdecl;
     TvkInvalidateMappedMemoryRanges=function(device:TVkDevice;memoryRangeCount:TVkUInt32;const pMemoryRanges:PVkMappedMemoryRange):TVkResult; vkExtdecl;
     TvkGetDeviceMemoryCommitment=procedure(device:TVkDevice;memory:TVkDeviceMemory;pCommittedMemoryInBytes:PVkDeviceSize); vkExtdecl;
     TvkGetBufferMemoryRequirements=procedure(device:TVkDevice;buffer:TVkBuffer;pMemoryRequirements:PVkMemoryRequirements); vkExtdecl;
     TvkBindBufferMemory=function(device:TVkDevice;buffer:TVkBuffer;memory:TVkDeviceMemory;memoryOffset:TVkDeviceSize):TVkResult; vkExtdecl;
     TvkGetImageMemoryRequirements=procedure(device:TVkDevice;image:TVkImage;pMemoryRequirements:PVkMemoryRequirements); vkExtdecl;
     TvkBindImageMemory=function(device:TVkDevice;image:TVkImage;memory:TVkDeviceMemory;memoryOffset:TVkDeviceSize):TVkResult; vkExtdecl;
     TvkGetImageSparseMemoryRequirements=procedure(device:TVkDevice;image:TVkImage;pSparseMemoryRequirementCount:PVkUInt32;pSparseMemoryRequirements:PVkSparseImageMemoryRequirements); vkExtdecl;
     TvkGetPhysicalDeviceSparseImageFormatProperties=procedure(physicalDevice:TVkPhysicalDevice;format:TVkFormat;type_:TVkImageType;samples:TVkSampleCountFlagBits;usage:TVkImageUsageFlags;tiling:TVkImageTiling;pPropertyCount:PVkUInt32;pProperties:PVkSparseImageFormatProperties); vkExtdecl;
     TvkQueueBindSparse=function(queue:TVkQueue;bindInfoCount:TVkUInt32;const pBindInfo:PVkBindSparseInfo;fence:TVkFence):TVkResult; vkExtdecl;
     TvkCreateFence=function(device:TVkDevice;const pCreateInfo:PVkFenceCreateInfo;const pAllocator:PVkAllocationCallbacks;pFence:PVkFence):TVkResult; vkExtdecl;
     TvkDestroyFence=procedure(device:TVkDevice;fence:TVkFence;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkResetFences=function(device:TVkDevice;fenceCount:TVkUInt32;const pFences:PVkFence):TVkResult; vkExtdecl;
     TvkGetFenceStatus=function(device:TVkDevice;fence:TVkFence):TVkResult; vkExtdecl;
     TvkWaitForFences=function(device:TVkDevice;fenceCount:TVkUInt32;const pFences:PVkFence;waitAll:TVkBool32;timeout:TVkUInt64):TVkResult; vkExtdecl;
     TvkCreateSemaphore=function(device:TVkDevice;const pCreateInfo:PVkSemaphoreCreateInfo;const pAllocator:PVkAllocationCallbacks;pSemaphore:PVkSemaphore):TVkResult; vkExtdecl;
     TvkDestroySemaphore=procedure(device:TVkDevice;semaphore:TVkSemaphore;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreateEvent=function(device:TVkDevice;const pCreateInfo:PVkEventCreateInfo;const pAllocator:PVkAllocationCallbacks;pEvent:PVkEvent):TVkResult; vkExtdecl;
     TvkDestroyEvent=procedure(device:TVkDevice;event:TVkEvent;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetEventStatus=function(device:TVkDevice;event:TVkEvent):TVkResult; vkExtdecl;
     TvkSetEvent=function(device:TVkDevice;event:TVkEvent):TVkResult; vkExtdecl;
     TvkResetEvent=function(device:TVkDevice;event:TVkEvent):TVkResult; vkExtdecl;
     TvkCreateQueryPool=function(device:TVkDevice;const pCreateInfo:PVkQueryPoolCreateInfo;const pAllocator:PVkAllocationCallbacks;pQueryPool:PVkQueryPool):TVkResult; vkExtdecl;
     TvkDestroyQueryPool=procedure(device:TVkDevice;queryPool:TVkQueryPool;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetQueryPoolResults=function(device:TVkDevice;queryPool:TVkQueryPool;firstQuery:TVkUInt32;queryCount:TVkUInt32;dataSize:TVkSize;pData:PVkVoid;stride:TVkDeviceSize;flags:TVkQueryResultFlags):TVkResult; vkExtdecl;
     TvkResetQueryPool=procedure(device:TVkDevice;queryPool:TVkQueryPool;firstQuery:TVkUInt32;queryCount:TVkUInt32); vkExtdecl;
     TvkResetQueryPoolEXT=procedure(device:TVkDevice;queryPool:TVkQueryPool;firstQuery:TVkUInt32;queryCount:TVkUInt32); vkExtdecl;
     TvkCreateBuffer=function(device:TVkDevice;const pCreateInfo:PVkBufferCreateInfo;const pAllocator:PVkAllocationCallbacks;pBuffer:PVkBuffer):TVkResult; vkExtdecl;
     TvkDestroyBuffer=procedure(device:TVkDevice;buffer:TVkBuffer;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreateBufferView=function(device:TVkDevice;const pCreateInfo:PVkBufferViewCreateInfo;const pAllocator:PVkAllocationCallbacks;pView:PVkBufferView):TVkResult; vkExtdecl;
     TvkDestroyBufferView=procedure(device:TVkDevice;bufferView:TVkBufferView;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreateImage=function(device:TVkDevice;const pCreateInfo:PVkImageCreateInfo;const pAllocator:PVkAllocationCallbacks;pImage:PVkImage):TVkResult; vkExtdecl;
     TvkDestroyImage=procedure(device:TVkDevice;image:TVkImage;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetImageSubresourceLayout=procedure(device:TVkDevice;image:TVkImage;const pSubresource:PVkImageSubresource;pLayout:PVkSubresourceLayout); vkExtdecl;
     TvkCreateImageView=function(device:TVkDevice;const pCreateInfo:PVkImageViewCreateInfo;const pAllocator:PVkAllocationCallbacks;pView:PVkImageView):TVkResult; vkExtdecl;
     TvkDestroyImageView=procedure(device:TVkDevice;imageView:TVkImageView;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreateShaderModule=function(device:TVkDevice;const pCreateInfo:PVkShaderModuleCreateInfo;const pAllocator:PVkAllocationCallbacks;pShaderModule:PVkShaderModule):TVkResult; vkExtdecl;
     TvkDestroyShaderModule=procedure(device:TVkDevice;shaderModule:TVkShaderModule;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreatePipelineCache=function(device:TVkDevice;const pCreateInfo:PVkPipelineCacheCreateInfo;const pAllocator:PVkAllocationCallbacks;pPipelineCache:PVkPipelineCache):TVkResult; vkExtdecl;
     TvkDestroyPipelineCache=procedure(device:TVkDevice;pipelineCache:TVkPipelineCache;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetPipelineCacheData=function(device:TVkDevice;pipelineCache:TVkPipelineCache;pDataSize:PVkSize;pData:PVkVoid):TVkResult; vkExtdecl;
     TvkMergePipelineCaches=function(device:TVkDevice;dstCache:TVkPipelineCache;srcCacheCount:TVkUInt32;const pSrcCaches:PVkPipelineCache):TVkResult; vkExtdecl;
     TvkCreateGraphicsPipelines=function(device:TVkDevice;pipelineCache:TVkPipelineCache;createInfoCount:TVkUInt32;const pCreateInfos:PVkGraphicsPipelineCreateInfo;const pAllocator:PVkAllocationCallbacks;pPipelines:PVkPipeline):TVkResult; vkExtdecl;
     TvkCreateComputePipelines=function(device:TVkDevice;pipelineCache:TVkPipelineCache;createInfoCount:TVkUInt32;const pCreateInfos:PVkComputePipelineCreateInfo;const pAllocator:PVkAllocationCallbacks;pPipelines:PVkPipeline):TVkResult; vkExtdecl;
     TvkDestroyPipeline=procedure(device:TVkDevice;pipeline:TVkPipeline;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreatePipelineLayout=function(device:TVkDevice;const pCreateInfo:PVkPipelineLayoutCreateInfo;const pAllocator:PVkAllocationCallbacks;pPipelineLayout:PVkPipelineLayout):TVkResult; vkExtdecl;
     TvkDestroyPipelineLayout=procedure(device:TVkDevice;pipelineLayout:TVkPipelineLayout;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreateSampler=function(device:TVkDevice;const pCreateInfo:PVkSamplerCreateInfo;const pAllocator:PVkAllocationCallbacks;pSampler:PVkSampler):TVkResult; vkExtdecl;
     TvkDestroySampler=procedure(device:TVkDevice;sampler:TVkSampler;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreateDescriptorSetLayout=function(device:TVkDevice;const pCreateInfo:PVkDescriptorSetLayoutCreateInfo;const pAllocator:PVkAllocationCallbacks;pSetLayout:PVkDescriptorSetLayout):TVkResult; vkExtdecl;
     TvkDestroyDescriptorSetLayout=procedure(device:TVkDevice;descriptorSetLayout:TVkDescriptorSetLayout;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreateDescriptorPool=function(device:TVkDevice;const pCreateInfo:PVkDescriptorPoolCreateInfo;const pAllocator:PVkAllocationCallbacks;pDescriptorPool:PVkDescriptorPool):TVkResult; vkExtdecl;
     TvkDestroyDescriptorPool=procedure(device:TVkDevice;descriptorPool:TVkDescriptorPool;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkResetDescriptorPool=function(device:TVkDevice;descriptorPool:TVkDescriptorPool;flags:TVkDescriptorPoolResetFlags):TVkResult; vkExtdecl;
     TvkAllocateDescriptorSets=function(device:TVkDevice;const pAllocateInfo:PVkDescriptorSetAllocateInfo;pDescriptorSets:PVkDescriptorSet):TVkResult; vkExtdecl;
     TvkFreeDescriptorSets=function(device:TVkDevice;descriptorPool:TVkDescriptorPool;descriptorSetCount:TVkUInt32;const pDescriptorSets:PVkDescriptorSet):TVkResult; vkExtdecl;
     TvkUpdateDescriptorSets=procedure(device:TVkDevice;descriptorWriteCount:TVkUInt32;const pDescriptorWrites:PVkWriteDescriptorSet;descriptorCopyCount:TVkUInt32;const pDescriptorCopies:PVkCopyDescriptorSet); vkExtdecl;
     TvkCreateFramebuffer=function(device:TVkDevice;const pCreateInfo:PVkFramebufferCreateInfo;const pAllocator:PVkAllocationCallbacks;pFramebuffer:PVkFramebuffer):TVkResult; vkExtdecl;
     TvkDestroyFramebuffer=procedure(device:TVkDevice;framebuffer:TVkFramebuffer;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkCreateRenderPass=function(device:TVkDevice;const pCreateInfo:PVkRenderPassCreateInfo;const pAllocator:PVkAllocationCallbacks;pRenderPass:PVkRenderPass):TVkResult; vkExtdecl;
     TvkDestroyRenderPass=procedure(device:TVkDevice;renderPass:TVkRenderPass;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetRenderAreaGranularity=procedure(device:TVkDevice;renderPass:TVkRenderPass;pGranularity:PVkExtent2D); vkExtdecl;
     TvkCreateCommandPool=function(device:TVkDevice;const pCreateInfo:PVkCommandPoolCreateInfo;const pAllocator:PVkAllocationCallbacks;pCommandPool:PVkCommandPool):TVkResult; vkExtdecl;
     TvkDestroyCommandPool=procedure(device:TVkDevice;commandPool:TVkCommandPool;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkResetCommandPool=function(device:TVkDevice;commandPool:TVkCommandPool;flags:TVkCommandPoolResetFlags):TVkResult; vkExtdecl;
     TvkAllocateCommandBuffers=function(device:TVkDevice;const pAllocateInfo:PVkCommandBufferAllocateInfo;pCommandBuffers:PVkCommandBuffer):TVkResult; vkExtdecl;
     TvkFreeCommandBuffers=procedure(device:TVkDevice;commandPool:TVkCommandPool;commandBufferCount:TVkUInt32;const pCommandBuffers:PVkCommandBuffer); vkExtdecl;
     TvkBeginCommandBuffer=function(commandBuffer:TVkCommandBuffer;const pBeginInfo:PVkCommandBufferBeginInfo):TVkResult; vkExtdecl;
     TvkEndCommandBuffer=function(commandBuffer:TVkCommandBuffer):TVkResult; vkExtdecl;
     TvkResetCommandBuffer=function(commandBuffer:TVkCommandBuffer;flags:TVkCommandBufferResetFlags):TVkResult; vkExtdecl;
     TvkCmdBindPipeline=procedure(commandBuffer:TVkCommandBuffer;pipelineBindPoint:TVkPipelineBindPoint;pipeline:TVkPipeline); vkExtdecl;
     TvkCmdSetViewport=procedure(commandBuffer:TVkCommandBuffer;firstViewport:TVkUInt32;viewportCount:TVkUInt32;const pViewports:PVkViewport); vkExtdecl;
     TvkCmdSetScissor=procedure(commandBuffer:TVkCommandBuffer;firstScissor:TVkUInt32;scissorCount:TVkUInt32;const pScissors:PVkRect2D); vkExtdecl;
     TvkCmdSetLineWidth=procedure(commandBuffer:TVkCommandBuffer;lineWidth:TVkFloat); vkExtdecl;
     TvkCmdSetDepthBias=procedure(commandBuffer:TVkCommandBuffer;depthBiasConstantFactor:TVkFloat;depthBiasClamp:TVkFloat;depthBiasSlopeFactor:TVkFloat); vkExtdecl;
     TvkCmdSetBlendConstants=procedure(commandBuffer:TVkCommandBuffer;const blendConstants:TVkFloat); vkExtdecl;
     TvkCmdSetDepthBounds=procedure(commandBuffer:TVkCommandBuffer;minDepthBounds:TVkFloat;maxDepthBounds:TVkFloat); vkExtdecl;
     TvkCmdSetStencilCompareMask=procedure(commandBuffer:TVkCommandBuffer;faceMask:TVkStencilFaceFlags;compareMask:TVkUInt32); vkExtdecl;
     TvkCmdSetStencilWriteMask=procedure(commandBuffer:TVkCommandBuffer;faceMask:TVkStencilFaceFlags;writeMask:TVkUInt32); vkExtdecl;
     TvkCmdSetStencilReference=procedure(commandBuffer:TVkCommandBuffer;faceMask:TVkStencilFaceFlags;reference:TVkUInt32); vkExtdecl;
     TvkCmdBindDescriptorSets=procedure(commandBuffer:TVkCommandBuffer;pipelineBindPoint:TVkPipelineBindPoint;layout:TVkPipelineLayout;firstSet:TVkUInt32;descriptorSetCount:TVkUInt32;const pDescriptorSets:PVkDescriptorSet;dynamicOffsetCount:TVkUInt32;const pDynamicOffsets:PVkUInt32); vkExtdecl;
     TvkCmdBindIndexBuffer=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;indexType:TVkIndexType); vkExtdecl;
     TvkCmdBindVertexBuffers=procedure(commandBuffer:TVkCommandBuffer;firstBinding:TVkUInt32;bindingCount:TVkUInt32;const pBuffers:PVkBuffer;const pOffsets:PVkDeviceSize); vkExtdecl;
     TvkCmdDraw=procedure(commandBuffer:TVkCommandBuffer;vertexCount:TVkUInt32;instanceCount:TVkUInt32;firstVertex:TVkUInt32;firstInstance:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndexed=procedure(commandBuffer:TVkCommandBuffer;indexCount:TVkUInt32;instanceCount:TVkUInt32;firstIndex:TVkUInt32;vertexOffset:TVkInt32;firstInstance:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndirect=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;drawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndexedIndirect=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;drawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdDispatch=procedure(commandBuffer:TVkCommandBuffer;groupCountX:TVkUInt32;groupCountY:TVkUInt32;groupCountZ:TVkUInt32); vkExtdecl;
     TvkCmdDispatchIndirect=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize); vkExtdecl;
     TvkCmdCopyBuffer=procedure(commandBuffer:TVkCommandBuffer;srcBuffer:TVkBuffer;dstBuffer:TVkBuffer;regionCount:TVkUInt32;const pRegions:PVkBufferCopy); vkExtdecl;
     TvkCmdCopyImage=procedure(commandBuffer:TVkCommandBuffer;srcImage:TVkImage;srcImageLayout:TVkImageLayout;dstImage:TVkImage;dstImageLayout:TVkImageLayout;regionCount:TVkUInt32;const pRegions:PVkImageCopy); vkExtdecl;
     TvkCmdBlitImage=procedure(commandBuffer:TVkCommandBuffer;srcImage:TVkImage;srcImageLayout:TVkImageLayout;dstImage:TVkImage;dstImageLayout:TVkImageLayout;regionCount:TVkUInt32;const pRegions:PVkImageBlit;filter:TVkFilter); vkExtdecl;
     TvkCmdCopyBufferToImage=procedure(commandBuffer:TVkCommandBuffer;srcBuffer:TVkBuffer;dstImage:TVkImage;dstImageLayout:TVkImageLayout;regionCount:TVkUInt32;const pRegions:PVkBufferImageCopy); vkExtdecl;
     TvkCmdCopyImageToBuffer=procedure(commandBuffer:TVkCommandBuffer;srcImage:TVkImage;srcImageLayout:TVkImageLayout;dstBuffer:TVkBuffer;regionCount:TVkUInt32;const pRegions:PVkBufferImageCopy); vkExtdecl;
     TvkCmdUpdateBuffer=procedure(commandBuffer:TVkCommandBuffer;dstBuffer:TVkBuffer;dstOffset:TVkDeviceSize;dataSize:TVkDeviceSize;const pData:PVkVoid); vkExtdecl;
     TvkCmdFillBuffer=procedure(commandBuffer:TVkCommandBuffer;dstBuffer:TVkBuffer;dstOffset:TVkDeviceSize;size:TVkDeviceSize;data:TVkUInt32); vkExtdecl;
     TvkCmdClearColorImage=procedure(commandBuffer:TVkCommandBuffer;image:TVkImage;imageLayout:TVkImageLayout;const pColor:PVkClearColorValue;rangeCount:TVkUInt32;const pRanges:PVkImageSubresourceRange); vkExtdecl;
     TvkCmdClearDepthStencilImage=procedure(commandBuffer:TVkCommandBuffer;image:TVkImage;imageLayout:TVkImageLayout;const pDepthStencil:PVkClearDepthStencilValue;rangeCount:TVkUInt32;const pRanges:PVkImageSubresourceRange); vkExtdecl;
     TvkCmdClearAttachments=procedure(commandBuffer:TVkCommandBuffer;attachmentCount:TVkUInt32;const pAttachments:PVkClearAttachment;rectCount:TVkUInt32;const pRects:PVkClearRect); vkExtdecl;
     TvkCmdResolveImage=procedure(commandBuffer:TVkCommandBuffer;srcImage:TVkImage;srcImageLayout:TVkImageLayout;dstImage:TVkImage;dstImageLayout:TVkImageLayout;regionCount:TVkUInt32;const pRegions:PVkImageResolve); vkExtdecl;
     TvkCmdSetEvent=procedure(commandBuffer:TVkCommandBuffer;event:TVkEvent;stageMask:TVkPipelineStageFlags); vkExtdecl;
     TvkCmdResetEvent=procedure(commandBuffer:TVkCommandBuffer;event:TVkEvent;stageMask:TVkPipelineStageFlags); vkExtdecl;
     TvkCmdWaitEvents=procedure(commandBuffer:TVkCommandBuffer;eventCount:TVkUInt32;const pEvents:PVkEvent;srcStageMask:TVkPipelineStageFlags;dstStageMask:TVkPipelineStageFlags;memoryBarrierCount:TVkUInt32;const pMemoryBarriers:PVkMemoryBarrier;bufferMemoryBarrierCount:TVkUInt32;const pBufferMemoryBarriers:PVkBufferMemoryBarrier;imageMemoryBarrierCount:TVkUInt32;const pImageMemoryBarriers:PVkImageMemoryBarrier); vkExtdecl;
     TvkCmdPipelineBarrier=procedure(commandBuffer:TVkCommandBuffer;srcStageMask:TVkPipelineStageFlags;dstStageMask:TVkPipelineStageFlags;dependencyFlags:TVkDependencyFlags;memoryBarrierCount:TVkUInt32;const pMemoryBarriers:PVkMemoryBarrier;bufferMemoryBarrierCount:TVkUInt32;const pBufferMemoryBarriers:PVkBufferMemoryBarrier;imageMemoryBarrierCount:TVkUInt32;const pImageMemoryBarriers:PVkImageMemoryBarrier); vkExtdecl;
     TvkCmdBeginQuery=procedure(commandBuffer:TVkCommandBuffer;queryPool:TVkQueryPool;query:TVkUInt32;flags:TVkQueryControlFlags); vkExtdecl;
     TvkCmdEndQuery=procedure(commandBuffer:TVkCommandBuffer;queryPool:TVkQueryPool;query:TVkUInt32); vkExtdecl;
     TvkCmdBeginConditionalRenderingEXT=procedure(commandBuffer:TVkCommandBuffer;const pConditionalRenderingBegin:PVkConditionalRenderingBeginInfoEXT); vkExtdecl;
     TvkCmdEndConditionalRenderingEXT=procedure(commandBuffer:TVkCommandBuffer); vkExtdecl;
     TvkCmdResetQueryPool=procedure(commandBuffer:TVkCommandBuffer;queryPool:TVkQueryPool;firstQuery:TVkUInt32;queryCount:TVkUInt32); vkExtdecl;
     TvkCmdWriteTimestamp=procedure(commandBuffer:TVkCommandBuffer;pipelineStage:TVkPipelineStageFlagBits;queryPool:TVkQueryPool;query:TVkUInt32); vkExtdecl;
     TvkCmdCopyQueryPoolResults=procedure(commandBuffer:TVkCommandBuffer;queryPool:TVkQueryPool;firstQuery:TVkUInt32;queryCount:TVkUInt32;dstBuffer:TVkBuffer;dstOffset:TVkDeviceSize;stride:TVkDeviceSize;flags:TVkQueryResultFlags); vkExtdecl;
     TvkCmdPushConstants=procedure(commandBuffer:TVkCommandBuffer;layout:TVkPipelineLayout;stageFlags:TVkShaderStageFlags;offset:TVkUInt32;size:TVkUInt32;const pValues:PVkVoid); vkExtdecl;
     TvkCmdBeginRenderPass=procedure(commandBuffer:TVkCommandBuffer;const pRenderPassBegin:PVkRenderPassBeginInfo;contents:TVkSubpassContents); vkExtdecl;
     TvkCmdNextSubpass=procedure(commandBuffer:TVkCommandBuffer;contents:TVkSubpassContents); vkExtdecl;
     TvkCmdEndRenderPass=procedure(commandBuffer:TVkCommandBuffer); vkExtdecl;
     TvkCmdExecuteCommands=procedure(commandBuffer:TVkCommandBuffer;commandBufferCount:TVkUInt32;const pCommandBuffers:PVkCommandBuffer); vkExtdecl;
{$ifdef Android}
     TvkCreateAndroidSurfaceKHR=function(instance:TVkInstance;const pCreateInfo:PVkAndroidSurfaceCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
{$endif}
     TvkGetPhysicalDeviceDisplayPropertiesKHR=function(physicalDevice:TVkPhysicalDevice;pPropertyCount:PVkUInt32;pProperties:PVkDisplayPropertiesKHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceDisplayPlanePropertiesKHR=function(physicalDevice:TVkPhysicalDevice;pPropertyCount:PVkUInt32;pProperties:PVkDisplayPlanePropertiesKHR):TVkResult; vkExtdecl;
     TvkGetDisplayPlaneSupportedDisplaysKHR=function(physicalDevice:TVkPhysicalDevice;planeIndex:TVkUInt32;pDisplayCount:PVkUInt32;pDisplays:PVkDisplayKHR):TVkResult; vkExtdecl;
     TvkGetDisplayModePropertiesKHR=function(physicalDevice:TVkPhysicalDevice;display:TVkDisplayKHR;pPropertyCount:PVkUInt32;pProperties:PVkDisplayModePropertiesKHR):TVkResult; vkExtdecl;
     TvkCreateDisplayModeKHR=function(physicalDevice:TVkPhysicalDevice;display:TVkDisplayKHR;const pCreateInfo:PVkDisplayModeCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pMode:PVkDisplayModeKHR):TVkResult; vkExtdecl;
     TvkGetDisplayPlaneCapabilitiesKHR=function(physicalDevice:TVkPhysicalDevice;mode:TVkDisplayModeKHR;planeIndex:TVkUInt32;pCapabilities:PVkDisplayPlaneCapabilitiesKHR):TVkResult; vkExtdecl;
     TvkCreateDisplayPlaneSurfaceKHR=function(instance:TVkInstance;const pCreateInfo:PVkDisplaySurfaceCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
     TvkCreateSharedSwapchainsKHR=function(device:TVkDevice;swapchainCount:TVkUInt32;const pCreateInfos:PVkSwapchainCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pSwapchains:PVkSwapchainKHR):TVkResult; vkExtdecl;
     TvkDestroySurfaceKHR=procedure(instance:TVkInstance;surface:TVkSurfaceKHR;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetPhysicalDeviceSurfaceSupportKHR=function(physicalDevice:TVkPhysicalDevice;queueFamilyIndex:TVkUInt32;surface:TVkSurfaceKHR;pSupported:PVkBool32):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceSurfaceCapabilitiesKHR=function(physicalDevice:TVkPhysicalDevice;surface:TVkSurfaceKHR;pSurfaceCapabilities:PVkSurfaceCapabilitiesKHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceSurfaceFormatsKHR=function(physicalDevice:TVkPhysicalDevice;surface:TVkSurfaceKHR;pSurfaceFormatCount:PVkUInt32;pSurfaceFormats:PVkSurfaceFormatKHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceSurfacePresentModesKHR=function(physicalDevice:TVkPhysicalDevice;surface:TVkSurfaceKHR;pPresentModeCount:PVkUInt32;pPresentModes:PVkPresentModeKHR):TVkResult; vkExtdecl;
     TvkCreateSwapchainKHR=function(device:TVkDevice;const pCreateInfo:PVkSwapchainCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pSwapchain:PVkSwapchainKHR):TVkResult; vkExtdecl;
     TvkDestroySwapchainKHR=procedure(device:TVkDevice;swapchain:TVkSwapchainKHR;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetSwapchainImagesKHR=function(device:TVkDevice;swapchain:TVkSwapchainKHR;pSwapchainImageCount:PVkUInt32;pSwapchainImages:PVkImage):TVkResult; vkExtdecl;
     TvkAcquireNextImageKHR=function(device:TVkDevice;swapchain:TVkSwapchainKHR;timeout:TVkUInt64;semaphore:TVkSemaphore;fence:TVkFence;pImageIndex:PVkUInt32):TVkResult; vkExtdecl;
     TvkQueuePresentKHR=function(queue:TVkQueue;const pPresentInfo:PVkPresentInfoKHR):TVkResult; vkExtdecl;
     TvkCreateViSurfaceNN=function(instance:TVkInstance;const pCreateInfo:PVkViSurfaceCreateInfoNN;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
{$ifdef Wayland}
     TvkCreateWaylandSurfaceKHR=function(instance:TVkInstance;const pCreateInfo:PVkWaylandSurfaceCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
{$endif}
{$ifdef Wayland}
     TvkGetPhysicalDeviceWaylandPresentationSupportKHR=function(physicalDevice:TVkPhysicalDevice;queueFamilyIndex:TVkUInt32;display:PVkWaylandDisplay):TVkBool32; vkExtdecl;
{$endif}
{$ifdef Windows}
     TvkCreateWin32SurfaceKHR=function(instance:TVkInstance;const pCreateInfo:PVkWin32SurfaceCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
{$endif}
{$ifdef Windows}
     TvkGetPhysicalDeviceWin32PresentationSupportKHR=function(physicalDevice:TVkPhysicalDevice;queueFamilyIndex:TVkUInt32):TVkBool32; vkExtdecl;
{$endif}
{$ifdef XLIB}
     TvkCreateXlibSurfaceKHR=function(instance:TVkInstance;const pCreateInfo:PVkXlibSurfaceCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
{$endif}
{$ifdef XLIB}
     TvkGetPhysicalDeviceXlibPresentationSupportKHR=function(physicalDevice:TVkPhysicalDevice;queueFamilyIndex:TVkUInt32;dpy:PVkXLIBDisplay;visualID:TVkXLIBVisualID):TVkBool32; vkExtdecl;
{$endif}
{$ifdef XCB}
     TvkCreateXcbSurfaceKHR=function(instance:TVkInstance;const pCreateInfo:PVkXcbSurfaceCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
{$endif}
{$ifdef XCB}
     TvkGetPhysicalDeviceXcbPresentationSupportKHR=function(physicalDevice:TVkPhysicalDevice;queueFamilyIndex:TVkUInt32;connection:PVkXCBConnection;visual_id:TVkXCBVisualID):TVkBool32; vkExtdecl;
{$endif}
     TvkCreateDirectFBSurfaceEXT=function(instance:TVkInstance;const pCreateInfo:PVkDirectFBSurfaceCreateInfoEXT;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceDirectFBPresentationSupportEXT=function(physicalDevice:TVkPhysicalDevice;queueFamilyIndex:TVkUInt32;dfb:PIDirectFB):TVkBool32; vkExtdecl;
     TvkCreateImagePipeSurfaceFUCHSIA=function(instance:TVkInstance;const pCreateInfo:PVkImagePipeSurfaceCreateInfoFUCHSIA;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
     TvkCreateStreamDescriptorSurfaceGGP=function(instance:TVkInstance;const pCreateInfo:PVkStreamDescriptorSurfaceCreateInfoGGP;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
     TvkCreateDebugReportCallbackEXT=function(instance:TVkInstance;const pCreateInfo:PVkDebugReportCallbackCreateInfoEXT;const pAllocator:PVkAllocationCallbacks;pCallback:PVkDebugReportCallbackEXT):TVkResult; vkExtdecl;
     TvkDestroyDebugReportCallbackEXT=procedure(instance:TVkInstance;callback:TVkDebugReportCallbackEXT;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkDebugReportMessageEXT=procedure(instance:TVkInstance;flags:TVkDebugReportFlagsEXT;objectType:TVkDebugReportObjectTypeEXT;object_:TVkUInt64;location:TVkSize;messageCode:TVkInt32;const pLayerPrefix:PVkChar;const pMessage:PVkChar); vkExtdecl;
     TvkDebugMarkerSetObjectNameEXT=function(device:TVkDevice;const pNameInfo:PVkDebugMarkerObjectNameInfoEXT):TVkResult; vkExtdecl;
     TvkDebugMarkerSetObjectTagEXT=function(device:TVkDevice;const pTagInfo:PVkDebugMarkerObjectTagInfoEXT):TVkResult; vkExtdecl;
     TvkCmdDebugMarkerBeginEXT=procedure(commandBuffer:TVkCommandBuffer;const pMarkerInfo:PVkDebugMarkerMarkerInfoEXT); vkExtdecl;
     TvkCmdDebugMarkerEndEXT=procedure(commandBuffer:TVkCommandBuffer); vkExtdecl;
     TvkCmdDebugMarkerInsertEXT=procedure(commandBuffer:TVkCommandBuffer;const pMarkerInfo:PVkDebugMarkerMarkerInfoEXT); vkExtdecl;
     TvkGetPhysicalDeviceExternalImageFormatPropertiesNV=function(physicalDevice:TVkPhysicalDevice;format:TVkFormat;type_:TVkImageType;tiling:TVkImageTiling;usage:TVkImageUsageFlags;flags:TVkImageCreateFlags;externalHandleType:TVkExternalMemoryHandleTypeFlagsNV;pExternalImageFormatProperties:PVkExternalImageFormatPropertiesNV):TVkResult; vkExtdecl;
{$ifdef Windows}
     TvkGetMemoryWin32HandleNV=function(device:TVkDevice;memory:TVkDeviceMemory;handleType:TVkExternalMemoryHandleTypeFlagsNV;pHandle:PHANDLE):TVkResult; vkExtdecl;
{$endif}
     TvkCmdExecuteGeneratedCommandsNV=procedure(commandBuffer:TVkCommandBuffer;isPreprocessed:TVkBool32;const pGeneratedCommandsInfo:PVkGeneratedCommandsInfoNV); vkExtdecl;
     TvkCmdPreprocessGeneratedCommandsNV=procedure(commandBuffer:TVkCommandBuffer;const pGeneratedCommandsInfo:PVkGeneratedCommandsInfoNV); vkExtdecl;
     TvkCmdBindPipelineShaderGroupNV=procedure(commandBuffer:TVkCommandBuffer;pipelineBindPoint:TVkPipelineBindPoint;pipeline:TVkPipeline;groupIndex:TVkUInt32); vkExtdecl;
     TvkGetGeneratedCommandsMemoryRequirementsNV=procedure(device:TVkDevice;const pInfo:PVkGeneratedCommandsMemoryRequirementsInfoNV;pMemoryRequirements:PVkMemoryRequirements2); vkExtdecl;
     TvkCreateIndirectCommandsLayoutNV=function(device:TVkDevice;const pCreateInfo:PVkIndirectCommandsLayoutCreateInfoNV;const pAllocator:PVkAllocationCallbacks;pIndirectCommandsLayout:PVkIndirectCommandsLayoutNV):TVkResult; vkExtdecl;
     TvkDestroyIndirectCommandsLayoutNV=procedure(device:TVkDevice;indirectCommandsLayout:TVkIndirectCommandsLayoutNV;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetPhysicalDeviceFeatures2=procedure(physicalDevice:TVkPhysicalDevice;pFeatures:PVkPhysicalDeviceFeatures2); vkExtdecl;
     TvkGetPhysicalDeviceFeatures2KHR=procedure(physicalDevice:TVkPhysicalDevice;pFeatures:PVkPhysicalDeviceFeatures2); vkExtdecl;
     TvkGetPhysicalDeviceProperties2=procedure(physicalDevice:TVkPhysicalDevice;pProperties:PVkPhysicalDeviceProperties2); vkExtdecl;
     TvkGetPhysicalDeviceProperties2KHR=procedure(physicalDevice:TVkPhysicalDevice;pProperties:PVkPhysicalDeviceProperties2); vkExtdecl;
     TvkGetPhysicalDeviceFormatProperties2=procedure(physicalDevice:TVkPhysicalDevice;format:TVkFormat;pFormatProperties:PVkFormatProperties2); vkExtdecl;
     TvkGetPhysicalDeviceFormatProperties2KHR=procedure(physicalDevice:TVkPhysicalDevice;format:TVkFormat;pFormatProperties:PVkFormatProperties2); vkExtdecl;
     TvkGetPhysicalDeviceImageFormatProperties2=function(physicalDevice:TVkPhysicalDevice;const pImageFormatInfo:PVkPhysicalDeviceImageFormatInfo2;pImageFormatProperties:PVkImageFormatProperties2):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceImageFormatProperties2KHR=function(physicalDevice:TVkPhysicalDevice;const pImageFormatInfo:PVkPhysicalDeviceImageFormatInfo2;pImageFormatProperties:PVkImageFormatProperties2):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceQueueFamilyProperties2=procedure(physicalDevice:TVkPhysicalDevice;pQueueFamilyPropertyCount:PVkUInt32;pQueueFamilyProperties:PVkQueueFamilyProperties2); vkExtdecl;
     TvkGetPhysicalDeviceQueueFamilyProperties2KHR=procedure(physicalDevice:TVkPhysicalDevice;pQueueFamilyPropertyCount:PVkUInt32;pQueueFamilyProperties:PVkQueueFamilyProperties2); vkExtdecl;
     TvkGetPhysicalDeviceMemoryProperties2=procedure(physicalDevice:TVkPhysicalDevice;pMemoryProperties:PVkPhysicalDeviceMemoryProperties2); vkExtdecl;
     TvkGetPhysicalDeviceMemoryProperties2KHR=procedure(physicalDevice:TVkPhysicalDevice;pMemoryProperties:PVkPhysicalDeviceMemoryProperties2); vkExtdecl;
     TvkGetPhysicalDeviceSparseImageFormatProperties2=procedure(physicalDevice:TVkPhysicalDevice;const pFormatInfo:PVkPhysicalDeviceSparseImageFormatInfo2;pPropertyCount:PVkUInt32;pProperties:PVkSparseImageFormatProperties2); vkExtdecl;
     TvkGetPhysicalDeviceSparseImageFormatProperties2KHR=procedure(physicalDevice:TVkPhysicalDevice;const pFormatInfo:PVkPhysicalDeviceSparseImageFormatInfo2;pPropertyCount:PVkUInt32;pProperties:PVkSparseImageFormatProperties2); vkExtdecl;
     TvkCmdPushDescriptorSetKHR=procedure(commandBuffer:TVkCommandBuffer;pipelineBindPoint:TVkPipelineBindPoint;layout:TVkPipelineLayout;set_:TVkUInt32;descriptorWriteCount:TVkUInt32;const pDescriptorWrites:PVkWriteDescriptorSet); vkExtdecl;
     TvkTrimCommandPool=procedure(device:TVkDevice;commandPool:TVkCommandPool;flags:TVkCommandPoolTrimFlags); vkExtdecl;
     TvkTrimCommandPoolKHR=procedure(device:TVkDevice;commandPool:TVkCommandPool;flags:TVkCommandPoolTrimFlags); vkExtdecl;
     TvkGetPhysicalDeviceExternalBufferProperties=procedure(physicalDevice:TVkPhysicalDevice;const pExternalBufferInfo:PVkPhysicalDeviceExternalBufferInfo;pExternalBufferProperties:PVkExternalBufferProperties); vkExtdecl;
     TvkGetPhysicalDeviceExternalBufferPropertiesKHR=procedure(physicalDevice:TVkPhysicalDevice;const pExternalBufferInfo:PVkPhysicalDeviceExternalBufferInfo;pExternalBufferProperties:PVkExternalBufferProperties); vkExtdecl;
{$ifdef Windows}
     TvkGetMemoryWin32HandleKHR=function(device:TVkDevice;const pGetWin32HandleInfo:PVkMemoryGetWin32HandleInfoKHR;pHandle:PHANDLE):TVkResult; vkExtdecl;
{$endif}
{$ifdef Windows}
     TvkGetMemoryWin32HandlePropertiesKHR=function(device:TVkDevice;handleType:TVkExternalMemoryHandleTypeFlagBits;handle:THANDLE;pMemoryWin32HandleProperties:PVkMemoryWin32HandlePropertiesKHR):TVkResult; vkExtdecl;
{$endif}
     TvkGetMemoryFdKHR=function(device:TVkDevice;const pGetFdInfo:PVkMemoryGetFdInfoKHR;pFd:PVkInt32):TVkResult; vkExtdecl;
     TvkGetMemoryFdPropertiesKHR=function(device:TVkDevice;handleType:TVkExternalMemoryHandleTypeFlagBits;fd:TVkInt32;pMemoryFdProperties:PVkMemoryFdPropertiesKHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceExternalSemaphoreProperties=procedure(physicalDevice:TVkPhysicalDevice;const pExternalSemaphoreInfo:PVkPhysicalDeviceExternalSemaphoreInfo;pExternalSemaphoreProperties:PVkExternalSemaphoreProperties); vkExtdecl;
     TvkGetPhysicalDeviceExternalSemaphorePropertiesKHR=procedure(physicalDevice:TVkPhysicalDevice;const pExternalSemaphoreInfo:PVkPhysicalDeviceExternalSemaphoreInfo;pExternalSemaphoreProperties:PVkExternalSemaphoreProperties); vkExtdecl;
{$ifdef Windows}
     TvkGetSemaphoreWin32HandleKHR=function(device:TVkDevice;const pGetWin32HandleInfo:PVkSemaphoreGetWin32HandleInfoKHR;pHandle:PHANDLE):TVkResult; vkExtdecl;
{$endif}
{$ifdef Windows}
     TvkImportSemaphoreWin32HandleKHR=function(device:TVkDevice;const pImportSemaphoreWin32HandleInfo:PVkImportSemaphoreWin32HandleInfoKHR):TVkResult; vkExtdecl;
{$endif}
     TvkGetSemaphoreFdKHR=function(device:TVkDevice;const pGetFdInfo:PVkSemaphoreGetFdInfoKHR;pFd:PVkInt32):TVkResult; vkExtdecl;
     TvkImportSemaphoreFdKHR=function(device:TVkDevice;const pImportSemaphoreFdInfo:PVkImportSemaphoreFdInfoKHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceExternalFenceProperties=procedure(physicalDevice:TVkPhysicalDevice;const pExternalFenceInfo:PVkPhysicalDeviceExternalFenceInfo;pExternalFenceProperties:PVkExternalFenceProperties); vkExtdecl;
     TvkGetPhysicalDeviceExternalFencePropertiesKHR=procedure(physicalDevice:TVkPhysicalDevice;const pExternalFenceInfo:PVkPhysicalDeviceExternalFenceInfo;pExternalFenceProperties:PVkExternalFenceProperties); vkExtdecl;
{$ifdef Windows}
     TvkGetFenceWin32HandleKHR=function(device:TVkDevice;const pGetWin32HandleInfo:PVkFenceGetWin32HandleInfoKHR;pHandle:PHANDLE):TVkResult; vkExtdecl;
{$endif}
{$ifdef Windows}
     TvkImportFenceWin32HandleKHR=function(device:TVkDevice;const pImportFenceWin32HandleInfo:PVkImportFenceWin32HandleInfoKHR):TVkResult; vkExtdecl;
{$endif}
     TvkGetFenceFdKHR=function(device:TVkDevice;const pGetFdInfo:PVkFenceGetFdInfoKHR;pFd:PVkInt32):TVkResult; vkExtdecl;
     TvkImportFenceFdKHR=function(device:TVkDevice;const pImportFenceFdInfo:PVkImportFenceFdInfoKHR):TVkResult; vkExtdecl;
     TvkReleaseDisplayEXT=function(physicalDevice:TVkPhysicalDevice;display:TVkDisplayKHR):TVkResult; vkExtdecl;
{$ifdef XLIB}
     TvkAcquireXlibDisplayEXT=function(physicalDevice:TVkPhysicalDevice;dpy:PVkXLIBDisplay;display:TVkDisplayKHR):TVkResult; vkExtdecl;
{$endif}
{$ifdef RandR}
     TvkGetRandROutputDisplayEXT=function(physicalDevice:TVkPhysicalDevice;dpy:PVkXLIBDisplay;rrOutput:TRROutput;pDisplay:PVkDisplayKHR):TVkResult; vkExtdecl;
{$endif}
     TvkDisplayPowerControlEXT=function(device:TVkDevice;display:TVkDisplayKHR;const pDisplayPowerInfo:PVkDisplayPowerInfoEXT):TVkResult; vkExtdecl;
     TvkRegisterDeviceEventEXT=function(device:TVkDevice;const pDeviceEventInfo:PVkDeviceEventInfoEXT;const pAllocator:PVkAllocationCallbacks;pFence:PVkFence):TVkResult; vkExtdecl;
     TvkRegisterDisplayEventEXT=function(device:TVkDevice;display:TVkDisplayKHR;const pDisplayEventInfo:PVkDisplayEventInfoEXT;const pAllocator:PVkAllocationCallbacks;pFence:PVkFence):TVkResult; vkExtdecl;
     TvkGetSwapchainCounterEXT=function(device:TVkDevice;swapchain:TVkSwapchainKHR;counter:TVkSurfaceCounterFlagBitsEXT;pCounterValue:PVkUInt64):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceSurfaceCapabilities2EXT=function(physicalDevice:TVkPhysicalDevice;surface:TVkSurfaceKHR;pSurfaceCapabilities:PVkSurfaceCapabilities2EXT):TVkResult; vkExtdecl;
     TvkEnumeratePhysicalDeviceGroups=function(instance:TVkInstance;pPhysicalDeviceGroupCount:PVkUInt32;pPhysicalDeviceGroupProperties:PVkPhysicalDeviceGroupProperties):TVkResult; vkExtdecl;
     TvkEnumeratePhysicalDeviceGroupsKHR=function(instance:TVkInstance;pPhysicalDeviceGroupCount:PVkUInt32;pPhysicalDeviceGroupProperties:PVkPhysicalDeviceGroupProperties):TVkResult; vkExtdecl;
     TvkGetDeviceGroupPeerMemoryFeatures=procedure(device:TVkDevice;heapIndex:TVkUInt32;localDeviceIndex:TVkUInt32;remoteDeviceIndex:TVkUInt32;pPeerMemoryFeatures:PVkPeerMemoryFeatureFlags); vkExtdecl;
     TvkGetDeviceGroupPeerMemoryFeaturesKHR=procedure(device:TVkDevice;heapIndex:TVkUInt32;localDeviceIndex:TVkUInt32;remoteDeviceIndex:TVkUInt32;pPeerMemoryFeatures:PVkPeerMemoryFeatureFlags); vkExtdecl;
     TvkBindBufferMemory2=function(device:TVkDevice;bindInfoCount:TVkUInt32;const pBindInfos:PVkBindBufferMemoryInfo):TVkResult; vkExtdecl;
     TvkBindBufferMemory2KHR=function(device:TVkDevice;bindInfoCount:TVkUInt32;const pBindInfos:PVkBindBufferMemoryInfo):TVkResult; vkExtdecl;
     TvkBindImageMemory2=function(device:TVkDevice;bindInfoCount:TVkUInt32;const pBindInfos:PVkBindImageMemoryInfo):TVkResult; vkExtdecl;
     TvkBindImageMemory2KHR=function(device:TVkDevice;bindInfoCount:TVkUInt32;const pBindInfos:PVkBindImageMemoryInfo):TVkResult; vkExtdecl;
     TvkCmdSetDeviceMask=procedure(commandBuffer:TVkCommandBuffer;deviceMask:TVkUInt32); vkExtdecl;
     TvkCmdSetDeviceMaskKHR=procedure(commandBuffer:TVkCommandBuffer;deviceMask:TVkUInt32); vkExtdecl;
     TvkGetDeviceGroupPresentCapabilitiesKHR=function(device:TVkDevice;pDeviceGroupPresentCapabilities:PVkDeviceGroupPresentCapabilitiesKHR):TVkResult; vkExtdecl;
     TvkGetDeviceGroupSurfacePresentModesKHR=function(device:TVkDevice;surface:TVkSurfaceKHR;pModes:PVkDeviceGroupPresentModeFlagsKHR):TVkResult; vkExtdecl;
     TvkAcquireNextImage2KHR=function(device:TVkDevice;const pAcquireInfo:PVkAcquireNextImageInfoKHR;pImageIndex:PVkUInt32):TVkResult; vkExtdecl;
     TvkCmdDispatchBase=procedure(commandBuffer:TVkCommandBuffer;baseGroupX:TVkUInt32;baseGroupY:TVkUInt32;baseGroupZ:TVkUInt32;groupCountX:TVkUInt32;groupCountY:TVkUInt32;groupCountZ:TVkUInt32); vkExtdecl;
     TvkCmdDispatchBaseKHR=procedure(commandBuffer:TVkCommandBuffer;baseGroupX:TVkUInt32;baseGroupY:TVkUInt32;baseGroupZ:TVkUInt32;groupCountX:TVkUInt32;groupCountY:TVkUInt32;groupCountZ:TVkUInt32); vkExtdecl;
     TvkGetPhysicalDevicePresentRectanglesKHR=function(physicalDevice:TVkPhysicalDevice;surface:TVkSurfaceKHR;pRectCount:PVkUInt32;pRects:PVkRect2D):TVkResult; vkExtdecl;
     TvkCreateDescriptorUpdateTemplate=function(device:TVkDevice;const pCreateInfo:PVkDescriptorUpdateTemplateCreateInfo;const pAllocator:PVkAllocationCallbacks;pDescriptorUpdateTemplate:PVkDescriptorUpdateTemplate):TVkResult; vkExtdecl;
     TvkCreateDescriptorUpdateTemplateKHR=function(device:TVkDevice;const pCreateInfo:PVkDescriptorUpdateTemplateCreateInfo;const pAllocator:PVkAllocationCallbacks;pDescriptorUpdateTemplate:PVkDescriptorUpdateTemplate):TVkResult; vkExtdecl;
     TvkDestroyDescriptorUpdateTemplate=procedure(device:TVkDevice;descriptorUpdateTemplate:TVkDescriptorUpdateTemplate;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkDestroyDescriptorUpdateTemplateKHR=procedure(device:TVkDevice;descriptorUpdateTemplate:TVkDescriptorUpdateTemplate;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkUpdateDescriptorSetWithTemplate=procedure(device:TVkDevice;descriptorSet:TVkDescriptorSet;descriptorUpdateTemplate:TVkDescriptorUpdateTemplate;const pData:PVkVoid); vkExtdecl;
     TvkUpdateDescriptorSetWithTemplateKHR=procedure(device:TVkDevice;descriptorSet:TVkDescriptorSet;descriptorUpdateTemplate:TVkDescriptorUpdateTemplate;const pData:PVkVoid); vkExtdecl;
     TvkCmdPushDescriptorSetWithTemplateKHR=procedure(commandBuffer:TVkCommandBuffer;descriptorUpdateTemplate:TVkDescriptorUpdateTemplate;layout:TVkPipelineLayout;set_:TVkUInt32;const pData:PVkVoid); vkExtdecl;
     TvkSetHdrMetadataEXT=procedure(device:TVkDevice;swapchainCount:TVkUInt32;const pSwapchains:PVkSwapchainKHR;const pMetadata:PVkHdrMetadataEXT); vkExtdecl;
     TvkGetSwapchainStatusKHR=function(device:TVkDevice;swapchain:TVkSwapchainKHR):TVkResult; vkExtdecl;
     TvkGetRefreshCycleDurationGOOGLE=function(device:TVkDevice;swapchain:TVkSwapchainKHR;pDisplayTimingProperties:PVkRefreshCycleDurationGOOGLE):TVkResult; vkExtdecl;
     TvkGetPastPresentationTimingGOOGLE=function(device:TVkDevice;swapchain:TVkSwapchainKHR;pPresentationTimingCount:PVkUInt32;pPresentationTimings:PVkPastPresentationTimingGOOGLE):TVkResult; vkExtdecl;
{$ifdef MoltenVK_IOS}
     TvkCreateIOSSurfaceMVK=function(instance:TVkInstance;const pCreateInfo:PVkIOSSurfaceCreateInfoMVK;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
{$endif}
{$ifdef MoltenVK_MacOS}
     TvkCreateMacOSSurfaceMVK=function(instance:TVkInstance;const pCreateInfo:PVkMacOSSurfaceCreateInfoMVK;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
{$endif}
     TvkCreateMetalSurfaceEXT=function(instance:TVkInstance;const pCreateInfo:PVkMetalSurfaceCreateInfoEXT;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
     TvkCmdSetViewportWScalingNV=procedure(commandBuffer:TVkCommandBuffer;firstViewport:TVkUInt32;viewportCount:TVkUInt32;const pViewportWScalings:PVkViewportWScalingNV); vkExtdecl;
     TvkCmdSetDiscardRectangleEXT=procedure(commandBuffer:TVkCommandBuffer;firstDiscardRectangle:TVkUInt32;discardRectangleCount:TVkUInt32;const pDiscardRectangles:PVkRect2D); vkExtdecl;
     TvkCmdSetSampleLocationsEXT=procedure(commandBuffer:TVkCommandBuffer;const pSampleLocationsInfo:PVkSampleLocationsInfoEXT); vkExtdecl;
     TvkGetPhysicalDeviceMultisamplePropertiesEXT=procedure(physicalDevice:TVkPhysicalDevice;samples:TVkSampleCountFlagBits;pMultisampleProperties:PVkMultisamplePropertiesEXT); vkExtdecl;
     TvkGetPhysicalDeviceSurfaceCapabilities2KHR=function(physicalDevice:TVkPhysicalDevice;const pSurfaceInfo:PVkPhysicalDeviceSurfaceInfo2KHR;pSurfaceCapabilities:PVkSurfaceCapabilities2KHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceSurfaceFormats2KHR=function(physicalDevice:TVkPhysicalDevice;const pSurfaceInfo:PVkPhysicalDeviceSurfaceInfo2KHR;pSurfaceFormatCount:PVkUInt32;pSurfaceFormats:PVkSurfaceFormat2KHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceDisplayProperties2KHR=function(physicalDevice:TVkPhysicalDevice;pPropertyCount:PVkUInt32;pProperties:PVkDisplayProperties2KHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceDisplayPlaneProperties2KHR=function(physicalDevice:TVkPhysicalDevice;pPropertyCount:PVkUInt32;pProperties:PVkDisplayPlaneProperties2KHR):TVkResult; vkExtdecl;
     TvkGetDisplayModeProperties2KHR=function(physicalDevice:TVkPhysicalDevice;display:TVkDisplayKHR;pPropertyCount:PVkUInt32;pProperties:PVkDisplayModeProperties2KHR):TVkResult; vkExtdecl;
     TvkGetDisplayPlaneCapabilities2KHR=function(physicalDevice:TVkPhysicalDevice;const pDisplayPlaneInfo:PVkDisplayPlaneInfo2KHR;pCapabilities:PVkDisplayPlaneCapabilities2KHR):TVkResult; vkExtdecl;
     TvkGetBufferMemoryRequirements2=procedure(device:TVkDevice;const pInfo:PVkBufferMemoryRequirementsInfo2;pMemoryRequirements:PVkMemoryRequirements2); vkExtdecl;
     TvkGetBufferMemoryRequirements2KHR=procedure(device:TVkDevice;const pInfo:PVkBufferMemoryRequirementsInfo2;pMemoryRequirements:PVkMemoryRequirements2); vkExtdecl;
     TvkGetImageMemoryRequirements2=procedure(device:TVkDevice;const pInfo:PVkImageMemoryRequirementsInfo2;pMemoryRequirements:PVkMemoryRequirements2); vkExtdecl;
     TvkGetImageMemoryRequirements2KHR=procedure(device:TVkDevice;const pInfo:PVkImageMemoryRequirementsInfo2;pMemoryRequirements:PVkMemoryRequirements2); vkExtdecl;
     TvkGetImageSparseMemoryRequirements2=procedure(device:TVkDevice;const pInfo:PVkImageSparseMemoryRequirementsInfo2;pSparseMemoryRequirementCount:PVkUInt32;pSparseMemoryRequirements:PVkSparseImageMemoryRequirements2); vkExtdecl;
     TvkGetImageSparseMemoryRequirements2KHR=procedure(device:TVkDevice;const pInfo:PVkImageSparseMemoryRequirementsInfo2;pSparseMemoryRequirementCount:PVkUInt32;pSparseMemoryRequirements:PVkSparseImageMemoryRequirements2); vkExtdecl;
     TvkCreateSamplerYcbcrConversion=function(device:TVkDevice;const pCreateInfo:PVkSamplerYcbcrConversionCreateInfo;const pAllocator:PVkAllocationCallbacks;pYcbcrConversion:PVkSamplerYcbcrConversion):TVkResult; vkExtdecl;
     TvkCreateSamplerYcbcrConversionKHR=function(device:TVkDevice;const pCreateInfo:PVkSamplerYcbcrConversionCreateInfo;const pAllocator:PVkAllocationCallbacks;pYcbcrConversion:PVkSamplerYcbcrConversion):TVkResult; vkExtdecl;
     TvkDestroySamplerYcbcrConversion=procedure(device:TVkDevice;ycbcrConversion:TVkSamplerYcbcrConversion;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkDestroySamplerYcbcrConversionKHR=procedure(device:TVkDevice;ycbcrConversion:TVkSamplerYcbcrConversion;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetDeviceQueue2=procedure(device:TVkDevice;const pQueueInfo:PVkDeviceQueueInfo2;pQueue:PVkQueue); vkExtdecl;
     TvkCreateValidationCacheEXT=function(device:TVkDevice;const pCreateInfo:PVkValidationCacheCreateInfoEXT;const pAllocator:PVkAllocationCallbacks;pValidationCache:PVkValidationCacheEXT):TVkResult; vkExtdecl;
     TvkDestroyValidationCacheEXT=procedure(device:TVkDevice;validationCache:TVkValidationCacheEXT;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetValidationCacheDataEXT=function(device:TVkDevice;validationCache:TVkValidationCacheEXT;pDataSize:PVkSize;pData:PVkVoid):TVkResult; vkExtdecl;
     TvkMergeValidationCachesEXT=function(device:TVkDevice;dstCache:TVkValidationCacheEXT;srcCacheCount:TVkUInt32;const pSrcCaches:PVkValidationCacheEXT):TVkResult; vkExtdecl;
     TvkGetDescriptorSetLayoutSupport=procedure(device:TVkDevice;const pCreateInfo:PVkDescriptorSetLayoutCreateInfo;pSupport:PVkDescriptorSetLayoutSupport); vkExtdecl;
     TvkGetDescriptorSetLayoutSupportKHR=procedure(device:TVkDevice;const pCreateInfo:PVkDescriptorSetLayoutCreateInfo;pSupport:PVkDescriptorSetLayoutSupport); vkExtdecl;
     TvkGetSwapchainGrallocUsageANDROID=function(device:TVkDevice;format:TVkFormat;imageUsage:TVkImageUsageFlags;grallocUsage:PVkInt32):TVkResult; vkExtdecl;
{$ifdef Android}
     TvkGetSwapchainGrallocUsage2ANDROID=function(device:TVkDevice;format:TVkFormat;imageUsage:TVkImageUsageFlags;swapchainImageUsage:TVkSwapchainImageUsageFlagsANDROID;grallocConsumerUsage:PVkUInt64;grallocProducerUsage:PVkUInt64):TVkResult; vkExtdecl;
{$endif}
     TvkAcquireImageANDROID=function(device:TVkDevice;image:TVkImage;nativeFenceFd:TVkInt32;semaphore:TVkSemaphore;fence:TVkFence):TVkResult; vkExtdecl;
     TvkQueueSignalReleaseImageANDROID=function(queue:TVkQueue;waitSemaphoreCount:TVkUInt32;const pWaitSemaphores:PVkSemaphore;image:TVkImage;pNativeFenceFd:PVkInt32):TVkResult; vkExtdecl;
     TvkGetShaderInfoAMD=function(device:TVkDevice;pipeline:TVkPipeline;shaderStage:TVkShaderStageFlagBits;infoType:TVkShaderInfoTypeAMD;pInfoSize:PVkSize;pInfo:PVkVoid):TVkResult; vkExtdecl;
     TvkSetLocalDimmingAMD=procedure(device:TVkDevice;swapChain:TVkSwapchainKHR;localDimmingEnable:TVkBool32); vkExtdecl;
     TvkGetPhysicalDeviceCalibrateableTimeDomainsEXT=function(physicalDevice:TVkPhysicalDevice;pTimeDomainCount:PVkUInt32;pTimeDomains:PVkTimeDomainEXT):TVkResult; vkExtdecl;
     TvkGetCalibratedTimestampsEXT=function(device:TVkDevice;timestampCount:TVkUInt32;const pTimestampInfos:PVkCalibratedTimestampInfoEXT;pTimestamps:PVkUInt64;pMaxDeviation:PVkUInt64):TVkResult; vkExtdecl;
     TvkSetDebugUtilsObjectNameEXT=function(device:TVkDevice;const pNameInfo:PVkDebugUtilsObjectNameInfoEXT):TVkResult; vkExtdecl;
     TvkSetDebugUtilsObjectTagEXT=function(device:TVkDevice;const pTagInfo:PVkDebugUtilsObjectTagInfoEXT):TVkResult; vkExtdecl;
     TvkQueueBeginDebugUtilsLabelEXT=procedure(queue:TVkQueue;const pLabelInfo:PVkDebugUtilsLabelEXT); vkExtdecl;
     TvkQueueEndDebugUtilsLabelEXT=procedure(queue:TVkQueue); vkExtdecl;
     TvkQueueInsertDebugUtilsLabelEXT=procedure(queue:TVkQueue;const pLabelInfo:PVkDebugUtilsLabelEXT); vkExtdecl;
     TvkCmdBeginDebugUtilsLabelEXT=procedure(commandBuffer:TVkCommandBuffer;const pLabelInfo:PVkDebugUtilsLabelEXT); vkExtdecl;
     TvkCmdEndDebugUtilsLabelEXT=procedure(commandBuffer:TVkCommandBuffer); vkExtdecl;
     TvkCmdInsertDebugUtilsLabelEXT=procedure(commandBuffer:TVkCommandBuffer;const pLabelInfo:PVkDebugUtilsLabelEXT); vkExtdecl;
     TvkCreateDebugUtilsMessengerEXT=function(instance:TVkInstance;const pCreateInfo:PVkDebugUtilsMessengerCreateInfoEXT;const pAllocator:PVkAllocationCallbacks;pMessenger:PVkDebugUtilsMessengerEXT):TVkResult; vkExtdecl;
     TvkDestroyDebugUtilsMessengerEXT=procedure(instance:TVkInstance;messenger:TVkDebugUtilsMessengerEXT;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkSubmitDebugUtilsMessageEXT=procedure(instance:TVkInstance;messageSeverity:TVkDebugUtilsMessageSeverityFlagBitsEXT;messageTypes:TVkDebugUtilsMessageTypeFlagsEXT;const pCallbackData:PVkDebugUtilsMessengerCallbackDataEXT); vkExtdecl;
     TvkGetMemoryHostPointerPropertiesEXT=function(device:TVkDevice;handleType:TVkExternalMemoryHandleTypeFlagBits;const pHostPointer:PVkVoid;pMemoryHostPointerProperties:PVkMemoryHostPointerPropertiesEXT):TVkResult; vkExtdecl;
     TvkCmdWriteBufferMarkerAMD=procedure(commandBuffer:TVkCommandBuffer;pipelineStage:TVkPipelineStageFlagBits;dstBuffer:TVkBuffer;dstOffset:TVkDeviceSize;marker:TVkUInt32); vkExtdecl;
     TvkCreateRenderPass2=function(device:TVkDevice;const pCreateInfo:PVkRenderPassCreateInfo2;const pAllocator:PVkAllocationCallbacks;pRenderPass:PVkRenderPass):TVkResult; vkExtdecl;
     TvkCreateRenderPass2KHR=function(device:TVkDevice;const pCreateInfo:PVkRenderPassCreateInfo2;const pAllocator:PVkAllocationCallbacks;pRenderPass:PVkRenderPass):TVkResult; vkExtdecl;
     TvkCmdBeginRenderPass2=procedure(commandBuffer:TVkCommandBuffer;const pRenderPassBegin:PVkRenderPassBeginInfo;const pSubpassBeginInfo:PVkSubpassBeginInfo); vkExtdecl;
     TvkCmdBeginRenderPass2KHR=procedure(commandBuffer:TVkCommandBuffer;const pRenderPassBegin:PVkRenderPassBeginInfo;const pSubpassBeginInfo:PVkSubpassBeginInfo); vkExtdecl;
     TvkCmdNextSubpass2=procedure(commandBuffer:TVkCommandBuffer;const pSubpassBeginInfo:PVkSubpassBeginInfo;const pSubpassEndInfo:PVkSubpassEndInfo); vkExtdecl;
     TvkCmdNextSubpass2KHR=procedure(commandBuffer:TVkCommandBuffer;const pSubpassBeginInfo:PVkSubpassBeginInfo;const pSubpassEndInfo:PVkSubpassEndInfo); vkExtdecl;
     TvkCmdEndRenderPass2=procedure(commandBuffer:TVkCommandBuffer;const pSubpassEndInfo:PVkSubpassEndInfo); vkExtdecl;
     TvkCmdEndRenderPass2KHR=procedure(commandBuffer:TVkCommandBuffer;const pSubpassEndInfo:PVkSubpassEndInfo); vkExtdecl;
     TvkGetSemaphoreCounterValue=function(device:TVkDevice;semaphore:TVkSemaphore;pValue:PVkUInt64):TVkResult; vkExtdecl;
     TvkGetSemaphoreCounterValueKHR=function(device:TVkDevice;semaphore:TVkSemaphore;pValue:PVkUInt64):TVkResult; vkExtdecl;
     TvkWaitSemaphores=function(device:TVkDevice;const pWaitInfo:PVkSemaphoreWaitInfo;timeout:TVkUInt64):TVkResult; vkExtdecl;
     TvkWaitSemaphoresKHR=function(device:TVkDevice;const pWaitInfo:PVkSemaphoreWaitInfo;timeout:TVkUInt64):TVkResult; vkExtdecl;
     TvkSignalSemaphore=function(device:TVkDevice;const pSignalInfo:PVkSemaphoreSignalInfo):TVkResult; vkExtdecl;
     TvkSignalSemaphoreKHR=function(device:TVkDevice;const pSignalInfo:PVkSemaphoreSignalInfo):TVkResult; vkExtdecl;
{$ifdef Android}
     TvkGetAndroidHardwareBufferPropertiesANDROID=function(device:TVkDevice;const buffer:PVkAndroidAHardwareBuffer;pProperties:PVkAndroidHardwareBufferPropertiesANDROID):TVkResult; vkExtdecl;
{$endif}
{$ifdef Android}
     TvkGetMemoryAndroidHardwareBufferANDROID=function(device:TVkDevice;const pInfo:PVkMemoryGetAndroidHardwareBufferInfoANDROID;pBuffer:PPVkAndroidAHardwareBuffer):TVkResult; vkExtdecl;
{$endif}
     TvkCmdDrawIndirectCount=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;countBuffer:TVkBuffer;countBufferOffset:TVkDeviceSize;maxDrawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndirectCountKHR=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;countBuffer:TVkBuffer;countBufferOffset:TVkDeviceSize;maxDrawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndirectCountAMD=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;countBuffer:TVkBuffer;countBufferOffset:TVkDeviceSize;maxDrawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndexedIndirectCount=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;countBuffer:TVkBuffer;countBufferOffset:TVkDeviceSize;maxDrawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndexedIndirectCountKHR=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;countBuffer:TVkBuffer;countBufferOffset:TVkDeviceSize;maxDrawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndexedIndirectCountAMD=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;countBuffer:TVkBuffer;countBufferOffset:TVkDeviceSize;maxDrawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdSetCheckpointNV=procedure(commandBuffer:TVkCommandBuffer;const pCheckpointMarker:PVkVoid); vkExtdecl;
     TvkGetQueueCheckpointDataNV=procedure(queue:TVkQueue;pCheckpointDataCount:PVkUInt32;pCheckpointData:PVkCheckpointDataNV); vkExtdecl;
     TvkCmdBindTransformFeedbackBuffersEXT=procedure(commandBuffer:TVkCommandBuffer;firstBinding:TVkUInt32;bindingCount:TVkUInt32;const pBuffers:PVkBuffer;const pOffsets:PVkDeviceSize;const pSizes:PVkDeviceSize); vkExtdecl;
     TvkCmdBeginTransformFeedbackEXT=procedure(commandBuffer:TVkCommandBuffer;firstCounterBuffer:TVkUInt32;counterBufferCount:TVkUInt32;const pCounterBuffers:PVkBuffer;const pCounterBufferOffsets:PVkDeviceSize); vkExtdecl;
     TvkCmdEndTransformFeedbackEXT=procedure(commandBuffer:TVkCommandBuffer;firstCounterBuffer:TVkUInt32;counterBufferCount:TVkUInt32;const pCounterBuffers:PVkBuffer;const pCounterBufferOffsets:PVkDeviceSize); vkExtdecl;
     TvkCmdBeginQueryIndexedEXT=procedure(commandBuffer:TVkCommandBuffer;queryPool:TVkQueryPool;query:TVkUInt32;flags:TVkQueryControlFlags;index:TVkUInt32); vkExtdecl;
     TvkCmdEndQueryIndexedEXT=procedure(commandBuffer:TVkCommandBuffer;queryPool:TVkQueryPool;query:TVkUInt32;index:TVkUInt32); vkExtdecl;
     TvkCmdDrawIndirectByteCountEXT=procedure(commandBuffer:TVkCommandBuffer;instanceCount:TVkUInt32;firstInstance:TVkUInt32;counterBuffer:TVkBuffer;counterBufferOffset:TVkDeviceSize;counterOffset:TVkUInt32;vertexStride:TVkUInt32); vkExtdecl;
     TvkCmdSetExclusiveScissorNV=procedure(commandBuffer:TVkCommandBuffer;firstExclusiveScissor:TVkUInt32;exclusiveScissorCount:TVkUInt32;const pExclusiveScissors:PVkRect2D); vkExtdecl;
     TvkCmdBindShadingRateImageNV=procedure(commandBuffer:TVkCommandBuffer;imageView:TVkImageView;imageLayout:TVkImageLayout); vkExtdecl;
     TvkCmdSetViewportShadingRatePaletteNV=procedure(commandBuffer:TVkCommandBuffer;firstViewport:TVkUInt32;viewportCount:TVkUInt32;const pShadingRatePalettes:PVkShadingRatePaletteNV); vkExtdecl;
     TvkCmdSetCoarseSampleOrderNV=procedure(commandBuffer:TVkCommandBuffer;sampleOrderType:TVkCoarseSampleOrderTypeNV;customSampleOrderCount:TVkUInt32;const pCustomSampleOrders:PVkCoarseSampleOrderCustomNV); vkExtdecl;
     TvkCmdDrawMeshTasksNV=procedure(commandBuffer:TVkCommandBuffer;taskCount:TVkUInt32;firstTask:TVkUInt32); vkExtdecl;
     TvkCmdDrawMeshTasksIndirectNV=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;drawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCmdDrawMeshTasksIndirectCountNV=procedure(commandBuffer:TVkCommandBuffer;buffer:TVkBuffer;offset:TVkDeviceSize;countBuffer:TVkBuffer;countBufferOffset:TVkDeviceSize;maxDrawCount:TVkUInt32;stride:TVkUInt32); vkExtdecl;
     TvkCompileDeferredNV=function(device:TVkDevice;pipeline:TVkPipeline;shader:TVkUInt32):TVkResult; vkExtdecl;
     TvkCreateAccelerationStructureNV=function(device:TVkDevice;const pCreateInfo:PVkAccelerationStructureCreateInfoNV;const pAllocator:PVkAllocationCallbacks;pAccelerationStructure:PVkAccelerationStructureNV):TVkResult; vkExtdecl;
     TvkDestroyAccelerationStructureKHR=procedure(device:TVkDevice;accelerationStructure:TVkAccelerationStructureKHR;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkDestroyAccelerationStructureNV=procedure(device:TVkDevice;accelerationStructure:TVkAccelerationStructureKHR;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetAccelerationStructureMemoryRequirementsKHR=procedure(device:TVkDevice;const pInfo:PVkAccelerationStructureMemoryRequirementsInfoKHR;pMemoryRequirements:PVkMemoryRequirements2); vkExtdecl;
     TvkGetAccelerationStructureMemoryRequirementsNV=procedure(device:TVkDevice;const pInfo:PVkAccelerationStructureMemoryRequirementsInfoNV;pMemoryRequirements:PVkMemoryRequirements2KHR); vkExtdecl;
     TvkBindAccelerationStructureMemoryKHR=function(device:TVkDevice;bindInfoCount:TVkUInt32;const pBindInfos:PVkBindAccelerationStructureMemoryInfoKHR):TVkResult; vkExtdecl;
     TvkBindAccelerationStructureMemoryNV=function(device:TVkDevice;bindInfoCount:TVkUInt32;const pBindInfos:PVkBindAccelerationStructureMemoryInfoKHR):TVkResult; vkExtdecl;
     TvkCmdCopyAccelerationStructureNV=procedure(commandBuffer:TVkCommandBuffer;dst:TVkAccelerationStructureKHR;src:TVkAccelerationStructureKHR;mode:TVkCopyAccelerationStructureModeKHR); vkExtdecl;
     TvkCmdCopyAccelerationStructureKHR=procedure(commandBuffer:TVkCommandBuffer;const pInfo:PVkCopyAccelerationStructureInfoKHR); vkExtdecl;
     TvkCopyAccelerationStructureKHR=function(device:TVkDevice;const pInfo:PVkCopyAccelerationStructureInfoKHR):TVkResult; vkExtdecl;
     TvkCmdCopyAccelerationStructureToMemoryKHR=procedure(commandBuffer:TVkCommandBuffer;const pInfo:PVkCopyAccelerationStructureToMemoryInfoKHR); vkExtdecl;
     TvkCopyAccelerationStructureToMemoryKHR=function(device:TVkDevice;const pInfo:PVkCopyAccelerationStructureToMemoryInfoKHR):TVkResult; vkExtdecl;
     TvkCmdCopyMemoryToAccelerationStructureKHR=procedure(commandBuffer:TVkCommandBuffer;const pInfo:PVkCopyMemoryToAccelerationStructureInfoKHR); vkExtdecl;
     TvkCopyMemoryToAccelerationStructureKHR=function(device:TVkDevice;const pInfo:PVkCopyMemoryToAccelerationStructureInfoKHR):TVkResult; vkExtdecl;
     TvkCmdWriteAccelerationStructuresPropertiesKHR=procedure(commandBuffer:TVkCommandBuffer;accelerationStructureCount:TVkUInt32;const pAccelerationStructures:PVkAccelerationStructureKHR;queryType:TVkQueryType;queryPool:TVkQueryPool;firstQuery:TVkUInt32); vkExtdecl;
     TvkCmdWriteAccelerationStructuresPropertiesNV=procedure(commandBuffer:TVkCommandBuffer;accelerationStructureCount:TVkUInt32;const pAccelerationStructures:PVkAccelerationStructureKHR;queryType:TVkQueryType;queryPool:TVkQueryPool;firstQuery:TVkUInt32); vkExtdecl;
     TvkCmdBuildAccelerationStructureNV=procedure(commandBuffer:TVkCommandBuffer;const pInfo:PVkAccelerationStructureInfoNV;instanceData:TVkBuffer;instanceOffset:TVkDeviceSize;update:TVkBool32;dst:TVkAccelerationStructureKHR;src:TVkAccelerationStructureKHR;scratch:TVkBuffer;scratchOffset:TVkDeviceSize); vkExtdecl;
     TvkWriteAccelerationStructuresPropertiesKHR=function(device:TVkDevice;accelerationStructureCount:TVkUInt32;const pAccelerationStructures:PVkAccelerationStructureKHR;queryType:TVkQueryType;dataSize:TVkSize;pData:PVkVoid;stride:TVkSize):TVkResult; vkExtdecl;
     TvkCmdTraceRaysKHR=procedure(commandBuffer:TVkCommandBuffer;const pRaygenShaderBindingTable:PVkStridedBufferRegionKHR;const pMissShaderBindingTable:PVkStridedBufferRegionKHR;const pHitShaderBindingTable:PVkStridedBufferRegionKHR;const pCallableShaderBindingTable:PVkStridedBufferRegionKHR;width:TVkUInt32;height:TVkUInt32;depth:TVkUInt32); vkExtdecl;
     TvkCmdTraceRaysNV=procedure(commandBuffer:TVkCommandBuffer;raygenShaderBindingTableBuffer:TVkBuffer;raygenShaderBindingOffset:TVkDeviceSize;missShaderBindingTableBuffer:TVkBuffer;missShaderBindingOffset:TVkDeviceSize;missShaderBindingStride:TVkDeviceSize;hitShaderBindingTableBuffer:TVkBuffer;hitShaderBindingOffset:TVkDeviceSize;hitShaderBindingStride:TVkDeviceSize;callableShaderBindingTableBuffer:TVkBuffer;callableShaderBindingOffset:TVkDeviceSize;callableShaderBindingStride:TVkDeviceSize;width:TVkUInt32;height:TVkUInt32;depth:TVkUInt32); vkExtdecl;
     TvkGetRayTracingShaderGroupHandlesKHR=function(device:TVkDevice;pipeline:TVkPipeline;firstGroup:TVkUInt32;groupCount:TVkUInt32;dataSize:TVkSize;pData:PVkVoid):TVkResult; vkExtdecl;
     TvkGetRayTracingShaderGroupHandlesNV=function(device:TVkDevice;pipeline:TVkPipeline;firstGroup:TVkUInt32;groupCount:TVkUInt32;dataSize:TVkSize;pData:PVkVoid):TVkResult; vkExtdecl;
     TvkGetRayTracingCaptureReplayShaderGroupHandlesKHR=function(device:TVkDevice;pipeline:TVkPipeline;firstGroup:TVkUInt32;groupCount:TVkUInt32;dataSize:TVkSize;pData:PVkVoid):TVkResult; vkExtdecl;
     TvkGetAccelerationStructureHandleNV=function(device:TVkDevice;accelerationStructure:TVkAccelerationStructureKHR;dataSize:TVkSize;pData:PVkVoid):TVkResult; vkExtdecl;
     TvkCreateRayTracingPipelinesNV=function(device:TVkDevice;pipelineCache:TVkPipelineCache;createInfoCount:TVkUInt32;const pCreateInfos:PVkRayTracingPipelineCreateInfoNV;const pAllocator:PVkAllocationCallbacks;pPipelines:PVkPipeline):TVkResult; vkExtdecl;
     TvkCreateRayTracingPipelinesKHR=function(device:TVkDevice;pipelineCache:TVkPipelineCache;createInfoCount:TVkUInt32;const pCreateInfos:PVkRayTracingPipelineCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pPipelines:PVkPipeline):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceCooperativeMatrixPropertiesNV=function(physicalDevice:TVkPhysicalDevice;pPropertyCount:PVkUInt32;pProperties:PVkCooperativeMatrixPropertiesNV):TVkResult; vkExtdecl;
     TvkCmdTraceRaysIndirectKHR=procedure(commandBuffer:TVkCommandBuffer;const pRaygenShaderBindingTable:PVkStridedBufferRegionKHR;const pMissShaderBindingTable:PVkStridedBufferRegionKHR;const pHitShaderBindingTable:PVkStridedBufferRegionKHR;const pCallableShaderBindingTable:PVkStridedBufferRegionKHR;buffer:TVkBuffer;offset:TVkDeviceSize); vkExtdecl;
     TvkGetDeviceAccelerationStructureCompatibilityKHR=function(device:TVkDevice;const version:PVkAccelerationStructureVersionKHR):TVkResult; vkExtdecl;
     TvkGetImageViewHandleNVX=function(device:TVkDevice;const pInfo:PVkImageViewHandleInfoNVX):TVkUInt32; vkExtdecl;
     TvkGetImageViewAddressNVX=function(device:TVkDevice;imageView:TVkImageView;pProperties:PVkImageViewAddressPropertiesNVX):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceSurfacePresentModes2EXT=function(physicalDevice:TVkPhysicalDevice;const pSurfaceInfo:PVkPhysicalDeviceSurfaceInfo2KHR;pPresentModeCount:PVkUInt32;pPresentModes:PVkPresentModeKHR):TVkResult; vkExtdecl;
     TvkGetDeviceGroupSurfacePresentModes2EXT=function(device:TVkDevice;const pSurfaceInfo:PVkPhysicalDeviceSurfaceInfo2KHR;pModes:PVkDeviceGroupPresentModeFlagsKHR):TVkResult; vkExtdecl;
     TvkAcquireFullScreenExclusiveModeEXT=function(device:TVkDevice;swapchain:TVkSwapchainKHR):TVkResult; vkExtdecl;
     TvkReleaseFullScreenExclusiveModeEXT=function(device:TVkDevice;swapchain:TVkSwapchainKHR):TVkResult; vkExtdecl;
     TvkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR=function(physicalDevice:TVkPhysicalDevice;queueFamilyIndex:TVkUInt32;pCounterCount:PVkUInt32;pCounters:PVkPerformanceCounterKHR;pCounterDescriptions:PVkPerformanceCounterDescriptionKHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR=procedure(physicalDevice:TVkPhysicalDevice;const pPerformanceQueryCreateInfo:PVkQueryPoolPerformanceCreateInfoKHR;pNumPasses:PVkUInt32); vkExtdecl;
     TvkAcquireProfilingLockKHR=function(device:TVkDevice;const pInfo:PVkAcquireProfilingLockInfoKHR):TVkResult; vkExtdecl;
     TvkReleaseProfilingLockKHR=procedure(device:TVkDevice); vkExtdecl;
     TvkGetImageDrmFormatModifierPropertiesEXT=function(device:TVkDevice;image:TVkImage;pProperties:PVkImageDrmFormatModifierPropertiesEXT):TVkResult; vkExtdecl;
     TvkGetBufferOpaqueCaptureAddress=function(device:TVkDevice;const pInfo:PVkBufferDeviceAddressInfo):TVkUInt64; vkExtdecl;
     TvkGetBufferOpaqueCaptureAddressKHR=function(device:TVkDevice;const pInfo:PVkBufferDeviceAddressInfo):TVkUInt64; vkExtdecl;
     TvkGetBufferDeviceAddress=function(device:TVkDevice;const pInfo:PVkBufferDeviceAddressInfo):TVkDeviceAddress; vkExtdecl;
     TvkGetBufferDeviceAddressKHR=function(device:TVkDevice;const pInfo:PVkBufferDeviceAddressInfo):TVkDeviceAddress; vkExtdecl;
     TvkGetBufferDeviceAddressEXT=function(device:TVkDevice;const pInfo:PVkBufferDeviceAddressInfo):TVkDeviceAddress; vkExtdecl;
     TvkCreateHeadlessSurfaceEXT=function(instance:TVkInstance;const pCreateInfo:PVkHeadlessSurfaceCreateInfoEXT;const pAllocator:PVkAllocationCallbacks;pSurface:PVkSurfaceKHR):TVkResult; vkExtdecl;
     TvkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV=function(physicalDevice:TVkPhysicalDevice;pCombinationCount:PVkUInt32;pCombinations:PVkFramebufferMixedSamplesCombinationNV):TVkResult; vkExtdecl;
     TvkInitializePerformanceApiINTEL=function(device:TVkDevice;const pInitializeInfo:PVkInitializePerformanceApiInfoINTEL):TVkResult; vkExtdecl;
     TvkUninitializePerformanceApiINTEL=procedure(device:TVkDevice); vkExtdecl;
     TvkCmdSetPerformanceMarkerINTEL=function(commandBuffer:TVkCommandBuffer;const pMarkerInfo:PVkPerformanceMarkerInfoINTEL):TVkResult; vkExtdecl;
     TvkCmdSetPerformanceStreamMarkerINTEL=function(commandBuffer:TVkCommandBuffer;const pMarkerInfo:PVkPerformanceStreamMarkerInfoINTEL):TVkResult; vkExtdecl;
     TvkCmdSetPerformanceOverrideINTEL=function(commandBuffer:TVkCommandBuffer;const pOverrideInfo:PVkPerformanceOverrideInfoINTEL):TVkResult; vkExtdecl;
     TvkAcquirePerformanceConfigurationINTEL=function(device:TVkDevice;const pAcquireInfo:PVkPerformanceConfigurationAcquireInfoINTEL;pConfiguration:PVkPerformanceConfigurationINTEL):TVkResult; vkExtdecl;
     TvkReleasePerformanceConfigurationINTEL=function(device:TVkDevice;configuration:TVkPerformanceConfigurationINTEL):TVkResult; vkExtdecl;
     TvkQueueSetPerformanceConfigurationINTEL=function(queue:TVkQueue;configuration:TVkPerformanceConfigurationINTEL):TVkResult; vkExtdecl;
     TvkGetPerformanceParameterINTEL=function(device:TVkDevice;parameter:TVkPerformanceParameterTypeINTEL;pValue:PVkPerformanceValueINTEL):TVkResult; vkExtdecl;
     TvkGetDeviceMemoryOpaqueCaptureAddress=function(device:TVkDevice;const pInfo:PVkDeviceMemoryOpaqueCaptureAddressInfo):TVkUInt64; vkExtdecl;
     TvkGetDeviceMemoryOpaqueCaptureAddressKHR=function(device:TVkDevice;const pInfo:PVkDeviceMemoryOpaqueCaptureAddressInfo):TVkUInt64; vkExtdecl;
     TvkGetPipelineExecutablePropertiesKHR=function(device:TVkDevice;const pPipelineInfo:PVkPipelineInfoKHR;pExecutableCount:PVkUInt32;pProperties:PVkPipelineExecutablePropertiesKHR):TVkResult; vkExtdecl;
     TvkGetPipelineExecutableStatisticsKHR=function(device:TVkDevice;const pExecutableInfo:PVkPipelineExecutableInfoKHR;pStatisticCount:PVkUInt32;pStatistics:PVkPipelineExecutableStatisticKHR):TVkResult; vkExtdecl;
     TvkGetPipelineExecutableInternalRepresentationsKHR=function(device:TVkDevice;const pExecutableInfo:PVkPipelineExecutableInfoKHR;pInternalRepresentationCount:PVkUInt32;pInternalRepresentations:PVkPipelineExecutableInternalRepresentationKHR):TVkResult; vkExtdecl;
     TvkCmdSetLineStippleEXT=procedure(commandBuffer:TVkCommandBuffer;lineStippleFactor:TVkUInt32;lineStipplePattern:TVkUInt16); vkExtdecl;
     TvkGetPhysicalDeviceToolPropertiesEXT=function(physicalDevice:TVkPhysicalDevice;pToolCount:PVkUInt32;pToolProperties:PVkPhysicalDeviceToolPropertiesEXT):TVkResult; vkExtdecl;
     TvkCreateAccelerationStructureKHR=function(device:TVkDevice;const pCreateInfo:PVkAccelerationStructureCreateInfoKHR;const pAllocator:PVkAllocationCallbacks;pAccelerationStructure:PVkAccelerationStructureKHR):TVkResult; vkExtdecl;
     TvkCmdBuildAccelerationStructureKHR=procedure(commandBuffer:TVkCommandBuffer;infoCount:TVkUInt32;const pInfos:PVkAccelerationStructureBuildGeometryInfoKHR;const ppOffsetInfos:PPVkAccelerationStructureBuildOffsetInfoKHR); vkExtdecl;
     TvkCmdBuildAccelerationStructureIndirectKHR=procedure(commandBuffer:TVkCommandBuffer;const pInfo:PVkAccelerationStructureBuildGeometryInfoKHR;indirectBuffer:TVkBuffer;indirectOffset:TVkDeviceSize;indirectStride:TVkUInt32); vkExtdecl;
     TvkBuildAccelerationStructureKHR=function(device:TVkDevice;infoCount:TVkUInt32;const pInfos:PVkAccelerationStructureBuildGeometryInfoKHR;const ppOffsetInfos:PPVkAccelerationStructureBuildOffsetInfoKHR):TVkResult; vkExtdecl;
     TvkGetAccelerationStructureDeviceAddressKHR=function(device:TVkDevice;const pInfo:PVkAccelerationStructureDeviceAddressInfoKHR):TVkDeviceAddress; vkExtdecl;
     TvkCreateDeferredOperationKHR=function(device:TVkDevice;const pAllocator:PVkAllocationCallbacks;pDeferredOperation:PVkDeferredOperationKHR):TVkResult; vkExtdecl;
     TvkDestroyDeferredOperationKHR=procedure(device:TVkDevice;operation:TVkDeferredOperationKHR;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkGetDeferredOperationMaxConcurrencyKHR=function(device:TVkDevice;operation:TVkDeferredOperationKHR):TVkUInt32; vkExtdecl;
     TvkGetDeferredOperationResultKHR=function(device:TVkDevice;operation:TVkDeferredOperationKHR):TVkResult; vkExtdecl;
     TvkDeferredOperationJoinKHR=function(device:TVkDevice;operation:TVkDeferredOperationKHR):TVkResult; vkExtdecl;
     TvkCmdSetCullModeEXT=procedure(commandBuffer:TVkCommandBuffer;cullMode:TVkCullModeFlags); vkExtdecl;
     TvkCmdSetFrontFaceEXT=procedure(commandBuffer:TVkCommandBuffer;frontFace:TVkFrontFace); vkExtdecl;
     TvkCmdSetPrimitiveTopologyEXT=procedure(commandBuffer:TVkCommandBuffer;primitiveTopology:TVkPrimitiveTopology); vkExtdecl;
     TvkCmdSetViewportWithCountEXT=procedure(commandBuffer:TVkCommandBuffer;viewportCount:TVkUInt32;const pViewports:PVkViewport); vkExtdecl;
     TvkCmdSetScissorWithCountEXT=procedure(commandBuffer:TVkCommandBuffer;scissorCount:TVkUInt32;const pScissors:PVkRect2D); vkExtdecl;
     TvkCmdBindVertexBuffers2EXT=procedure(commandBuffer:TVkCommandBuffer;firstBinding:TVkUInt32;bindingCount:TVkUInt32;const pBuffers:PVkBuffer;const pOffsets:PVkDeviceSize;const pSizes:PVkDeviceSize;const pStrides:PVkDeviceSize); vkExtdecl;
     TvkCmdSetDepthTestEnableEXT=procedure(commandBuffer:TVkCommandBuffer;depthTestEnable:TVkBool32); vkExtdecl;
     TvkCmdSetDepthWriteEnableEXT=procedure(commandBuffer:TVkCommandBuffer;depthWriteEnable:TVkBool32); vkExtdecl;
     TvkCmdSetDepthCompareOpEXT=procedure(commandBuffer:TVkCommandBuffer;depthCompareOp:TVkCompareOp); vkExtdecl;
     TvkCmdSetDepthBoundsTestEnableEXT=procedure(commandBuffer:TVkCommandBuffer;depthBoundsTestEnable:TVkBool32); vkExtdecl;
     TvkCmdSetStencilTestEnableEXT=procedure(commandBuffer:TVkCommandBuffer;stencilTestEnable:TVkBool32); vkExtdecl;
     TvkCmdSetStencilOpEXT=procedure(commandBuffer:TVkCommandBuffer;faceMask:TVkStencilFaceFlags;failOp:TVkStencilOp;passOp:TVkStencilOp;depthFailOp:TVkStencilOp;compareOp:TVkCompareOp); vkExtdecl;
     TvkCreatePrivateDataSlotEXT=function(device:TVkDevice;const pCreateInfo:PVkPrivateDataSlotCreateInfoEXT;const pAllocator:PVkAllocationCallbacks;pPrivateDataSlot:PVkPrivateDataSlotEXT):TVkResult; vkExtdecl;
     TvkDestroyPrivateDataSlotEXT=procedure(device:TVkDevice;privateDataSlot:TVkPrivateDataSlotEXT;const pAllocator:PVkAllocationCallbacks); vkExtdecl;
     TvkSetPrivateDataEXT=function(device:TVkDevice;objectType:TVkObjectType;objectHandle:TVkUInt64;privateDataSlot:TVkPrivateDataSlotEXT;data:TVkUInt64):TVkResult; vkExtdecl;
     TvkGetPrivateDataEXT=procedure(device:TVkDevice;objectType:TVkObjectType;objectHandle:TVkUInt64;privateDataSlot:TVkPrivateDataSlotEXT;pData:PVkUInt64); vkExtdecl;


//========== TVkInstanceFunctions =========================

type
  TVkInstanceFunctions = class
    aaInstance: TVkInstance;
      //............................... Total Instance Functions: 438
      vkDestroyInstance : TvkDestroyInstance;
      vkEnumeratePhysicalDevices : TvkEnumeratePhysicalDevices;
      vkGetDeviceProcAddr : TvkGetDeviceProcAddr;
      vkGetPhysicalDeviceProperties : TvkGetPhysicalDeviceProperties;
      vkGetPhysicalDeviceQueueFamilyProperties : TvkGetPhysicalDeviceQueueFamilyProperties;
      vkGetPhysicalDeviceMemoryProperties : TvkGetPhysicalDeviceMemoryProperties;
      vkGetPhysicalDeviceFeatures : TvkGetPhysicalDeviceFeatures;
      vkGetPhysicalDeviceFormatProperties : TvkGetPhysicalDeviceFormatProperties;
      vkGetPhysicalDeviceImageFormatProperties : TvkGetPhysicalDeviceImageFormatProperties;
      vkCreateDevice : TvkCreateDevice;
      vkDestroyDevice : TvkDestroyDevice;
      vkEnumerateInstanceVersion : TvkEnumerateInstanceVersion;
      vkEnumerateDeviceLayerProperties : TvkEnumerateDeviceLayerProperties;
      vkEnumerateDeviceExtensionProperties : TvkEnumerateDeviceExtensionProperties;
      vkGetDeviceQueue : TvkGetDeviceQueue;
      vkQueueSubmit : TvkQueueSubmit;
      vkQueueWaitIdle : TvkQueueWaitIdle;
      vkDeviceWaitIdle : TvkDeviceWaitIdle;
      vkAllocateMemory : TvkAllocateMemory;
      vkFreeMemory : TvkFreeMemory;
      vkMapMemory : TvkMapMemory;
      vkUnmapMemory : TvkUnmapMemory;
      vkFlushMappedMemoryRanges : TvkFlushMappedMemoryRanges;
      vkInvalidateMappedMemoryRanges : TvkInvalidateMappedMemoryRanges;
      vkGetDeviceMemoryCommitment : TvkGetDeviceMemoryCommitment;
      vkGetBufferMemoryRequirements : TvkGetBufferMemoryRequirements;
      vkBindBufferMemory : TvkBindBufferMemory;
      vkGetImageMemoryRequirements : TvkGetImageMemoryRequirements;
      vkBindImageMemory : TvkBindImageMemory;
      vkGetImageSparseMemoryRequirements : TvkGetImageSparseMemoryRequirements;
      vkGetPhysicalDeviceSparseImageFormatProperties : TvkGetPhysicalDeviceSparseImageFormatProperties;
      vkQueueBindSparse : TvkQueueBindSparse;
      vkCreateFence : TvkCreateFence;
      vkDestroyFence : TvkDestroyFence;
      vkResetFences : TvkResetFences;
      vkGetFenceStatus : TvkGetFenceStatus;
      vkWaitForFences : TvkWaitForFences;
      vkCreateSemaphore : TvkCreateSemaphore;
      vkDestroySemaphore : TvkDestroySemaphore;
      vkCreateEvent : TvkCreateEvent;
      vkDestroyEvent : TvkDestroyEvent;
      vkGetEventStatus : TvkGetEventStatus;
      vkSetEvent : TvkSetEvent;
      vkResetEvent : TvkResetEvent;
      vkCreateQueryPool : TvkCreateQueryPool;
      vkDestroyQueryPool : TvkDestroyQueryPool;
      vkGetQueryPoolResults : TvkGetQueryPoolResults;
      vkResetQueryPool : TvkResetQueryPool;
      vkResetQueryPoolEXT : TvkResetQueryPoolEXT;
      vkCreateBuffer : TvkCreateBuffer;
      vkDestroyBuffer : TvkDestroyBuffer;
      vkCreateBufferView : TvkCreateBufferView;
      vkDestroyBufferView : TvkDestroyBufferView;
      vkCreateImage : TvkCreateImage;
      vkDestroyImage : TvkDestroyImage;
      vkGetImageSubresourceLayout : TvkGetImageSubresourceLayout;
      vkCreateImageView : TvkCreateImageView;
      vkDestroyImageView : TvkDestroyImageView;
      vkCreateShaderModule : TvkCreateShaderModule;
      vkDestroyShaderModule : TvkDestroyShaderModule;
      vkCreatePipelineCache : TvkCreatePipelineCache;
      vkDestroyPipelineCache : TvkDestroyPipelineCache;
      vkGetPipelineCacheData : TvkGetPipelineCacheData;
      vkMergePipelineCaches : TvkMergePipelineCaches;
      vkCreateGraphicsPipelines : TvkCreateGraphicsPipelines;
      vkCreateComputePipelines : TvkCreateComputePipelines;
      vkDestroyPipeline : TvkDestroyPipeline;
      vkCreatePipelineLayout : TvkCreatePipelineLayout;
      vkDestroyPipelineLayout : TvkDestroyPipelineLayout;
      vkCreateSampler : TvkCreateSampler;
      vkDestroySampler : TvkDestroySampler;
      vkCreateDescriptorSetLayout : TvkCreateDescriptorSetLayout;
      vkDestroyDescriptorSetLayout : TvkDestroyDescriptorSetLayout;
      vkCreateDescriptorPool : TvkCreateDescriptorPool;
      vkDestroyDescriptorPool : TvkDestroyDescriptorPool;
      vkResetDescriptorPool : TvkResetDescriptorPool;
      vkAllocateDescriptorSets : TvkAllocateDescriptorSets;
      vkFreeDescriptorSets : TvkFreeDescriptorSets;
      vkUpdateDescriptorSets : TvkUpdateDescriptorSets;
      vkCreateFramebuffer : TvkCreateFramebuffer;
      vkDestroyFramebuffer : TvkDestroyFramebuffer;
      vkCreateRenderPass : TvkCreateRenderPass;
      vkDestroyRenderPass : TvkDestroyRenderPass;
      vkGetRenderAreaGranularity : TvkGetRenderAreaGranularity;
      vkCreateCommandPool : TvkCreateCommandPool;
      vkDestroyCommandPool : TvkDestroyCommandPool;
      vkResetCommandPool : TvkResetCommandPool;
      vkAllocateCommandBuffers : TvkAllocateCommandBuffers;
      vkFreeCommandBuffers : TvkFreeCommandBuffers;
      vkBeginCommandBuffer : TvkBeginCommandBuffer;
      vkEndCommandBuffer : TvkEndCommandBuffer;
      vkResetCommandBuffer : TvkResetCommandBuffer;
      vkCmdBindPipeline : TvkCmdBindPipeline;
      vkCmdSetViewport : TvkCmdSetViewport;
      vkCmdSetScissor : TvkCmdSetScissor;
      vkCmdSetLineWidth : TvkCmdSetLineWidth;
      vkCmdSetDepthBias : TvkCmdSetDepthBias;
      vkCmdSetBlendConstants : TvkCmdSetBlendConstants;
      vkCmdSetDepthBounds : TvkCmdSetDepthBounds;
      vkCmdSetStencilCompareMask : TvkCmdSetStencilCompareMask;
      vkCmdSetStencilWriteMask : TvkCmdSetStencilWriteMask;
      vkCmdSetStencilReference : TvkCmdSetStencilReference;
      vkCmdBindDescriptorSets : TvkCmdBindDescriptorSets;
      vkCmdBindIndexBuffer : TvkCmdBindIndexBuffer;
      vkCmdBindVertexBuffers : TvkCmdBindVertexBuffers;
      vkCmdDraw : TvkCmdDraw;
      vkCmdDrawIndexed : TvkCmdDrawIndexed;
      vkCmdDrawIndirect : TvkCmdDrawIndirect;
      vkCmdDrawIndexedIndirect : TvkCmdDrawIndexedIndirect;
      vkCmdDispatch : TvkCmdDispatch;
      vkCmdDispatchIndirect : TvkCmdDispatchIndirect;
      vkCmdCopyBuffer : TvkCmdCopyBuffer;
      vkCmdCopyImage : TvkCmdCopyImage;
      vkCmdBlitImage : TvkCmdBlitImage;
      vkCmdCopyBufferToImage : TvkCmdCopyBufferToImage;
      vkCmdCopyImageToBuffer : TvkCmdCopyImageToBuffer;
      vkCmdUpdateBuffer : TvkCmdUpdateBuffer;
      vkCmdFillBuffer : TvkCmdFillBuffer;
      vkCmdClearColorImage : TvkCmdClearColorImage;
      vkCmdClearDepthStencilImage : TvkCmdClearDepthStencilImage;
      vkCmdClearAttachments : TvkCmdClearAttachments;
      vkCmdResolveImage : TvkCmdResolveImage;
      vkCmdSetEvent : TvkCmdSetEvent;
      vkCmdResetEvent : TvkCmdResetEvent;
      vkCmdWaitEvents : TvkCmdWaitEvents;
      vkCmdPipelineBarrier : TvkCmdPipelineBarrier;
      vkCmdBeginQuery : TvkCmdBeginQuery;
      vkCmdEndQuery : TvkCmdEndQuery;
      vkCmdBeginConditionalRenderingEXT : TvkCmdBeginConditionalRenderingEXT;
      vkCmdEndConditionalRenderingEXT : TvkCmdEndConditionalRenderingEXT;
      vkCmdResetQueryPool : TvkCmdResetQueryPool;
      vkCmdWriteTimestamp : TvkCmdWriteTimestamp;
      vkCmdCopyQueryPoolResults : TvkCmdCopyQueryPoolResults;
      vkCmdPushConstants : TvkCmdPushConstants;
      vkCmdBeginRenderPass : TvkCmdBeginRenderPass;
      vkCmdNextSubpass : TvkCmdNextSubpass;
      vkCmdEndRenderPass : TvkCmdEndRenderPass;
      vkCmdExecuteCommands : TvkCmdExecuteCommands;
     {$ifdef Android}
      vkCreateAndroidSurfaceKHR : TvkCreateAndroidSurfaceKHR;
     {$endif}
      vkGetPhysicalDeviceDisplayPropertiesKHR : TvkGetPhysicalDeviceDisplayPropertiesKHR;
      vkGetPhysicalDeviceDisplayPlanePropertiesKHR : TvkGetPhysicalDeviceDisplayPlanePropertiesKHR;
      vkGetDisplayPlaneSupportedDisplaysKHR : TvkGetDisplayPlaneSupportedDisplaysKHR;
      vkGetDisplayModePropertiesKHR : TvkGetDisplayModePropertiesKHR;
      vkCreateDisplayModeKHR : TvkCreateDisplayModeKHR;
      vkGetDisplayPlaneCapabilitiesKHR : TvkGetDisplayPlaneCapabilitiesKHR;
      vkCreateDisplayPlaneSurfaceKHR : TvkCreateDisplayPlaneSurfaceKHR;
      vkCreateSharedSwapchainsKHR : TvkCreateSharedSwapchainsKHR;
      vkDestroySurfaceKHR : TvkDestroySurfaceKHR;
      vkGetPhysicalDeviceSurfaceSupportKHR : TvkGetPhysicalDeviceSurfaceSupportKHR;
      vkGetPhysicalDeviceSurfaceCapabilitiesKHR : TvkGetPhysicalDeviceSurfaceCapabilitiesKHR;
      vkGetPhysicalDeviceSurfaceFormatsKHR : TvkGetPhysicalDeviceSurfaceFormatsKHR;
      vkGetPhysicalDeviceSurfacePresentModesKHR : TvkGetPhysicalDeviceSurfacePresentModesKHR;
      vkCreateSwapchainKHR : TvkCreateSwapchainKHR;
      vkDestroySwapchainKHR : TvkDestroySwapchainKHR;
      vkGetSwapchainImagesKHR : TvkGetSwapchainImagesKHR;
      vkAcquireNextImageKHR : TvkAcquireNextImageKHR;
      vkQueuePresentKHR : TvkQueuePresentKHR;
      vkCreateViSurfaceNN : TvkCreateViSurfaceNN;
     {$ifdef Wayland}
      vkCreateWaylandSurfaceKHR : TvkCreateWaylandSurfaceKHR;
     {$endif}
     {$ifdef Wayland}
      vkGetPhysicalDeviceWaylandPresentationSupportKHR : TvkGetPhysicalDeviceWaylandPresentationSupportKHR;
     {$endif}
     {$ifdef Windows}
      vkCreateWin32SurfaceKHR : TvkCreateWin32SurfaceKHR;
     {$endif}
     {$ifdef Windows}
      vkGetPhysicalDeviceWin32PresentationSupportKHR : TvkGetPhysicalDeviceWin32PresentationSupportKHR;
     {$endif}
     {$ifdef XLIB}
      vkCreateXlibSurfaceKHR : TvkCreateXlibSurfaceKHR;
     {$endif}
     {$ifdef XLIB}
      vkGetPhysicalDeviceXlibPresentationSupportKHR : TvkGetPhysicalDeviceXlibPresentationSupportKHR;
     {$endif}
     {$ifdef XCB}
      vkCreateXcbSurfaceKHR : TvkCreateXcbSurfaceKHR;
     {$endif}
     {$ifdef XCB}
      vkGetPhysicalDeviceXcbPresentationSupportKHR : TvkGetPhysicalDeviceXcbPresentationSupportKHR;
     {$endif}
      vkCreateDirectFBSurfaceEXT : TvkCreateDirectFBSurfaceEXT;
      vkGetPhysicalDeviceDirectFBPresentationSupportEXT : TvkGetPhysicalDeviceDirectFBPresentationSupportEXT;
      vkCreateImagePipeSurfaceFUCHSIA : TvkCreateImagePipeSurfaceFUCHSIA;
      vkCreateStreamDescriptorSurfaceGGP : TvkCreateStreamDescriptorSurfaceGGP;
      vkCreateDebugReportCallbackEXT : TvkCreateDebugReportCallbackEXT;
      vkDestroyDebugReportCallbackEXT : TvkDestroyDebugReportCallbackEXT;
      vkDebugReportMessageEXT : TvkDebugReportMessageEXT;
      vkDebugMarkerSetObjectNameEXT : TvkDebugMarkerSetObjectNameEXT;
      vkDebugMarkerSetObjectTagEXT : TvkDebugMarkerSetObjectTagEXT;
      vkCmdDebugMarkerBeginEXT : TvkCmdDebugMarkerBeginEXT;
      vkCmdDebugMarkerEndEXT : TvkCmdDebugMarkerEndEXT;
      vkCmdDebugMarkerInsertEXT : TvkCmdDebugMarkerInsertEXT;
      vkGetPhysicalDeviceExternalImageFormatPropertiesNV : TvkGetPhysicalDeviceExternalImageFormatPropertiesNV;
     {$ifdef Windows}
      vkGetMemoryWin32HandleNV : TvkGetMemoryWin32HandleNV;
     {$endif}
      vkCmdExecuteGeneratedCommandsNV : TvkCmdExecuteGeneratedCommandsNV;
      vkCmdPreprocessGeneratedCommandsNV : TvkCmdPreprocessGeneratedCommandsNV;
      vkCmdBindPipelineShaderGroupNV : TvkCmdBindPipelineShaderGroupNV;
      vkGetGeneratedCommandsMemoryRequirementsNV : TvkGetGeneratedCommandsMemoryRequirementsNV;
      vkCreateIndirectCommandsLayoutNV : TvkCreateIndirectCommandsLayoutNV;
      vkDestroyIndirectCommandsLayoutNV : TvkDestroyIndirectCommandsLayoutNV;
      vkGetPhysicalDeviceFeatures2 : TvkGetPhysicalDeviceFeatures2;
      vkGetPhysicalDeviceFeatures2KHR : TvkGetPhysicalDeviceFeatures2KHR;
      vkGetPhysicalDeviceProperties2 : TvkGetPhysicalDeviceProperties2;
      vkGetPhysicalDeviceProperties2KHR : TvkGetPhysicalDeviceProperties2KHR;
      vkGetPhysicalDeviceFormatProperties2 : TvkGetPhysicalDeviceFormatProperties2;
      vkGetPhysicalDeviceFormatProperties2KHR : TvkGetPhysicalDeviceFormatProperties2KHR;
      vkGetPhysicalDeviceImageFormatProperties2 : TvkGetPhysicalDeviceImageFormatProperties2;
      vkGetPhysicalDeviceImageFormatProperties2KHR : TvkGetPhysicalDeviceImageFormatProperties2KHR;
      vkGetPhysicalDeviceQueueFamilyProperties2 : TvkGetPhysicalDeviceQueueFamilyProperties2;
      vkGetPhysicalDeviceQueueFamilyProperties2KHR : TvkGetPhysicalDeviceQueueFamilyProperties2KHR;
      vkGetPhysicalDeviceMemoryProperties2 : TvkGetPhysicalDeviceMemoryProperties2;
      vkGetPhysicalDeviceMemoryProperties2KHR : TvkGetPhysicalDeviceMemoryProperties2KHR;
      vkGetPhysicalDeviceSparseImageFormatProperties2 : TvkGetPhysicalDeviceSparseImageFormatProperties2;
      vkGetPhysicalDeviceSparseImageFormatProperties2KHR : TvkGetPhysicalDeviceSparseImageFormatProperties2KHR;
      vkCmdPushDescriptorSetKHR : TvkCmdPushDescriptorSetKHR;
      vkTrimCommandPool : TvkTrimCommandPool;
      vkTrimCommandPoolKHR : TvkTrimCommandPoolKHR;
      vkGetPhysicalDeviceExternalBufferProperties : TvkGetPhysicalDeviceExternalBufferProperties;
      vkGetPhysicalDeviceExternalBufferPropertiesKHR : TvkGetPhysicalDeviceExternalBufferPropertiesKHR;
     {$ifdef Windows}
      vkGetMemoryWin32HandleKHR : TvkGetMemoryWin32HandleKHR;
     {$endif}
     {$ifdef Windows}
      vkGetMemoryWin32HandlePropertiesKHR : TvkGetMemoryWin32HandlePropertiesKHR;
     {$endif}
      vkGetMemoryFdKHR : TvkGetMemoryFdKHR;
      vkGetMemoryFdPropertiesKHR : TvkGetMemoryFdPropertiesKHR;
      vkGetPhysicalDeviceExternalSemaphoreProperties : TvkGetPhysicalDeviceExternalSemaphoreProperties;
      vkGetPhysicalDeviceExternalSemaphorePropertiesKHR : TvkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
     {$ifdef Windows}
      vkGetSemaphoreWin32HandleKHR : TvkGetSemaphoreWin32HandleKHR;
     {$endif}
     {$ifdef Windows}
      vkImportSemaphoreWin32HandleKHR : TvkImportSemaphoreWin32HandleKHR;
     {$endif}
      vkGetSemaphoreFdKHR : TvkGetSemaphoreFdKHR;
      vkImportSemaphoreFdKHR : TvkImportSemaphoreFdKHR;
      vkGetPhysicalDeviceExternalFenceProperties : TvkGetPhysicalDeviceExternalFenceProperties;
      vkGetPhysicalDeviceExternalFencePropertiesKHR : TvkGetPhysicalDeviceExternalFencePropertiesKHR;
     {$ifdef Windows}
      vkGetFenceWin32HandleKHR : TvkGetFenceWin32HandleKHR;
     {$endif}
     {$ifdef Windows}
      vkImportFenceWin32HandleKHR : TvkImportFenceWin32HandleKHR;
     {$endif}
      vkGetFenceFdKHR : TvkGetFenceFdKHR;
      vkImportFenceFdKHR : TvkImportFenceFdKHR;
      vkReleaseDisplayEXT : TvkReleaseDisplayEXT;
     {$ifdef XLIB}
      vkAcquireXlibDisplayEXT : TvkAcquireXlibDisplayEXT;
     {$endif}
     {$ifdef RandR}
      vkGetRandROutputDisplayEXT : TvkGetRandROutputDisplayEXT;
     {$endif}
      vkDisplayPowerControlEXT : TvkDisplayPowerControlEXT;
      vkRegisterDeviceEventEXT : TvkRegisterDeviceEventEXT;
      vkRegisterDisplayEventEXT : TvkRegisterDisplayEventEXT;
      vkGetSwapchainCounterEXT : TvkGetSwapchainCounterEXT;
      vkGetPhysicalDeviceSurfaceCapabilities2EXT : TvkGetPhysicalDeviceSurfaceCapabilities2EXT;
      vkEnumeratePhysicalDeviceGroups : TvkEnumeratePhysicalDeviceGroups;
      vkEnumeratePhysicalDeviceGroupsKHR : TvkEnumeratePhysicalDeviceGroupsKHR;
      vkGetDeviceGroupPeerMemoryFeatures : TvkGetDeviceGroupPeerMemoryFeatures;
      vkGetDeviceGroupPeerMemoryFeaturesKHR : TvkGetDeviceGroupPeerMemoryFeaturesKHR;
      vkBindBufferMemory2 : TvkBindBufferMemory2;
      vkBindBufferMemory2KHR : TvkBindBufferMemory2KHR;
      vkBindImageMemory2 : TvkBindImageMemory2;
      vkBindImageMemory2KHR : TvkBindImageMemory2KHR;
      vkCmdSetDeviceMask : TvkCmdSetDeviceMask;
      vkCmdSetDeviceMaskKHR : TvkCmdSetDeviceMaskKHR;
      vkGetDeviceGroupPresentCapabilitiesKHR : TvkGetDeviceGroupPresentCapabilitiesKHR;
      vkGetDeviceGroupSurfacePresentModesKHR : TvkGetDeviceGroupSurfacePresentModesKHR;
      vkAcquireNextImage2KHR : TvkAcquireNextImage2KHR;
      vkCmdDispatchBase : TvkCmdDispatchBase;
      vkCmdDispatchBaseKHR : TvkCmdDispatchBaseKHR;
      vkGetPhysicalDevicePresentRectanglesKHR : TvkGetPhysicalDevicePresentRectanglesKHR;
      vkCreateDescriptorUpdateTemplate : TvkCreateDescriptorUpdateTemplate;
      vkCreateDescriptorUpdateTemplateKHR : TvkCreateDescriptorUpdateTemplateKHR;
      vkDestroyDescriptorUpdateTemplate : TvkDestroyDescriptorUpdateTemplate;
      vkDestroyDescriptorUpdateTemplateKHR : TvkDestroyDescriptorUpdateTemplateKHR;
      vkUpdateDescriptorSetWithTemplate : TvkUpdateDescriptorSetWithTemplate;
      vkUpdateDescriptorSetWithTemplateKHR : TvkUpdateDescriptorSetWithTemplateKHR;
      vkCmdPushDescriptorSetWithTemplateKHR : TvkCmdPushDescriptorSetWithTemplateKHR;
      vkSetHdrMetadataEXT : TvkSetHdrMetadataEXT;
      vkGetSwapchainStatusKHR : TvkGetSwapchainStatusKHR;
      vkGetRefreshCycleDurationGOOGLE : TvkGetRefreshCycleDurationGOOGLE;
      vkGetPastPresentationTimingGOOGLE : TvkGetPastPresentationTimingGOOGLE;
     {$ifdef MoltenVK_IOS}
      vkCreateIOSSurfaceMVK : TvkCreateIOSSurfaceMVK;
     {$endif}
     {$ifdef MoltenVK_MacOS}
      vkCreateMacOSSurfaceMVK : TvkCreateMacOSSurfaceMVK;
     {$endif}
      vkCreateMetalSurfaceEXT : TvkCreateMetalSurfaceEXT;
      vkCmdSetViewportWScalingNV : TvkCmdSetViewportWScalingNV;
      vkCmdSetDiscardRectangleEXT : TvkCmdSetDiscardRectangleEXT;
      vkCmdSetSampleLocationsEXT : TvkCmdSetSampleLocationsEXT;
      vkGetPhysicalDeviceMultisamplePropertiesEXT : TvkGetPhysicalDeviceMultisamplePropertiesEXT;
      vkGetPhysicalDeviceSurfaceCapabilities2KHR : TvkGetPhysicalDeviceSurfaceCapabilities2KHR;
      vkGetPhysicalDeviceSurfaceFormats2KHR : TvkGetPhysicalDeviceSurfaceFormats2KHR;
      vkGetPhysicalDeviceDisplayProperties2KHR : TvkGetPhysicalDeviceDisplayProperties2KHR;
      vkGetPhysicalDeviceDisplayPlaneProperties2KHR : TvkGetPhysicalDeviceDisplayPlaneProperties2KHR;
      vkGetDisplayModeProperties2KHR : TvkGetDisplayModeProperties2KHR;
      vkGetDisplayPlaneCapabilities2KHR : TvkGetDisplayPlaneCapabilities2KHR;
      vkGetBufferMemoryRequirements2 : TvkGetBufferMemoryRequirements2;
      vkGetBufferMemoryRequirements2KHR : TvkGetBufferMemoryRequirements2KHR;
      vkGetImageMemoryRequirements2 : TvkGetImageMemoryRequirements2;
      vkGetImageMemoryRequirements2KHR : TvkGetImageMemoryRequirements2KHR;
      vkGetImageSparseMemoryRequirements2 : TvkGetImageSparseMemoryRequirements2;
      vkGetImageSparseMemoryRequirements2KHR : TvkGetImageSparseMemoryRequirements2KHR;
      vkCreateSamplerYcbcrConversion : TvkCreateSamplerYcbcrConversion;
      vkCreateSamplerYcbcrConversionKHR : TvkCreateSamplerYcbcrConversionKHR;
      vkDestroySamplerYcbcrConversion : TvkDestroySamplerYcbcrConversion;
      vkDestroySamplerYcbcrConversionKHR : TvkDestroySamplerYcbcrConversionKHR;
      vkGetDeviceQueue2 : TvkGetDeviceQueue2;
      vkCreateValidationCacheEXT : TvkCreateValidationCacheEXT;
      vkDestroyValidationCacheEXT : TvkDestroyValidationCacheEXT;
      vkGetValidationCacheDataEXT : TvkGetValidationCacheDataEXT;
      vkMergeValidationCachesEXT : TvkMergeValidationCachesEXT;
      vkGetDescriptorSetLayoutSupport : TvkGetDescriptorSetLayoutSupport;
      vkGetDescriptorSetLayoutSupportKHR : TvkGetDescriptorSetLayoutSupportKHR;
      vkGetSwapchainGrallocUsageANDROID : TvkGetSwapchainGrallocUsageANDROID;
     {$ifdef Android}
      vkGetSwapchainGrallocUsage2ANDROID : TvkGetSwapchainGrallocUsage2ANDROID;
     {$endif}
      vkAcquireImageANDROID : TvkAcquireImageANDROID;
      vkQueueSignalReleaseImageANDROID : TvkQueueSignalReleaseImageANDROID;
      vkGetShaderInfoAMD : TvkGetShaderInfoAMD;
      vkSetLocalDimmingAMD : TvkSetLocalDimmingAMD;
      vkGetPhysicalDeviceCalibrateableTimeDomainsEXT : TvkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
      vkGetCalibratedTimestampsEXT : TvkGetCalibratedTimestampsEXT;
      vkSetDebugUtilsObjectNameEXT : TvkSetDebugUtilsObjectNameEXT;
      vkSetDebugUtilsObjectTagEXT : TvkSetDebugUtilsObjectTagEXT;
      vkQueueBeginDebugUtilsLabelEXT : TvkQueueBeginDebugUtilsLabelEXT;
      vkQueueEndDebugUtilsLabelEXT : TvkQueueEndDebugUtilsLabelEXT;
      vkQueueInsertDebugUtilsLabelEXT : TvkQueueInsertDebugUtilsLabelEXT;
      vkCmdBeginDebugUtilsLabelEXT : TvkCmdBeginDebugUtilsLabelEXT;
      vkCmdEndDebugUtilsLabelEXT : TvkCmdEndDebugUtilsLabelEXT;
      vkCmdInsertDebugUtilsLabelEXT : TvkCmdInsertDebugUtilsLabelEXT;
      vkCreateDebugUtilsMessengerEXT : TvkCreateDebugUtilsMessengerEXT;
      vkDestroyDebugUtilsMessengerEXT : TvkDestroyDebugUtilsMessengerEXT;
      vkSubmitDebugUtilsMessageEXT : TvkSubmitDebugUtilsMessageEXT;
      vkGetMemoryHostPointerPropertiesEXT : TvkGetMemoryHostPointerPropertiesEXT;
      vkCmdWriteBufferMarkerAMD : TvkCmdWriteBufferMarkerAMD;
      vkCreateRenderPass2 : TvkCreateRenderPass2;
      vkCreateRenderPass2KHR : TvkCreateRenderPass2KHR;
      vkCmdBeginRenderPass2 : TvkCmdBeginRenderPass2;
      vkCmdBeginRenderPass2KHR : TvkCmdBeginRenderPass2KHR;
      vkCmdNextSubpass2 : TvkCmdNextSubpass2;
      vkCmdNextSubpass2KHR : TvkCmdNextSubpass2KHR;
      vkCmdEndRenderPass2 : TvkCmdEndRenderPass2;
      vkCmdEndRenderPass2KHR : TvkCmdEndRenderPass2KHR;
      vkGetSemaphoreCounterValue : TvkGetSemaphoreCounterValue;
      vkGetSemaphoreCounterValueKHR : TvkGetSemaphoreCounterValueKHR;
      vkWaitSemaphores : TvkWaitSemaphores;
      vkWaitSemaphoresKHR : TvkWaitSemaphoresKHR;
      vkSignalSemaphore : TvkSignalSemaphore;
      vkSignalSemaphoreKHR : TvkSignalSemaphoreKHR;
     {$ifdef Android}
      vkGetAndroidHardwareBufferPropertiesANDROID : TvkGetAndroidHardwareBufferPropertiesANDROID;
     {$endif}
     {$ifdef Android}
      vkGetMemoryAndroidHardwareBufferANDROID : TvkGetMemoryAndroidHardwareBufferANDROID;
     {$endif}
      vkCmdDrawIndirectCount : TvkCmdDrawIndirectCount;
      vkCmdDrawIndirectCountKHR : TvkCmdDrawIndirectCountKHR;
      vkCmdDrawIndirectCountAMD : TvkCmdDrawIndirectCountAMD;
      vkCmdDrawIndexedIndirectCount : TvkCmdDrawIndexedIndirectCount;
      vkCmdDrawIndexedIndirectCountKHR : TvkCmdDrawIndexedIndirectCountKHR;
      vkCmdDrawIndexedIndirectCountAMD : TvkCmdDrawIndexedIndirectCountAMD;
      vkCmdSetCheckpointNV : TvkCmdSetCheckpointNV;
      vkGetQueueCheckpointDataNV : TvkGetQueueCheckpointDataNV;
      vkCmdBindTransformFeedbackBuffersEXT : TvkCmdBindTransformFeedbackBuffersEXT;
      vkCmdBeginTransformFeedbackEXT : TvkCmdBeginTransformFeedbackEXT;
      vkCmdEndTransformFeedbackEXT : TvkCmdEndTransformFeedbackEXT;
      vkCmdBeginQueryIndexedEXT : TvkCmdBeginQueryIndexedEXT;
      vkCmdEndQueryIndexedEXT : TvkCmdEndQueryIndexedEXT;
      vkCmdDrawIndirectByteCountEXT : TvkCmdDrawIndirectByteCountEXT;
      vkCmdSetExclusiveScissorNV : TvkCmdSetExclusiveScissorNV;
      vkCmdBindShadingRateImageNV : TvkCmdBindShadingRateImageNV;
      vkCmdSetViewportShadingRatePaletteNV : TvkCmdSetViewportShadingRatePaletteNV;
      vkCmdSetCoarseSampleOrderNV : TvkCmdSetCoarseSampleOrderNV;
      vkCmdDrawMeshTasksNV : TvkCmdDrawMeshTasksNV;
      vkCmdDrawMeshTasksIndirectNV : TvkCmdDrawMeshTasksIndirectNV;
      vkCmdDrawMeshTasksIndirectCountNV : TvkCmdDrawMeshTasksIndirectCountNV;
      vkCompileDeferredNV : TvkCompileDeferredNV;
      vkCreateAccelerationStructureNV : TvkCreateAccelerationStructureNV;
      vkDestroyAccelerationStructureKHR : TvkDestroyAccelerationStructureKHR;
      vkDestroyAccelerationStructureNV : TvkDestroyAccelerationStructureNV;
      vkGetAccelerationStructureMemoryRequirementsKHR : TvkGetAccelerationStructureMemoryRequirementsKHR;
      vkGetAccelerationStructureMemoryRequirementsNV : TvkGetAccelerationStructureMemoryRequirementsNV;
      vkBindAccelerationStructureMemoryKHR : TvkBindAccelerationStructureMemoryKHR;
      vkBindAccelerationStructureMemoryNV : TvkBindAccelerationStructureMemoryNV;
      vkCmdCopyAccelerationStructureNV : TvkCmdCopyAccelerationStructureNV;
      vkCmdCopyAccelerationStructureKHR : TvkCmdCopyAccelerationStructureKHR;
      vkCopyAccelerationStructureKHR : TvkCopyAccelerationStructureKHR;
      vkCmdCopyAccelerationStructureToMemoryKHR : TvkCmdCopyAccelerationStructureToMemoryKHR;
      vkCopyAccelerationStructureToMemoryKHR : TvkCopyAccelerationStructureToMemoryKHR;
      vkCmdCopyMemoryToAccelerationStructureKHR : TvkCmdCopyMemoryToAccelerationStructureKHR;
      vkCopyMemoryToAccelerationStructureKHR : TvkCopyMemoryToAccelerationStructureKHR;
      vkCmdWriteAccelerationStructuresPropertiesKHR : TvkCmdWriteAccelerationStructuresPropertiesKHR;
      vkCmdWriteAccelerationStructuresPropertiesNV : TvkCmdWriteAccelerationStructuresPropertiesNV;
      vkCmdBuildAccelerationStructureNV : TvkCmdBuildAccelerationStructureNV;
      vkWriteAccelerationStructuresPropertiesKHR : TvkWriteAccelerationStructuresPropertiesKHR;
      vkCmdTraceRaysKHR : TvkCmdTraceRaysKHR;
      vkCmdTraceRaysNV : TvkCmdTraceRaysNV;
      vkGetRayTracingShaderGroupHandlesKHR : TvkGetRayTracingShaderGroupHandlesKHR;
      vkGetRayTracingShaderGroupHandlesNV : TvkGetRayTracingShaderGroupHandlesNV;
      vkGetRayTracingCaptureReplayShaderGroupHandlesKHR : TvkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
      vkGetAccelerationStructureHandleNV : TvkGetAccelerationStructureHandleNV;
      vkCreateRayTracingPipelinesNV : TvkCreateRayTracingPipelinesNV;
      vkCreateRayTracingPipelinesKHR : TvkCreateRayTracingPipelinesKHR;
      vkGetPhysicalDeviceCooperativeMatrixPropertiesNV : TvkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
      vkCmdTraceRaysIndirectKHR : TvkCmdTraceRaysIndirectKHR;
      vkGetDeviceAccelerationStructureCompatibilityKHR : TvkGetDeviceAccelerationStructureCompatibilityKHR;
      vkGetImageViewHandleNVX : TvkGetImageViewHandleNVX;
      vkGetImageViewAddressNVX : TvkGetImageViewAddressNVX;
      vkGetPhysicalDeviceSurfacePresentModes2EXT : TvkGetPhysicalDeviceSurfacePresentModes2EXT;
      vkGetDeviceGroupSurfacePresentModes2EXT : TvkGetDeviceGroupSurfacePresentModes2EXT;
      vkAcquireFullScreenExclusiveModeEXT : TvkAcquireFullScreenExclusiveModeEXT;
      vkReleaseFullScreenExclusiveModeEXT : TvkReleaseFullScreenExclusiveModeEXT;
      vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR : TvkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
      vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR : TvkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
      vkAcquireProfilingLockKHR : TvkAcquireProfilingLockKHR;
      vkReleaseProfilingLockKHR : TvkReleaseProfilingLockKHR;
      vkGetImageDrmFormatModifierPropertiesEXT : TvkGetImageDrmFormatModifierPropertiesEXT;
      vkGetBufferOpaqueCaptureAddress : TvkGetBufferOpaqueCaptureAddress;
      vkGetBufferOpaqueCaptureAddressKHR : TvkGetBufferOpaqueCaptureAddressKHR;
      vkGetBufferDeviceAddress : TvkGetBufferDeviceAddress;
      vkGetBufferDeviceAddressKHR : TvkGetBufferDeviceAddressKHR;
      vkGetBufferDeviceAddressEXT : TvkGetBufferDeviceAddressEXT;
      vkCreateHeadlessSurfaceEXT : TvkCreateHeadlessSurfaceEXT;
      vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV : TvkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
      vkInitializePerformanceApiINTEL : TvkInitializePerformanceApiINTEL;
      vkUninitializePerformanceApiINTEL : TvkUninitializePerformanceApiINTEL;
      vkCmdSetPerformanceMarkerINTEL : TvkCmdSetPerformanceMarkerINTEL;
      vkCmdSetPerformanceStreamMarkerINTEL : TvkCmdSetPerformanceStreamMarkerINTEL;
      vkCmdSetPerformanceOverrideINTEL : TvkCmdSetPerformanceOverrideINTEL;
      vkAcquirePerformanceConfigurationINTEL : TvkAcquirePerformanceConfigurationINTEL;
      vkReleasePerformanceConfigurationINTEL : TvkReleasePerformanceConfigurationINTEL;
      vkQueueSetPerformanceConfigurationINTEL : TvkQueueSetPerformanceConfigurationINTEL;
      vkGetPerformanceParameterINTEL : TvkGetPerformanceParameterINTEL;
      vkGetDeviceMemoryOpaqueCaptureAddress : TvkGetDeviceMemoryOpaqueCaptureAddress;
      vkGetDeviceMemoryOpaqueCaptureAddressKHR : TvkGetDeviceMemoryOpaqueCaptureAddressKHR;
      vkGetPipelineExecutablePropertiesKHR : TvkGetPipelineExecutablePropertiesKHR;
      vkGetPipelineExecutableStatisticsKHR : TvkGetPipelineExecutableStatisticsKHR;
      vkGetPipelineExecutableInternalRepresentationsKHR : TvkGetPipelineExecutableInternalRepresentationsKHR;
      vkCmdSetLineStippleEXT : TvkCmdSetLineStippleEXT;
      vkGetPhysicalDeviceToolPropertiesEXT : TvkGetPhysicalDeviceToolPropertiesEXT;
      vkCreateAccelerationStructureKHR : TvkCreateAccelerationStructureKHR;
      vkCmdBuildAccelerationStructureKHR : TvkCmdBuildAccelerationStructureKHR;
      vkCmdBuildAccelerationStructureIndirectKHR : TvkCmdBuildAccelerationStructureIndirectKHR;
      vkBuildAccelerationStructureKHR : TvkBuildAccelerationStructureKHR;
      vkGetAccelerationStructureDeviceAddressKHR : TvkGetAccelerationStructureDeviceAddressKHR;
      vkCreateDeferredOperationKHR : TvkCreateDeferredOperationKHR;
      vkDestroyDeferredOperationKHR : TvkDestroyDeferredOperationKHR;
      vkGetDeferredOperationMaxConcurrencyKHR : TvkGetDeferredOperationMaxConcurrencyKHR;
      vkGetDeferredOperationResultKHR : TvkGetDeferredOperationResultKHR;
      vkDeferredOperationJoinKHR : TvkDeferredOperationJoinKHR;
      vkCmdSetCullModeEXT : TvkCmdSetCullModeEXT;
      vkCmdSetFrontFaceEXT : TvkCmdSetFrontFaceEXT;
      vkCmdSetPrimitiveTopologyEXT : TvkCmdSetPrimitiveTopologyEXT;
      vkCmdSetViewportWithCountEXT : TvkCmdSetViewportWithCountEXT;
      vkCmdSetScissorWithCountEXT : TvkCmdSetScissorWithCountEXT;
      vkCmdBindVertexBuffers2EXT : TvkCmdBindVertexBuffers2EXT;
      vkCmdSetDepthTestEnableEXT : TvkCmdSetDepthTestEnableEXT;
      vkCmdSetDepthWriteEnableEXT : TvkCmdSetDepthWriteEnableEXT;
      vkCmdSetDepthCompareOpEXT : TvkCmdSetDepthCompareOpEXT;
      vkCmdSetDepthBoundsTestEnableEXT : TvkCmdSetDepthBoundsTestEnableEXT;
      vkCmdSetStencilTestEnableEXT : TvkCmdSetStencilTestEnableEXT;
      vkCmdSetStencilOpEXT : TvkCmdSetStencilOpEXT;
      vkCreatePrivateDataSlotEXT : TvkCreatePrivateDataSlotEXT;
      vkDestroyPrivateDataSlotEXT : TvkDestroyPrivateDataSlotEXT;
      vkSetPrivateDataEXT : TvkSetPrivateDataEXT;
      vkGetPrivateDataEXT : TvkGetPrivateDataEXT;
  end;

//========== TVkDeviceFunctions =======================

type
  TVkDeviceFunctions = class
    aaDevice: TVkDevice;
      //............................... Total Device Functions: 343
      vkCreateInstance : TvkCreateInstance;
      vkDestroyInstance : TvkDestroyInstance;
      vkEnumeratePhysicalDevices : TvkEnumeratePhysicalDevices;
      vkGetDeviceProcAddr : TvkGetDeviceProcAddr;
      vkGetInstanceProcAddr : TvkGetInstanceProcAddr;
      vkGetPhysicalDeviceProperties : TvkGetPhysicalDeviceProperties;
      vkGetPhysicalDeviceQueueFamilyProperties : TvkGetPhysicalDeviceQueueFamilyProperties;
      vkGetPhysicalDeviceMemoryProperties : TvkGetPhysicalDeviceMemoryProperties;
      vkGetPhysicalDeviceFeatures : TvkGetPhysicalDeviceFeatures;
      vkGetPhysicalDeviceFormatProperties : TvkGetPhysicalDeviceFormatProperties;
      vkGetPhysicalDeviceImageFormatProperties : TvkGetPhysicalDeviceImageFormatProperties;
      vkCreateDevice : TvkCreateDevice;
      vkDestroyDevice : TvkDestroyDevice;
      vkEnumerateInstanceVersion : TvkEnumerateInstanceVersion;
      vkEnumerateInstanceLayerProperties : TvkEnumerateInstanceLayerProperties;
      vkEnumerateInstanceExtensionProperties : TvkEnumerateInstanceExtensionProperties;
      vkEnumerateDeviceLayerProperties : TvkEnumerateDeviceLayerProperties;
      vkEnumerateDeviceExtensionProperties : TvkEnumerateDeviceExtensionProperties;
      vkGetDeviceQueue : TvkGetDeviceQueue;
      vkQueueSubmit : TvkQueueSubmit;
      vkQueueWaitIdle : TvkQueueWaitIdle;
      vkDeviceWaitIdle : TvkDeviceWaitIdle;
      vkAllocateMemory : TvkAllocateMemory;
      vkFreeMemory : TvkFreeMemory;
      vkMapMemory : TvkMapMemory;
      vkUnmapMemory : TvkUnmapMemory;
      vkFlushMappedMemoryRanges : TvkFlushMappedMemoryRanges;
      vkInvalidateMappedMemoryRanges : TvkInvalidateMappedMemoryRanges;
      vkGetDeviceMemoryCommitment : TvkGetDeviceMemoryCommitment;
      vkGetBufferMemoryRequirements : TvkGetBufferMemoryRequirements;
      vkBindBufferMemory : TvkBindBufferMemory;
      vkGetImageMemoryRequirements : TvkGetImageMemoryRequirements;
      vkBindImageMemory : TvkBindImageMemory;
      vkGetImageSparseMemoryRequirements : TvkGetImageSparseMemoryRequirements;
      vkGetPhysicalDeviceSparseImageFormatProperties : TvkGetPhysicalDeviceSparseImageFormatProperties;
      vkQueueBindSparse : TvkQueueBindSparse;
      vkCreateFence : TvkCreateFence;
      vkDestroyFence : TvkDestroyFence;
      vkResetFences : TvkResetFences;
      vkGetFenceStatus : TvkGetFenceStatus;
      vkWaitForFences : TvkWaitForFences;
      vkCreateSemaphore : TvkCreateSemaphore;
      vkDestroySemaphore : TvkDestroySemaphore;
      vkCreateEvent : TvkCreateEvent;
      vkDestroyEvent : TvkDestroyEvent;
      vkGetEventStatus : TvkGetEventStatus;
      vkSetEvent : TvkSetEvent;
      vkResetEvent : TvkResetEvent;
      vkCreateQueryPool : TvkCreateQueryPool;
      vkDestroyQueryPool : TvkDestroyQueryPool;
      vkGetQueryPoolResults : TvkGetQueryPoolResults;
      vkResetQueryPool : TvkResetQueryPool;
      vkResetQueryPoolEXT : TvkResetQueryPoolEXT;
      vkCreateBuffer : TvkCreateBuffer;
      vkDestroyBuffer : TvkDestroyBuffer;
      vkCreateBufferView : TvkCreateBufferView;
      vkDestroyBufferView : TvkDestroyBufferView;
      vkCreateImage : TvkCreateImage;
      vkDestroyImage : TvkDestroyImage;
      vkGetImageSubresourceLayout : TvkGetImageSubresourceLayout;
      vkCreateImageView : TvkCreateImageView;
      vkDestroyImageView : TvkDestroyImageView;
      vkCreateShaderModule : TvkCreateShaderModule;
      vkDestroyShaderModule : TvkDestroyShaderModule;
      vkCreatePipelineCache : TvkCreatePipelineCache;
      vkDestroyPipelineCache : TvkDestroyPipelineCache;
      vkGetPipelineCacheData : TvkGetPipelineCacheData;
      vkMergePipelineCaches : TvkMergePipelineCaches;
      vkCreateGraphicsPipelines : TvkCreateGraphicsPipelines;
      vkCreateComputePipelines : TvkCreateComputePipelines;
      vkDestroyPipeline : TvkDestroyPipeline;
      vkCreatePipelineLayout : TvkCreatePipelineLayout;
      vkDestroyPipelineLayout : TvkDestroyPipelineLayout;
      vkCreateSampler : TvkCreateSampler;
      vkDestroySampler : TvkDestroySampler;
      vkCreateDescriptorSetLayout : TvkCreateDescriptorSetLayout;
      vkDestroyDescriptorSetLayout : TvkDestroyDescriptorSetLayout;
      vkCreateDescriptorPool : TvkCreateDescriptorPool;
      vkDestroyDescriptorPool : TvkDestroyDescriptorPool;
      vkResetDescriptorPool : TvkResetDescriptorPool;
      vkAllocateDescriptorSets : TvkAllocateDescriptorSets;
      vkFreeDescriptorSets : TvkFreeDescriptorSets;
      vkUpdateDescriptorSets : TvkUpdateDescriptorSets;
      vkCreateFramebuffer : TvkCreateFramebuffer;
      vkDestroyFramebuffer : TvkDestroyFramebuffer;
      vkCreateRenderPass : TvkCreateRenderPass;
      vkDestroyRenderPass : TvkDestroyRenderPass;
      vkGetRenderAreaGranularity : TvkGetRenderAreaGranularity;
      vkCreateCommandPool : TvkCreateCommandPool;
      vkDestroyCommandPool : TvkDestroyCommandPool;
      vkResetCommandPool : TvkResetCommandPool;
      vkAllocateCommandBuffers : TvkAllocateCommandBuffers;
      vkFreeCommandBuffers : TvkFreeCommandBuffers;
      vkBeginCommandBuffer : TvkBeginCommandBuffer;
      vkEndCommandBuffer : TvkEndCommandBuffer;
      vkResetCommandBuffer : TvkResetCommandBuffer;
      vkCmdBindPipeline : TvkCmdBindPipeline;
      vkCmdSetViewport : TvkCmdSetViewport;
      vkCmdSetScissor : TvkCmdSetScissor;
      vkCmdSetLineWidth : TvkCmdSetLineWidth;
      vkCmdSetDepthBias : TvkCmdSetDepthBias;
      vkCmdSetBlendConstants : TvkCmdSetBlendConstants;
      vkCmdSetDepthBounds : TvkCmdSetDepthBounds;
      vkCmdSetStencilCompareMask : TvkCmdSetStencilCompareMask;
      vkCmdSetStencilWriteMask : TvkCmdSetStencilWriteMask;
      vkCmdSetStencilReference : TvkCmdSetStencilReference;
      vkCmdBindDescriptorSets : TvkCmdBindDescriptorSets;
      vkCmdBindIndexBuffer : TvkCmdBindIndexBuffer;
      vkCmdBindVertexBuffers : TvkCmdBindVertexBuffers;
      vkCmdDraw : TvkCmdDraw;
      vkCmdDrawIndexed : TvkCmdDrawIndexed;
      vkCmdDrawIndirect : TvkCmdDrawIndirect;
      vkCmdDrawIndexedIndirect : TvkCmdDrawIndexedIndirect;
      vkCmdDispatch : TvkCmdDispatch;
      vkCmdDispatchIndirect : TvkCmdDispatchIndirect;
      vkCmdCopyBuffer : TvkCmdCopyBuffer;
      vkCmdCopyImage : TvkCmdCopyImage;
      vkCmdBlitImage : TvkCmdBlitImage;
      vkCmdCopyBufferToImage : TvkCmdCopyBufferToImage;
      vkCmdCopyImageToBuffer : TvkCmdCopyImageToBuffer;
      vkCmdUpdateBuffer : TvkCmdUpdateBuffer;
      vkCmdFillBuffer : TvkCmdFillBuffer;
      vkCmdClearColorImage : TvkCmdClearColorImage;
      vkCmdClearDepthStencilImage : TvkCmdClearDepthStencilImage;
      vkCmdClearAttachments : TvkCmdClearAttachments;
      vkCmdResolveImage : TvkCmdResolveImage;
      vkCmdSetEvent : TvkCmdSetEvent;
      vkCmdResetEvent : TvkCmdResetEvent;
      vkCmdWaitEvents : TvkCmdWaitEvents;
      vkCmdPipelineBarrier : TvkCmdPipelineBarrier;
      vkCmdBeginQuery : TvkCmdBeginQuery;
      vkCmdEndQuery : TvkCmdEndQuery;
      vkCmdBeginConditionalRenderingEXT : TvkCmdBeginConditionalRenderingEXT;
      vkCmdEndConditionalRenderingEXT : TvkCmdEndConditionalRenderingEXT;
      vkCmdResetQueryPool : TvkCmdResetQueryPool;
      vkCmdWriteTimestamp : TvkCmdWriteTimestamp;
      vkCmdCopyQueryPoolResults : TvkCmdCopyQueryPoolResults;
      vkCmdPushConstants : TvkCmdPushConstants;
      vkCmdBeginRenderPass : TvkCmdBeginRenderPass;
      vkCmdNextSubpass : TvkCmdNextSubpass;
      vkCmdEndRenderPass : TvkCmdEndRenderPass;
      vkCmdExecuteCommands : TvkCmdExecuteCommands;
     {$ifdef Android}
      vkCreateAndroidSurfaceKHR : TvkCreateAndroidSurfaceKHR;
     {$endif}
      vkGetPhysicalDeviceDisplayPropertiesKHR : TvkGetPhysicalDeviceDisplayPropertiesKHR;
      vkGetPhysicalDeviceDisplayPlanePropertiesKHR : TvkGetPhysicalDeviceDisplayPlanePropertiesKHR;
      vkGetDisplayPlaneSupportedDisplaysKHR : TvkGetDisplayPlaneSupportedDisplaysKHR;
      vkGetDisplayModePropertiesKHR : TvkGetDisplayModePropertiesKHR;
      vkCreateDisplayModeKHR : TvkCreateDisplayModeKHR;
      vkGetDisplayPlaneCapabilitiesKHR : TvkGetDisplayPlaneCapabilitiesKHR;
      vkCreateDisplayPlaneSurfaceKHR : TvkCreateDisplayPlaneSurfaceKHR;
      vkCreateSharedSwapchainsKHR : TvkCreateSharedSwapchainsKHR;
      vkDestroySurfaceKHR : TvkDestroySurfaceKHR;
      vkGetPhysicalDeviceSurfaceSupportKHR : TvkGetPhysicalDeviceSurfaceSupportKHR;
      vkGetPhysicalDeviceSurfaceCapabilitiesKHR : TvkGetPhysicalDeviceSurfaceCapabilitiesKHR;
      vkGetPhysicalDeviceSurfaceFormatsKHR : TvkGetPhysicalDeviceSurfaceFormatsKHR;
      vkGetPhysicalDeviceSurfacePresentModesKHR : TvkGetPhysicalDeviceSurfacePresentModesKHR;
      vkCreateSwapchainKHR : TvkCreateSwapchainKHR;
      vkDestroySwapchainKHR : TvkDestroySwapchainKHR;
      vkGetSwapchainImagesKHR : TvkGetSwapchainImagesKHR;
      vkAcquireNextImageKHR : TvkAcquireNextImageKHR;
      vkQueuePresentKHR : TvkQueuePresentKHR;
      vkCreateViSurfaceNN : TvkCreateViSurfaceNN;
     {$ifdef Wayland}
      vkCreateWaylandSurfaceKHR : TvkCreateWaylandSurfaceKHR;
     {$endif}
     {$ifdef Wayland}
      vkGetPhysicalDeviceWaylandPresentationSupportKHR : TvkGetPhysicalDeviceWaylandPresentationSupportKHR;
     {$endif}
     {$ifdef Windows}
      vkCreateWin32SurfaceKHR : TvkCreateWin32SurfaceKHR;
     {$endif}
     {$ifdef Windows}
      vkGetPhysicalDeviceWin32PresentationSupportKHR : TvkGetPhysicalDeviceWin32PresentationSupportKHR;
     {$endif}
     {$ifdef XLIB}
      vkCreateXlibSurfaceKHR : TvkCreateXlibSurfaceKHR;
     {$endif}
     {$ifdef XLIB}
      vkGetPhysicalDeviceXlibPresentationSupportKHR : TvkGetPhysicalDeviceXlibPresentationSupportKHR;
     {$endif}
     {$ifdef XCB}
      vkCreateXcbSurfaceKHR : TvkCreateXcbSurfaceKHR;
     {$endif}
     {$ifdef XCB}
      vkGetPhysicalDeviceXcbPresentationSupportKHR : TvkGetPhysicalDeviceXcbPresentationSupportKHR;
     {$endif}
      vkCreateDirectFBSurfaceEXT : TvkCreateDirectFBSurfaceEXT;
      vkGetPhysicalDeviceDirectFBPresentationSupportEXT : TvkGetPhysicalDeviceDirectFBPresentationSupportEXT;
      vkCreateImagePipeSurfaceFUCHSIA : TvkCreateImagePipeSurfaceFUCHSIA;
      vkCreateStreamDescriptorSurfaceGGP : TvkCreateStreamDescriptorSurfaceGGP;
      vkCreateDebugReportCallbackEXT : TvkCreateDebugReportCallbackEXT;
      vkDestroyDebugReportCallbackEXT : TvkDestroyDebugReportCallbackEXT;
      vkDebugReportMessageEXT : TvkDebugReportMessageEXT;
      vkDebugMarkerSetObjectNameEXT : TvkDebugMarkerSetObjectNameEXT;
      vkDebugMarkerSetObjectTagEXT : TvkDebugMarkerSetObjectTagEXT;
      vkCmdDebugMarkerBeginEXT : TvkCmdDebugMarkerBeginEXT;
      vkCmdDebugMarkerEndEXT : TvkCmdDebugMarkerEndEXT;
      vkCmdDebugMarkerInsertEXT : TvkCmdDebugMarkerInsertEXT;
      vkGetPhysicalDeviceExternalImageFormatPropertiesNV : TvkGetPhysicalDeviceExternalImageFormatPropertiesNV;
     {$ifdef Windows}
      vkGetMemoryWin32HandleNV : TvkGetMemoryWin32HandleNV;
     {$endif}
      vkCmdExecuteGeneratedCommandsNV : TvkCmdExecuteGeneratedCommandsNV;
      vkCmdPreprocessGeneratedCommandsNV : TvkCmdPreprocessGeneratedCommandsNV;
      vkCmdBindPipelineShaderGroupNV : TvkCmdBindPipelineShaderGroupNV;
      vkGetGeneratedCommandsMemoryRequirementsNV : TvkGetGeneratedCommandsMemoryRequirementsNV;
      vkCreateIndirectCommandsLayoutNV : TvkCreateIndirectCommandsLayoutNV;
      vkDestroyIndirectCommandsLayoutNV : TvkDestroyIndirectCommandsLayoutNV;
      vkGetPhysicalDeviceFeatures2 : TvkGetPhysicalDeviceFeatures2;
      vkGetPhysicalDeviceFeatures2KHR : TvkGetPhysicalDeviceFeatures2KHR;
      vkGetPhysicalDeviceProperties2 : TvkGetPhysicalDeviceProperties2;
      vkGetPhysicalDeviceProperties2KHR : TvkGetPhysicalDeviceProperties2KHR;
      vkGetPhysicalDeviceFormatProperties2 : TvkGetPhysicalDeviceFormatProperties2;
      vkGetPhysicalDeviceFormatProperties2KHR : TvkGetPhysicalDeviceFormatProperties2KHR;
      vkGetPhysicalDeviceImageFormatProperties2 : TvkGetPhysicalDeviceImageFormatProperties2;
      vkGetPhysicalDeviceImageFormatProperties2KHR : TvkGetPhysicalDeviceImageFormatProperties2KHR;
      vkGetPhysicalDeviceQueueFamilyProperties2 : TvkGetPhysicalDeviceQueueFamilyProperties2;
      vkGetPhysicalDeviceQueueFamilyProperties2KHR : TvkGetPhysicalDeviceQueueFamilyProperties2KHR;
      vkGetPhysicalDeviceMemoryProperties2 : TvkGetPhysicalDeviceMemoryProperties2;
      vkGetPhysicalDeviceMemoryProperties2KHR : TvkGetPhysicalDeviceMemoryProperties2KHR;
      vkGetPhysicalDeviceSparseImageFormatProperties2 : TvkGetPhysicalDeviceSparseImageFormatProperties2;
      vkGetPhysicalDeviceSparseImageFormatProperties2KHR : TvkGetPhysicalDeviceSparseImageFormatProperties2KHR;
      vkCmdPushDescriptorSetKHR : TvkCmdPushDescriptorSetKHR;
      vkTrimCommandPool : TvkTrimCommandPool;
      vkTrimCommandPoolKHR : TvkTrimCommandPoolKHR;
      vkGetPhysicalDeviceExternalBufferProperties : TvkGetPhysicalDeviceExternalBufferProperties;
      vkGetPhysicalDeviceExternalBufferPropertiesKHR : TvkGetPhysicalDeviceExternalBufferPropertiesKHR;
     {$ifdef Windows}
      vkGetMemoryWin32HandleKHR : TvkGetMemoryWin32HandleKHR;
     {$endif}
     {$ifdef Windows}
      vkGetMemoryWin32HandlePropertiesKHR : TvkGetMemoryWin32HandlePropertiesKHR;
     {$endif}
      vkGetMemoryFdKHR : TvkGetMemoryFdKHR;
      vkGetMemoryFdPropertiesKHR : TvkGetMemoryFdPropertiesKHR;
      vkGetPhysicalDeviceExternalSemaphoreProperties : TvkGetPhysicalDeviceExternalSemaphoreProperties;
      vkGetPhysicalDeviceExternalSemaphorePropertiesKHR : TvkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
     {$ifdef Windows}
      vkGetSemaphoreWin32HandleKHR : TvkGetSemaphoreWin32HandleKHR;
     {$endif}
     {$ifdef Windows}
      vkImportSemaphoreWin32HandleKHR : TvkImportSemaphoreWin32HandleKHR;
     {$endif}
      vkGetSemaphoreFdKHR : TvkGetSemaphoreFdKHR;
      vkImportSemaphoreFdKHR : TvkImportSemaphoreFdKHR;
      vkGetPhysicalDeviceExternalFenceProperties : TvkGetPhysicalDeviceExternalFenceProperties;
      vkGetPhysicalDeviceExternalFencePropertiesKHR : TvkGetPhysicalDeviceExternalFencePropertiesKHR;
     {$ifdef Windows}
      vkGetFenceWin32HandleKHR : TvkGetFenceWin32HandleKHR;
     {$endif}
     {$ifdef Windows}
      vkImportFenceWin32HandleKHR : TvkImportFenceWin32HandleKHR;
     {$endif}
      vkGetFenceFdKHR : TvkGetFenceFdKHR;
      vkImportFenceFdKHR : TvkImportFenceFdKHR;
      vkReleaseDisplayEXT : TvkReleaseDisplayEXT;
     {$ifdef XLIB}
      vkAcquireXlibDisplayEXT : TvkAcquireXlibDisplayEXT;
     {$endif}
     {$ifdef RandR}
      vkGetRandROutputDisplayEXT : TvkGetRandROutputDisplayEXT;
     {$endif}
      vkDisplayPowerControlEXT : TvkDisplayPowerControlEXT;
      vkRegisterDeviceEventEXT : TvkRegisterDeviceEventEXT;
      vkRegisterDisplayEventEXT : TvkRegisterDisplayEventEXT;
      vkGetSwapchainCounterEXT : TvkGetSwapchainCounterEXT;
      vkGetPhysicalDeviceSurfaceCapabilities2EXT : TvkGetPhysicalDeviceSurfaceCapabilities2EXT;
      vkEnumeratePhysicalDeviceGroups : TvkEnumeratePhysicalDeviceGroups;
      vkEnumeratePhysicalDeviceGroupsKHR : TvkEnumeratePhysicalDeviceGroupsKHR;
      vkGetDeviceGroupPeerMemoryFeatures : TvkGetDeviceGroupPeerMemoryFeatures;
      vkGetDeviceGroupPeerMemoryFeaturesKHR : TvkGetDeviceGroupPeerMemoryFeaturesKHR;
      vkBindBufferMemory2 : TvkBindBufferMemory2;
      vkBindBufferMemory2KHR : TvkBindBufferMemory2KHR;
      vkBindImageMemory2 : TvkBindImageMemory2;
      vkBindImageMemory2KHR : TvkBindImageMemory2KHR;
      vkCmdSetDeviceMask : TvkCmdSetDeviceMask;
      vkCmdSetDeviceMaskKHR : TvkCmdSetDeviceMaskKHR;
      vkGetDeviceGroupPresentCapabilitiesKHR : TvkGetDeviceGroupPresentCapabilitiesKHR;
      vkGetDeviceGroupSurfacePresentModesKHR : TvkGetDeviceGroupSurfacePresentModesKHR;
      vkAcquireNextImage2KHR : TvkAcquireNextImage2KHR;
      vkCmdDispatchBase : TvkCmdDispatchBase;
      vkCmdDispatchBaseKHR : TvkCmdDispatchBaseKHR;
      vkGetPhysicalDevicePresentRectanglesKHR : TvkGetPhysicalDevicePresentRectanglesKHR;
      vkCreateDescriptorUpdateTemplate : TvkCreateDescriptorUpdateTemplate;
      vkCreateDescriptorUpdateTemplateKHR : TvkCreateDescriptorUpdateTemplateKHR;
      vkDestroyDescriptorUpdateTemplate : TvkDestroyDescriptorUpdateTemplate;
      vkDestroyDescriptorUpdateTemplateKHR : TvkDestroyDescriptorUpdateTemplateKHR;
      vkUpdateDescriptorSetWithTemplate : TvkUpdateDescriptorSetWithTemplate;
      vkUpdateDescriptorSetWithTemplateKHR : TvkUpdateDescriptorSetWithTemplateKHR;
      vkCmdPushDescriptorSetWithTemplateKHR : TvkCmdPushDescriptorSetWithTemplateKHR;
      vkSetHdrMetadataEXT : TvkSetHdrMetadataEXT;
      vkGetSwapchainStatusKHR : TvkGetSwapchainStatusKHR;
      vkGetRefreshCycleDurationGOOGLE : TvkGetRefreshCycleDurationGOOGLE;
      vkGetPastPresentationTimingGOOGLE : TvkGetPastPresentationTimingGOOGLE;
     {$ifdef MoltenVK_IOS}
      vkCreateIOSSurfaceMVK : TvkCreateIOSSurfaceMVK;
     {$endif}
     {$ifdef MoltenVK_MacOS}
      vkCreateMacOSSurfaceMVK : TvkCreateMacOSSurfaceMVK;
     {$endif}
      vkCreateMetalSurfaceEXT : TvkCreateMetalSurfaceEXT;
      vkCmdSetViewportWScalingNV : TvkCmdSetViewportWScalingNV;
      vkCmdSetDiscardRectangleEXT : TvkCmdSetDiscardRectangleEXT;
      vkCmdSetSampleLocationsEXT : TvkCmdSetSampleLocationsEXT;
      vkGetPhysicalDeviceMultisamplePropertiesEXT : TvkGetPhysicalDeviceMultisamplePropertiesEXT;
      vkGetPhysicalDeviceSurfaceCapabilities2KHR : TvkGetPhysicalDeviceSurfaceCapabilities2KHR;
      vkGetPhysicalDeviceSurfaceFormats2KHR : TvkGetPhysicalDeviceSurfaceFormats2KHR;
      vkGetPhysicalDeviceDisplayProperties2KHR : TvkGetPhysicalDeviceDisplayProperties2KHR;
      vkGetPhysicalDeviceDisplayPlaneProperties2KHR : TvkGetPhysicalDeviceDisplayPlaneProperties2KHR;
      vkGetDisplayModeProperties2KHR : TvkGetDisplayModeProperties2KHR;
      vkGetDisplayPlaneCapabilities2KHR : TvkGetDisplayPlaneCapabilities2KHR;
      vkGetBufferMemoryRequirements2 : TvkGetBufferMemoryRequirements2;
      vkGetBufferMemoryRequirements2KHR : TvkGetBufferMemoryRequirements2KHR;
      vkGetImageMemoryRequirements2 : TvkGetImageMemoryRequirements2;
      vkGetImageMemoryRequirements2KHR : TvkGetImageMemoryRequirements2KHR;
      vkGetImageSparseMemoryRequirements2 : TvkGetImageSparseMemoryRequirements2;
      vkGetImageSparseMemoryRequirements2KHR : TvkGetImageSparseMemoryRequirements2KHR;
      vkCreateSamplerYcbcrConversion : TvkCreateSamplerYcbcrConversion;
      vkCreateSamplerYcbcrConversionKHR : TvkCreateSamplerYcbcrConversionKHR;
      vkDestroySamplerYcbcrConversion : TvkDestroySamplerYcbcrConversion;
      vkDestroySamplerYcbcrConversionKHR : TvkDestroySamplerYcbcrConversionKHR;
      vkGetDeviceQueue2 : TvkGetDeviceQueue2;
      vkCreateValidationCacheEXT : TvkCreateValidationCacheEXT;
      vkDestroyValidationCacheEXT : TvkDestroyValidationCacheEXT;
      vkGetValidationCacheDataEXT : TvkGetValidationCacheDataEXT;
      vkMergeValidationCachesEXT : TvkMergeValidationCachesEXT;
      vkGetDescriptorSetLayoutSupport : TvkGetDescriptorSetLayoutSupport;
      vkGetDescriptorSetLayoutSupportKHR : TvkGetDescriptorSetLayoutSupportKHR;
      vkGetSwapchainGrallocUsageANDROID : TvkGetSwapchainGrallocUsageANDROID;
     {$ifdef Android}
      vkGetSwapchainGrallocUsage2ANDROID : TvkGetSwapchainGrallocUsage2ANDROID;
     {$endif}
      vkAcquireImageANDROID : TvkAcquireImageANDROID;
      vkQueueSignalReleaseImageANDROID : TvkQueueSignalReleaseImageANDROID;
      vkGetShaderInfoAMD : TvkGetShaderInfoAMD;
      vkSetLocalDimmingAMD : TvkSetLocalDimmingAMD;
      vkGetPhysicalDeviceCalibrateableTimeDomainsEXT : TvkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
      vkGetCalibratedTimestampsEXT : TvkGetCalibratedTimestampsEXT;
      vkSetDebugUtilsObjectNameEXT : TvkSetDebugUtilsObjectNameEXT;
      vkSetDebugUtilsObjectTagEXT : TvkSetDebugUtilsObjectTagEXT;
      vkQueueBeginDebugUtilsLabelEXT : TvkQueueBeginDebugUtilsLabelEXT;
      vkQueueEndDebugUtilsLabelEXT : TvkQueueEndDebugUtilsLabelEXT;
      vkQueueInsertDebugUtilsLabelEXT : TvkQueueInsertDebugUtilsLabelEXT;
      vkCmdBeginDebugUtilsLabelEXT : TvkCmdBeginDebugUtilsLabelEXT;
      vkCmdEndDebugUtilsLabelEXT : TvkCmdEndDebugUtilsLabelEXT;
      vkCmdInsertDebugUtilsLabelEXT : TvkCmdInsertDebugUtilsLabelEXT;
      vkCreateDebugUtilsMessengerEXT : TvkCreateDebugUtilsMessengerEXT;
      vkDestroyDebugUtilsMessengerEXT : TvkDestroyDebugUtilsMessengerEXT;
      vkSubmitDebugUtilsMessageEXT : TvkSubmitDebugUtilsMessageEXT;
      vkGetMemoryHostPointerPropertiesEXT : TvkGetMemoryHostPointerPropertiesEXT;
      vkCmdWriteBufferMarkerAMD : TvkCmdWriteBufferMarkerAMD;
      vkCreateRenderPass2 : TvkCreateRenderPass2;
      vkCreateRenderPass2KHR : TvkCreateRenderPass2KHR;
      vkCmdBeginRenderPass2 : TvkCmdBeginRenderPass2;
      vkCmdBeginRenderPass2KHR : TvkCmdBeginRenderPass2KHR;
      vkCmdNextSubpass2 : TvkCmdNextSubpass2;
      vkCmdNextSubpass2KHR : TvkCmdNextSubpass2KHR;
      vkCmdEndRenderPass2 : TvkCmdEndRenderPass2;
      vkCmdEndRenderPass2KHR : TvkCmdEndRenderPass2KHR;
      vkGetSemaphoreCounterValue : TvkGetSemaphoreCounterValue;
      vkGetSemaphoreCounterValueKHR : TvkGetSemaphoreCounterValueKHR;
      vkWaitSemaphores : TvkWaitSemaphores;
      vkWaitSemaphoresKHR : TvkWaitSemaphoresKHR;
      vkSignalSemaphore : TvkSignalSemaphore;
      vkSignalSemaphoreKHR : TvkSignalSemaphoreKHR;
     {$ifdef Android}
      vkGetAndroidHardwareBufferPropertiesANDROID : TvkGetAndroidHardwareBufferPropertiesANDROID;
     {$endif}
     {$ifdef Android}
      vkGetMemoryAndroidHardwareBufferANDROID : TvkGetMemoryAndroidHardwareBufferANDROID;
     {$endif}
      vkCmdDrawIndirectCount : TvkCmdDrawIndirectCount;
      vkCmdDrawIndirectCountKHR : TvkCmdDrawIndirectCountKHR;
      vkCmdDrawIndirectCountAMD : TvkCmdDrawIndirectCountAMD;
      vkCmdDrawIndexedIndirectCount : TvkCmdDrawIndexedIndirectCount;
      vkCmdDrawIndexedIndirectCountKHR : TvkCmdDrawIndexedIndirectCountKHR;
      vkCmdDrawIndexedIndirectCountAMD : TvkCmdDrawIndexedIndirectCountAMD;
      vkCmdSetCheckpointNV : TvkCmdSetCheckpointNV;
      vkGetQueueCheckpointDataNV : TvkGetQueueCheckpointDataNV;
      vkCmdBindTransformFeedbackBuffersEXT : TvkCmdBindTransformFeedbackBuffersEXT;
      vkCmdBeginTransformFeedbackEXT : TvkCmdBeginTransformFeedbackEXT;
      vkCmdEndTransformFeedbackEXT : TvkCmdEndTransformFeedbackEXT;
      vkCmdBeginQueryIndexedEXT : TvkCmdBeginQueryIndexedEXT;
      vkCmdEndQueryIndexedEXT : TvkCmdEndQueryIndexedEXT;
      vkCmdDrawIndirectByteCountEXT : TvkCmdDrawIndirectByteCountEXT;
      vkCmdSetExclusiveScissorNV : TvkCmdSetExclusiveScissorNV;
      vkCmdBindShadingRateImageNV : TvkCmdBindShadingRateImageNV;
  end;


//================ Variables ==============================================
Var

    vkCreateInstance:TvkCreateInstance=nil;
    vkDestroyInstance:TvkDestroyInstance=nil;
    vkEnumeratePhysicalDevices:TvkEnumeratePhysicalDevices=nil;
    vkGetDeviceProcAddr:TvkGetDeviceProcAddr=nil;
    vkGetInstanceProcAddr:TvkGetInstanceProcAddr=nil;
    vkGetPhysicalDeviceProperties:TvkGetPhysicalDeviceProperties=nil;
    vkGetPhysicalDeviceQueueFamilyProperties:TvkGetPhysicalDeviceQueueFamilyProperties=nil;
    vkGetPhysicalDeviceMemoryProperties:TvkGetPhysicalDeviceMemoryProperties=nil;
    vkGetPhysicalDeviceFeatures:TvkGetPhysicalDeviceFeatures=nil;
    vkGetPhysicalDeviceFormatProperties:TvkGetPhysicalDeviceFormatProperties=nil;
    vkGetPhysicalDeviceImageFormatProperties:TvkGetPhysicalDeviceImageFormatProperties=nil;
    vkCreateDevice:TvkCreateDevice=nil;
    vkDestroyDevice:TvkDestroyDevice=nil;
    vkEnumerateInstanceVersion:TvkEnumerateInstanceVersion=nil;
    vkEnumerateInstanceLayerProperties:TvkEnumerateInstanceLayerProperties=nil;
    vkEnumerateInstanceExtensionProperties:TvkEnumerateInstanceExtensionProperties=nil;
    vkEnumerateDeviceLayerProperties:TvkEnumerateDeviceLayerProperties=nil;
    vkEnumerateDeviceExtensionProperties:TvkEnumerateDeviceExtensionProperties=nil;
    vkGetDeviceQueue:TvkGetDeviceQueue=nil;
    vkQueueSubmit:TvkQueueSubmit=nil;
    vkQueueWaitIdle:TvkQueueWaitIdle=nil;
    vkDeviceWaitIdle:TvkDeviceWaitIdle=nil;
    vkAllocateMemory:TvkAllocateMemory=nil;
    vkFreeMemory:TvkFreeMemory=nil;
    vkMapMemory:TvkMapMemory=nil;
    vkUnmapMemory:TvkUnmapMemory=nil;
    vkFlushMappedMemoryRanges:TvkFlushMappedMemoryRanges=nil;
    vkInvalidateMappedMemoryRanges:TvkInvalidateMappedMemoryRanges=nil;
    vkGetDeviceMemoryCommitment:TvkGetDeviceMemoryCommitment=nil;
    vkGetBufferMemoryRequirements:TvkGetBufferMemoryRequirements=nil;
    vkBindBufferMemory:TvkBindBufferMemory=nil;
    vkGetImageMemoryRequirements:TvkGetImageMemoryRequirements=nil;
    vkBindImageMemory:TvkBindImageMemory=nil;
    vkGetImageSparseMemoryRequirements:TvkGetImageSparseMemoryRequirements=nil;
    vkGetPhysicalDeviceSparseImageFormatProperties:TvkGetPhysicalDeviceSparseImageFormatProperties=nil;
    vkQueueBindSparse:TvkQueueBindSparse=nil;
    vkCreateFence:TvkCreateFence=nil;
    vkDestroyFence:TvkDestroyFence=nil;
    vkResetFences:TvkResetFences=nil;
    vkGetFenceStatus:TvkGetFenceStatus=nil;
    vkWaitForFences:TvkWaitForFences=nil;
    vkCreateSemaphore:TvkCreateSemaphore=nil;
    vkDestroySemaphore:TvkDestroySemaphore=nil;
    vkCreateEvent:TvkCreateEvent=nil;
    vkDestroyEvent:TvkDestroyEvent=nil;
    vkGetEventStatus:TvkGetEventStatus=nil;
    vkSetEvent:TvkSetEvent=nil;
    vkResetEvent:TvkResetEvent=nil;
    vkCreateQueryPool:TvkCreateQueryPool=nil;
    vkDestroyQueryPool:TvkDestroyQueryPool=nil;
    vkGetQueryPoolResults:TvkGetQueryPoolResults=nil;
    vkResetQueryPool:TvkResetQueryPool=nil;
    vkResetQueryPoolEXT:TvkResetQueryPoolEXT=nil;
    vkCreateBuffer:TvkCreateBuffer=nil;
    vkDestroyBuffer:TvkDestroyBuffer=nil;
    vkCreateBufferView:TvkCreateBufferView=nil;
    vkDestroyBufferView:TvkDestroyBufferView=nil;
    vkCreateImage:TvkCreateImage=nil;
    vkDestroyImage:TvkDestroyImage=nil;
    vkGetImageSubresourceLayout:TvkGetImageSubresourceLayout=nil;
    vkCreateImageView:TvkCreateImageView=nil;
    vkDestroyImageView:TvkDestroyImageView=nil;
    vkCreateShaderModule:TvkCreateShaderModule=nil;
    vkDestroyShaderModule:TvkDestroyShaderModule=nil;
    vkCreatePipelineCache:TvkCreatePipelineCache=nil;
    vkDestroyPipelineCache:TvkDestroyPipelineCache=nil;
    vkGetPipelineCacheData:TvkGetPipelineCacheData=nil;
    vkMergePipelineCaches:TvkMergePipelineCaches=nil;
    vkCreateGraphicsPipelines:TvkCreateGraphicsPipelines=nil;
    vkCreateComputePipelines:TvkCreateComputePipelines=nil;
    vkDestroyPipeline:TvkDestroyPipeline=nil;
    vkCreatePipelineLayout:TvkCreatePipelineLayout=nil;
    vkDestroyPipelineLayout:TvkDestroyPipelineLayout=nil;
    vkCreateSampler:TvkCreateSampler=nil;
    vkDestroySampler:TvkDestroySampler=nil;
    vkCreateDescriptorSetLayout:TvkCreateDescriptorSetLayout=nil;
    vkDestroyDescriptorSetLayout:TvkDestroyDescriptorSetLayout=nil;
    vkCreateDescriptorPool:TvkCreateDescriptorPool=nil;
    vkDestroyDescriptorPool:TvkDestroyDescriptorPool=nil;
    vkResetDescriptorPool:TvkResetDescriptorPool=nil;
    vkAllocateDescriptorSets:TvkAllocateDescriptorSets=nil;
    vkFreeDescriptorSets:TvkFreeDescriptorSets=nil;
    vkUpdateDescriptorSets:TvkUpdateDescriptorSets=nil;
    vkCreateFramebuffer:TvkCreateFramebuffer=nil;
    vkDestroyFramebuffer:TvkDestroyFramebuffer=nil;
    vkCreateRenderPass:TvkCreateRenderPass=nil;
    vkDestroyRenderPass:TvkDestroyRenderPass=nil;
    vkGetRenderAreaGranularity:TvkGetRenderAreaGranularity=nil;
    vkCreateCommandPool:TvkCreateCommandPool=nil;
    vkDestroyCommandPool:TvkDestroyCommandPool=nil;
    vkResetCommandPool:TvkResetCommandPool=nil;
    vkAllocateCommandBuffers:TvkAllocateCommandBuffers=nil;
    vkFreeCommandBuffers:TvkFreeCommandBuffers=nil;
    vkBeginCommandBuffer:TvkBeginCommandBuffer=nil;
    vkEndCommandBuffer:TvkEndCommandBuffer=nil;
    vkResetCommandBuffer:TvkResetCommandBuffer=nil;
    vkCmdBindPipeline:TvkCmdBindPipeline=nil;
    vkCmdSetViewport:TvkCmdSetViewport=nil;
    vkCmdSetScissor:TvkCmdSetScissor=nil;
    vkCmdSetLineWidth:TvkCmdSetLineWidth=nil;
    vkCmdSetDepthBias:TvkCmdSetDepthBias=nil;
    vkCmdSetBlendConstants:TvkCmdSetBlendConstants=nil;
    vkCmdSetDepthBounds:TvkCmdSetDepthBounds=nil;
    vkCmdSetStencilCompareMask:TvkCmdSetStencilCompareMask=nil;
    vkCmdSetStencilWriteMask:TvkCmdSetStencilWriteMask=nil;
    vkCmdSetStencilReference:TvkCmdSetStencilReference=nil;
    vkCmdBindDescriptorSets:TvkCmdBindDescriptorSets=nil;
    vkCmdBindIndexBuffer:TvkCmdBindIndexBuffer=nil;
    vkCmdBindVertexBuffers:TvkCmdBindVertexBuffers=nil;
    vkCmdDraw:TvkCmdDraw=nil;
    vkCmdDrawIndexed:TvkCmdDrawIndexed=nil;
    vkCmdDrawIndirect:TvkCmdDrawIndirect=nil;
    vkCmdDrawIndexedIndirect:TvkCmdDrawIndexedIndirect=nil;
    vkCmdDispatch:TvkCmdDispatch=nil;
    vkCmdDispatchIndirect:TvkCmdDispatchIndirect=nil;
    vkCmdCopyBuffer:TvkCmdCopyBuffer=nil;
    vkCmdCopyImage:TvkCmdCopyImage=nil;
    vkCmdBlitImage:TvkCmdBlitImage=nil;
    vkCmdCopyBufferToImage:TvkCmdCopyBufferToImage=nil;
    vkCmdCopyImageToBuffer:TvkCmdCopyImageToBuffer=nil;
    vkCmdUpdateBuffer:TvkCmdUpdateBuffer=nil;
    vkCmdFillBuffer:TvkCmdFillBuffer=nil;
    vkCmdClearColorImage:TvkCmdClearColorImage=nil;
    vkCmdClearDepthStencilImage:TvkCmdClearDepthStencilImage=nil;
    vkCmdClearAttachments:TvkCmdClearAttachments=nil;
    vkCmdResolveImage:TvkCmdResolveImage=nil;
    vkCmdSetEvent:TvkCmdSetEvent=nil;
    vkCmdResetEvent:TvkCmdResetEvent=nil;
    vkCmdWaitEvents:TvkCmdWaitEvents=nil;
    vkCmdPipelineBarrier:TvkCmdPipelineBarrier=nil;
    vkCmdBeginQuery:TvkCmdBeginQuery=nil;
    vkCmdEndQuery:TvkCmdEndQuery=nil;
    vkCmdBeginConditionalRenderingEXT:TvkCmdBeginConditionalRenderingEXT=nil;
    vkCmdEndConditionalRenderingEXT:TvkCmdEndConditionalRenderingEXT=nil;
    vkCmdResetQueryPool:TvkCmdResetQueryPool=nil;
    vkCmdWriteTimestamp:TvkCmdWriteTimestamp=nil;
    vkCmdCopyQueryPoolResults:TvkCmdCopyQueryPoolResults=nil;
    vkCmdPushConstants:TvkCmdPushConstants=nil;
    vkCmdBeginRenderPass:TvkCmdBeginRenderPass=nil;
    vkCmdNextSubpass:TvkCmdNextSubpass=nil;
    vkCmdEndRenderPass:TvkCmdEndRenderPass=nil;
    vkCmdExecuteCommands:TvkCmdExecuteCommands=nil;
{$ifdef Android}
    vkCreateAndroidSurfaceKHR:TvkCreateAndroidSurfaceKHR=nil;
{$endif}
    vkGetPhysicalDeviceDisplayPropertiesKHR:TvkGetPhysicalDeviceDisplayPropertiesKHR=nil;
    vkGetPhysicalDeviceDisplayPlanePropertiesKHR:TvkGetPhysicalDeviceDisplayPlanePropertiesKHR=nil;
    vkGetDisplayPlaneSupportedDisplaysKHR:TvkGetDisplayPlaneSupportedDisplaysKHR=nil;
    vkGetDisplayModePropertiesKHR:TvkGetDisplayModePropertiesKHR=nil;
    vkCreateDisplayModeKHR:TvkCreateDisplayModeKHR=nil;
    vkGetDisplayPlaneCapabilitiesKHR:TvkGetDisplayPlaneCapabilitiesKHR=nil;
    vkCreateDisplayPlaneSurfaceKHR:TvkCreateDisplayPlaneSurfaceKHR=nil;
    vkCreateSharedSwapchainsKHR:TvkCreateSharedSwapchainsKHR=nil;
    vkDestroySurfaceKHR:TvkDestroySurfaceKHR=nil;
    vkGetPhysicalDeviceSurfaceSupportKHR:TvkGetPhysicalDeviceSurfaceSupportKHR=nil;
    vkGetPhysicalDeviceSurfaceCapabilitiesKHR:TvkGetPhysicalDeviceSurfaceCapabilitiesKHR=nil;
    vkGetPhysicalDeviceSurfaceFormatsKHR:TvkGetPhysicalDeviceSurfaceFormatsKHR=nil;
    vkGetPhysicalDeviceSurfacePresentModesKHR:TvkGetPhysicalDeviceSurfacePresentModesKHR=nil;
    vkCreateSwapchainKHR:TvkCreateSwapchainKHR=nil;
    vkDestroySwapchainKHR:TvkDestroySwapchainKHR=nil;
    vkGetSwapchainImagesKHR:TvkGetSwapchainImagesKHR=nil;
    vkAcquireNextImageKHR:TvkAcquireNextImageKHR=nil;
    vkQueuePresentKHR:TvkQueuePresentKHR=nil;
    vkCreateViSurfaceNN:TvkCreateViSurfaceNN=nil;
{$ifdef Wayland}
    vkCreateWaylandSurfaceKHR:TvkCreateWaylandSurfaceKHR=nil;
{$endif}
{$ifdef Wayland}
    vkGetPhysicalDeviceWaylandPresentationSupportKHR:TvkGetPhysicalDeviceWaylandPresentationSupportKHR=nil;
{$endif}
{$ifdef Windows}
    vkCreateWin32SurfaceKHR:TvkCreateWin32SurfaceKHR=nil;
{$endif}
{$ifdef Windows}
    vkGetPhysicalDeviceWin32PresentationSupportKHR:TvkGetPhysicalDeviceWin32PresentationSupportKHR=nil;
{$endif}
{$ifdef XLIB}
    vkCreateXlibSurfaceKHR:TvkCreateXlibSurfaceKHR=nil;
{$endif}
{$ifdef XLIB}
    vkGetPhysicalDeviceXlibPresentationSupportKHR:TvkGetPhysicalDeviceXlibPresentationSupportKHR=nil;
{$endif}
{$ifdef XCB}
    vkCreateXcbSurfaceKHR:TvkCreateXcbSurfaceKHR=nil;
{$endif}
{$ifdef XCB}
    vkGetPhysicalDeviceXcbPresentationSupportKHR:TvkGetPhysicalDeviceXcbPresentationSupportKHR=nil;
{$endif}
    vkCreateDirectFBSurfaceEXT:TvkCreateDirectFBSurfaceEXT=nil;
    vkGetPhysicalDeviceDirectFBPresentationSupportEXT:TvkGetPhysicalDeviceDirectFBPresentationSupportEXT=nil;
    vkCreateImagePipeSurfaceFUCHSIA:TvkCreateImagePipeSurfaceFUCHSIA=nil;
    vkCreateStreamDescriptorSurfaceGGP:TvkCreateStreamDescriptorSurfaceGGP=nil;
    vkCreateDebugReportCallbackEXT:TvkCreateDebugReportCallbackEXT=nil;
    vkDestroyDebugReportCallbackEXT:TvkDestroyDebugReportCallbackEXT=nil;
    vkDebugReportMessageEXT:TvkDebugReportMessageEXT=nil;
    vkDebugMarkerSetObjectNameEXT:TvkDebugMarkerSetObjectNameEXT=nil;
    vkDebugMarkerSetObjectTagEXT:TvkDebugMarkerSetObjectTagEXT=nil;
    vkCmdDebugMarkerBeginEXT:TvkCmdDebugMarkerBeginEXT=nil;
    vkCmdDebugMarkerEndEXT:TvkCmdDebugMarkerEndEXT=nil;
    vkCmdDebugMarkerInsertEXT:TvkCmdDebugMarkerInsertEXT=nil;
    vkGetPhysicalDeviceExternalImageFormatPropertiesNV:TvkGetPhysicalDeviceExternalImageFormatPropertiesNV=nil;
{$ifdef Windows}
    vkGetMemoryWin32HandleNV:TvkGetMemoryWin32HandleNV=nil;
{$endif}
    vkCmdExecuteGeneratedCommandsNV:TvkCmdExecuteGeneratedCommandsNV=nil;
    vkCmdPreprocessGeneratedCommandsNV:TvkCmdPreprocessGeneratedCommandsNV=nil;
    vkCmdBindPipelineShaderGroupNV:TvkCmdBindPipelineShaderGroupNV=nil;
    vkGetGeneratedCommandsMemoryRequirementsNV:TvkGetGeneratedCommandsMemoryRequirementsNV=nil;
    vkCreateIndirectCommandsLayoutNV:TvkCreateIndirectCommandsLayoutNV=nil;
    vkDestroyIndirectCommandsLayoutNV:TvkDestroyIndirectCommandsLayoutNV=nil;
    vkGetPhysicalDeviceFeatures2:TvkGetPhysicalDeviceFeatures2=nil;
    vkGetPhysicalDeviceFeatures2KHR:TvkGetPhysicalDeviceFeatures2KHR=nil;
    vkGetPhysicalDeviceProperties2:TvkGetPhysicalDeviceProperties2=nil;
    vkGetPhysicalDeviceProperties2KHR:TvkGetPhysicalDeviceProperties2KHR=nil;
    vkGetPhysicalDeviceFormatProperties2:TvkGetPhysicalDeviceFormatProperties2=nil;
    vkGetPhysicalDeviceFormatProperties2KHR:TvkGetPhysicalDeviceFormatProperties2KHR=nil;
    vkGetPhysicalDeviceImageFormatProperties2:TvkGetPhysicalDeviceImageFormatProperties2=nil;
    vkGetPhysicalDeviceImageFormatProperties2KHR:TvkGetPhysicalDeviceImageFormatProperties2KHR=nil;
    vkGetPhysicalDeviceQueueFamilyProperties2:TvkGetPhysicalDeviceQueueFamilyProperties2=nil;
    vkGetPhysicalDeviceQueueFamilyProperties2KHR:TvkGetPhysicalDeviceQueueFamilyProperties2KHR=nil;
    vkGetPhysicalDeviceMemoryProperties2:TvkGetPhysicalDeviceMemoryProperties2=nil;
    vkGetPhysicalDeviceMemoryProperties2KHR:TvkGetPhysicalDeviceMemoryProperties2KHR=nil;
    vkGetPhysicalDeviceSparseImageFormatProperties2:TvkGetPhysicalDeviceSparseImageFormatProperties2=nil;
    vkGetPhysicalDeviceSparseImageFormatProperties2KHR:TvkGetPhysicalDeviceSparseImageFormatProperties2KHR=nil;
    vkCmdPushDescriptorSetKHR:TvkCmdPushDescriptorSetKHR=nil;
    vkTrimCommandPool:TvkTrimCommandPool=nil;
    vkTrimCommandPoolKHR:TvkTrimCommandPoolKHR=nil;
    vkGetPhysicalDeviceExternalBufferProperties:TvkGetPhysicalDeviceExternalBufferProperties=nil;
    vkGetPhysicalDeviceExternalBufferPropertiesKHR:TvkGetPhysicalDeviceExternalBufferPropertiesKHR=nil;
{$ifdef Windows}
    vkGetMemoryWin32HandleKHR:TvkGetMemoryWin32HandleKHR=nil;
{$endif}
{$ifdef Windows}
    vkGetMemoryWin32HandlePropertiesKHR:TvkGetMemoryWin32HandlePropertiesKHR=nil;
{$endif}
    vkGetMemoryFdKHR:TvkGetMemoryFdKHR=nil;
    vkGetMemoryFdPropertiesKHR:TvkGetMemoryFdPropertiesKHR=nil;
    vkGetPhysicalDeviceExternalSemaphoreProperties:TvkGetPhysicalDeviceExternalSemaphoreProperties=nil;
    vkGetPhysicalDeviceExternalSemaphorePropertiesKHR:TvkGetPhysicalDeviceExternalSemaphorePropertiesKHR=nil;
{$ifdef Windows}
    vkGetSemaphoreWin32HandleKHR:TvkGetSemaphoreWin32HandleKHR=nil;
{$endif}
{$ifdef Windows}
    vkImportSemaphoreWin32HandleKHR:TvkImportSemaphoreWin32HandleKHR=nil;
{$endif}
    vkGetSemaphoreFdKHR:TvkGetSemaphoreFdKHR=nil;
    vkImportSemaphoreFdKHR:TvkImportSemaphoreFdKHR=nil;
    vkGetPhysicalDeviceExternalFenceProperties:TvkGetPhysicalDeviceExternalFenceProperties=nil;
    vkGetPhysicalDeviceExternalFencePropertiesKHR:TvkGetPhysicalDeviceExternalFencePropertiesKHR=nil;
{$ifdef Windows}
    vkGetFenceWin32HandleKHR:TvkGetFenceWin32HandleKHR=nil;
{$endif}
{$ifdef Windows}
    vkImportFenceWin32HandleKHR:TvkImportFenceWin32HandleKHR=nil;
{$endif}
    vkGetFenceFdKHR:TvkGetFenceFdKHR=nil;
    vkImportFenceFdKHR:TvkImportFenceFdKHR=nil;
    vkReleaseDisplayEXT:TvkReleaseDisplayEXT=nil;
{$ifdef XLIB}
    vkAcquireXlibDisplayEXT:TvkAcquireXlibDisplayEXT=nil;
{$endif}
{$ifdef RandR}
    vkGetRandROutputDisplayEXT:TvkGetRandROutputDisplayEXT=nil;
{$endif}
    vkDisplayPowerControlEXT:TvkDisplayPowerControlEXT=nil;
    vkRegisterDeviceEventEXT:TvkRegisterDeviceEventEXT=nil;
    vkRegisterDisplayEventEXT:TvkRegisterDisplayEventEXT=nil;
    vkGetSwapchainCounterEXT:TvkGetSwapchainCounterEXT=nil;
    vkGetPhysicalDeviceSurfaceCapabilities2EXT:TvkGetPhysicalDeviceSurfaceCapabilities2EXT=nil;
    vkEnumeratePhysicalDeviceGroups:TvkEnumeratePhysicalDeviceGroups=nil;
    vkEnumeratePhysicalDeviceGroupsKHR:TvkEnumeratePhysicalDeviceGroupsKHR=nil;
    vkGetDeviceGroupPeerMemoryFeatures:TvkGetDeviceGroupPeerMemoryFeatures=nil;
    vkGetDeviceGroupPeerMemoryFeaturesKHR:TvkGetDeviceGroupPeerMemoryFeaturesKHR=nil;
    vkBindBufferMemory2:TvkBindBufferMemory2=nil;
    vkBindBufferMemory2KHR:TvkBindBufferMemory2KHR=nil;
    vkBindImageMemory2:TvkBindImageMemory2=nil;
    vkBindImageMemory2KHR:TvkBindImageMemory2KHR=nil;
    vkCmdSetDeviceMask:TvkCmdSetDeviceMask=nil;
    vkCmdSetDeviceMaskKHR:TvkCmdSetDeviceMaskKHR=nil;
    vkGetDeviceGroupPresentCapabilitiesKHR:TvkGetDeviceGroupPresentCapabilitiesKHR=nil;
    vkGetDeviceGroupSurfacePresentModesKHR:TvkGetDeviceGroupSurfacePresentModesKHR=nil;
    vkAcquireNextImage2KHR:TvkAcquireNextImage2KHR=nil;
    vkCmdDispatchBase:TvkCmdDispatchBase=nil;
    vkCmdDispatchBaseKHR:TvkCmdDispatchBaseKHR=nil;
    vkGetPhysicalDevicePresentRectanglesKHR:TvkGetPhysicalDevicePresentRectanglesKHR=nil;
    vkCreateDescriptorUpdateTemplate:TvkCreateDescriptorUpdateTemplate=nil;
    vkCreateDescriptorUpdateTemplateKHR:TvkCreateDescriptorUpdateTemplateKHR=nil;
    vkDestroyDescriptorUpdateTemplate:TvkDestroyDescriptorUpdateTemplate=nil;
    vkDestroyDescriptorUpdateTemplateKHR:TvkDestroyDescriptorUpdateTemplateKHR=nil;
    vkUpdateDescriptorSetWithTemplate:TvkUpdateDescriptorSetWithTemplate=nil;
    vkUpdateDescriptorSetWithTemplateKHR:TvkUpdateDescriptorSetWithTemplateKHR=nil;
    vkCmdPushDescriptorSetWithTemplateKHR:TvkCmdPushDescriptorSetWithTemplateKHR=nil;
    vkSetHdrMetadataEXT:TvkSetHdrMetadataEXT=nil;
    vkGetSwapchainStatusKHR:TvkGetSwapchainStatusKHR=nil;
    vkGetRefreshCycleDurationGOOGLE:TvkGetRefreshCycleDurationGOOGLE=nil;
    vkGetPastPresentationTimingGOOGLE:TvkGetPastPresentationTimingGOOGLE=nil;
{$ifdef MoltenVK_IOS}
    vkCreateIOSSurfaceMVK:TvkCreateIOSSurfaceMVK=nil;
{$endif}
{$ifdef MoltenVK_MacOS}
    vkCreateMacOSSurfaceMVK:TvkCreateMacOSSurfaceMVK=nil;
{$endif}
    vkCreateMetalSurfaceEXT:TvkCreateMetalSurfaceEXT=nil;
    vkCmdSetViewportWScalingNV:TvkCmdSetViewportWScalingNV=nil;
    vkCmdSetDiscardRectangleEXT:TvkCmdSetDiscardRectangleEXT=nil;
    vkCmdSetSampleLocationsEXT:TvkCmdSetSampleLocationsEXT=nil;
    vkGetPhysicalDeviceMultisamplePropertiesEXT:TvkGetPhysicalDeviceMultisamplePropertiesEXT=nil;
    vkGetPhysicalDeviceSurfaceCapabilities2KHR:TvkGetPhysicalDeviceSurfaceCapabilities2KHR=nil;
    vkGetPhysicalDeviceSurfaceFormats2KHR:TvkGetPhysicalDeviceSurfaceFormats2KHR=nil;
    vkGetPhysicalDeviceDisplayProperties2KHR:TvkGetPhysicalDeviceDisplayProperties2KHR=nil;
    vkGetPhysicalDeviceDisplayPlaneProperties2KHR:TvkGetPhysicalDeviceDisplayPlaneProperties2KHR=nil;
    vkGetDisplayModeProperties2KHR:TvkGetDisplayModeProperties2KHR=nil;
    vkGetDisplayPlaneCapabilities2KHR:TvkGetDisplayPlaneCapabilities2KHR=nil;
    vkGetBufferMemoryRequirements2:TvkGetBufferMemoryRequirements2=nil;
    vkGetBufferMemoryRequirements2KHR:TvkGetBufferMemoryRequirements2KHR=nil;
    vkGetImageMemoryRequirements2:TvkGetImageMemoryRequirements2=nil;
    vkGetImageMemoryRequirements2KHR:TvkGetImageMemoryRequirements2KHR=nil;
    vkGetImageSparseMemoryRequirements2:TvkGetImageSparseMemoryRequirements2=nil;
    vkGetImageSparseMemoryRequirements2KHR:TvkGetImageSparseMemoryRequirements2KHR=nil;
    vkCreateSamplerYcbcrConversion:TvkCreateSamplerYcbcrConversion=nil;
    vkCreateSamplerYcbcrConversionKHR:TvkCreateSamplerYcbcrConversionKHR=nil;
    vkDestroySamplerYcbcrConversion:TvkDestroySamplerYcbcrConversion=nil;
    vkDestroySamplerYcbcrConversionKHR:TvkDestroySamplerYcbcrConversionKHR=nil;
    vkGetDeviceQueue2:TvkGetDeviceQueue2=nil;
    vkCreateValidationCacheEXT:TvkCreateValidationCacheEXT=nil;
    vkDestroyValidationCacheEXT:TvkDestroyValidationCacheEXT=nil;
    vkGetValidationCacheDataEXT:TvkGetValidationCacheDataEXT=nil;
    vkMergeValidationCachesEXT:TvkMergeValidationCachesEXT=nil;
    vkGetDescriptorSetLayoutSupport:TvkGetDescriptorSetLayoutSupport=nil;
    vkGetDescriptorSetLayoutSupportKHR:TvkGetDescriptorSetLayoutSupportKHR=nil;
    vkGetSwapchainGrallocUsageANDROID:TvkGetSwapchainGrallocUsageANDROID=nil;
{$ifdef Android}
    vkGetSwapchainGrallocUsage2ANDROID:TvkGetSwapchainGrallocUsage2ANDROID=nil;
{$endif}
    vkAcquireImageANDROID:TvkAcquireImageANDROID=nil;
    vkQueueSignalReleaseImageANDROID:TvkQueueSignalReleaseImageANDROID=nil;
    vkGetShaderInfoAMD:TvkGetShaderInfoAMD=nil;
    vkSetLocalDimmingAMD:TvkSetLocalDimmingAMD=nil;
    vkGetPhysicalDeviceCalibrateableTimeDomainsEXT:TvkGetPhysicalDeviceCalibrateableTimeDomainsEXT=nil;
    vkGetCalibratedTimestampsEXT:TvkGetCalibratedTimestampsEXT=nil;
    vkSetDebugUtilsObjectNameEXT:TvkSetDebugUtilsObjectNameEXT=nil;
    vkSetDebugUtilsObjectTagEXT:TvkSetDebugUtilsObjectTagEXT=nil;
    vkQueueBeginDebugUtilsLabelEXT:TvkQueueBeginDebugUtilsLabelEXT=nil;
    vkQueueEndDebugUtilsLabelEXT:TvkQueueEndDebugUtilsLabelEXT=nil;
    vkQueueInsertDebugUtilsLabelEXT:TvkQueueInsertDebugUtilsLabelEXT=nil;
    vkCmdBeginDebugUtilsLabelEXT:TvkCmdBeginDebugUtilsLabelEXT=nil;
    vkCmdEndDebugUtilsLabelEXT:TvkCmdEndDebugUtilsLabelEXT=nil;
    vkCmdInsertDebugUtilsLabelEXT:TvkCmdInsertDebugUtilsLabelEXT=nil;
    vkCreateDebugUtilsMessengerEXT:TvkCreateDebugUtilsMessengerEXT=nil;
    vkDestroyDebugUtilsMessengerEXT:TvkDestroyDebugUtilsMessengerEXT=nil;
    vkSubmitDebugUtilsMessageEXT:TvkSubmitDebugUtilsMessageEXT=nil;
    vkGetMemoryHostPointerPropertiesEXT:TvkGetMemoryHostPointerPropertiesEXT=nil;
    vkCmdWriteBufferMarkerAMD:TvkCmdWriteBufferMarkerAMD=nil;
    vkCreateRenderPass2:TvkCreateRenderPass2=nil;
    vkCreateRenderPass2KHR:TvkCreateRenderPass2KHR=nil;
    vkCmdBeginRenderPass2:TvkCmdBeginRenderPass2=nil;
    vkCmdBeginRenderPass2KHR:TvkCmdBeginRenderPass2KHR=nil;
    vkCmdNextSubpass2:TvkCmdNextSubpass2=nil;
    vkCmdNextSubpass2KHR:TvkCmdNextSubpass2KHR=nil;
    vkCmdEndRenderPass2:TvkCmdEndRenderPass2=nil;
    vkCmdEndRenderPass2KHR:TvkCmdEndRenderPass2KHR=nil;
    vkGetSemaphoreCounterValue:TvkGetSemaphoreCounterValue=nil;
    vkGetSemaphoreCounterValueKHR:TvkGetSemaphoreCounterValueKHR=nil;
    vkWaitSemaphores:TvkWaitSemaphores=nil;
    vkWaitSemaphoresKHR:TvkWaitSemaphoresKHR=nil;
    vkSignalSemaphore:TvkSignalSemaphore=nil;
    vkSignalSemaphoreKHR:TvkSignalSemaphoreKHR=nil;
{$ifdef Android}
    vkGetAndroidHardwareBufferPropertiesANDROID:TvkGetAndroidHardwareBufferPropertiesANDROID=nil;
{$endif}
{$ifdef Android}
    vkGetMemoryAndroidHardwareBufferANDROID:TvkGetMemoryAndroidHardwareBufferANDROID=nil;
{$endif}
    vkCmdDrawIndirectCount:TvkCmdDrawIndirectCount=nil;
    vkCmdDrawIndirectCountKHR:TvkCmdDrawIndirectCountKHR=nil;
    vkCmdDrawIndirectCountAMD:TvkCmdDrawIndirectCountAMD=nil;
    vkCmdDrawIndexedIndirectCount:TvkCmdDrawIndexedIndirectCount=nil;
    vkCmdDrawIndexedIndirectCountKHR:TvkCmdDrawIndexedIndirectCountKHR=nil;
    vkCmdDrawIndexedIndirectCountAMD:TvkCmdDrawIndexedIndirectCountAMD=nil;
    vkCmdSetCheckpointNV:TvkCmdSetCheckpointNV=nil;
    vkGetQueueCheckpointDataNV:TvkGetQueueCheckpointDataNV=nil;
    vkCmdBindTransformFeedbackBuffersEXT:TvkCmdBindTransformFeedbackBuffersEXT=nil;
    vkCmdBeginTransformFeedbackEXT:TvkCmdBeginTransformFeedbackEXT=nil;
    vkCmdEndTransformFeedbackEXT:TvkCmdEndTransformFeedbackEXT=nil;
    vkCmdBeginQueryIndexedEXT:TvkCmdBeginQueryIndexedEXT=nil;
    vkCmdEndQueryIndexedEXT:TvkCmdEndQueryIndexedEXT=nil;
    vkCmdDrawIndirectByteCountEXT:TvkCmdDrawIndirectByteCountEXT=nil;
    vkCmdSetExclusiveScissorNV:TvkCmdSetExclusiveScissorNV=nil;
    vkCmdBindShadingRateImageNV:TvkCmdBindShadingRateImageNV=nil;
    vkCmdSetViewportShadingRatePaletteNV:TvkCmdSetViewportShadingRatePaletteNV=nil;
    vkCmdSetCoarseSampleOrderNV:TvkCmdSetCoarseSampleOrderNV=nil;
    vkCmdDrawMeshTasksNV:TvkCmdDrawMeshTasksNV=nil;
    vkCmdDrawMeshTasksIndirectNV:TvkCmdDrawMeshTasksIndirectNV=nil;
    vkCmdDrawMeshTasksIndirectCountNV:TvkCmdDrawMeshTasksIndirectCountNV=nil;
    vkCompileDeferredNV:TvkCompileDeferredNV=nil;
    vkCreateAccelerationStructureNV:TvkCreateAccelerationStructureNV=nil;
    vkDestroyAccelerationStructureKHR:TvkDestroyAccelerationStructureKHR=nil;
    vkDestroyAccelerationStructureNV:TvkDestroyAccelerationStructureNV=nil;
    vkGetAccelerationStructureMemoryRequirementsKHR:TvkGetAccelerationStructureMemoryRequirementsKHR=nil;
    vkGetAccelerationStructureMemoryRequirementsNV:TvkGetAccelerationStructureMemoryRequirementsNV=nil;
    vkBindAccelerationStructureMemoryKHR:TvkBindAccelerationStructureMemoryKHR=nil;
    vkBindAccelerationStructureMemoryNV:TvkBindAccelerationStructureMemoryNV=nil;
    vkCmdCopyAccelerationStructureNV:TvkCmdCopyAccelerationStructureNV=nil;
    vkCmdCopyAccelerationStructureKHR:TvkCmdCopyAccelerationStructureKHR=nil;
    vkCopyAccelerationStructureKHR:TvkCopyAccelerationStructureKHR=nil;
    vkCmdCopyAccelerationStructureToMemoryKHR:TvkCmdCopyAccelerationStructureToMemoryKHR=nil;
    vkCopyAccelerationStructureToMemoryKHR:TvkCopyAccelerationStructureToMemoryKHR=nil;
    vkCmdCopyMemoryToAccelerationStructureKHR:TvkCmdCopyMemoryToAccelerationStructureKHR=nil;
    vkCopyMemoryToAccelerationStructureKHR:TvkCopyMemoryToAccelerationStructureKHR=nil;
    vkCmdWriteAccelerationStructuresPropertiesKHR:TvkCmdWriteAccelerationStructuresPropertiesKHR=nil;
    vkCmdWriteAccelerationStructuresPropertiesNV:TvkCmdWriteAccelerationStructuresPropertiesNV=nil;
    vkCmdBuildAccelerationStructureNV:TvkCmdBuildAccelerationStructureNV=nil;
    vkWriteAccelerationStructuresPropertiesKHR:TvkWriteAccelerationStructuresPropertiesKHR=nil;
    vkCmdTraceRaysKHR:TvkCmdTraceRaysKHR=nil;
    vkCmdTraceRaysNV:TvkCmdTraceRaysNV=nil;
    vkGetRayTracingShaderGroupHandlesKHR:TvkGetRayTracingShaderGroupHandlesKHR=nil;
    vkGetRayTracingShaderGroupHandlesNV:TvkGetRayTracingShaderGroupHandlesNV=nil;
    vkGetRayTracingCaptureReplayShaderGroupHandlesKHR:TvkGetRayTracingCaptureReplayShaderGroupHandlesKHR=nil;
    vkGetAccelerationStructureHandleNV:TvkGetAccelerationStructureHandleNV=nil;
    vkCreateRayTracingPipelinesNV:TvkCreateRayTracingPipelinesNV=nil;
    vkCreateRayTracingPipelinesKHR:TvkCreateRayTracingPipelinesKHR=nil;
    vkGetPhysicalDeviceCooperativeMatrixPropertiesNV:TvkGetPhysicalDeviceCooperativeMatrixPropertiesNV=nil;
    vkCmdTraceRaysIndirectKHR:TvkCmdTraceRaysIndirectKHR=nil;
    vkGetDeviceAccelerationStructureCompatibilityKHR:TvkGetDeviceAccelerationStructureCompatibilityKHR=nil;
    vkGetImageViewHandleNVX:TvkGetImageViewHandleNVX=nil;
    vkGetImageViewAddressNVX:TvkGetImageViewAddressNVX=nil;
    vkGetPhysicalDeviceSurfacePresentModes2EXT:TvkGetPhysicalDeviceSurfacePresentModes2EXT=nil;
    vkGetDeviceGroupSurfacePresentModes2EXT:TvkGetDeviceGroupSurfacePresentModes2EXT=nil;
    vkAcquireFullScreenExclusiveModeEXT:TvkAcquireFullScreenExclusiveModeEXT=nil;
    vkReleaseFullScreenExclusiveModeEXT:TvkReleaseFullScreenExclusiveModeEXT=nil;
    vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR:TvkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR=nil;
    vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR:TvkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR=nil;
    vkAcquireProfilingLockKHR:TvkAcquireProfilingLockKHR=nil;
    vkReleaseProfilingLockKHR:TvkReleaseProfilingLockKHR=nil;
    vkGetImageDrmFormatModifierPropertiesEXT:TvkGetImageDrmFormatModifierPropertiesEXT=nil;
    vkGetBufferOpaqueCaptureAddress:TvkGetBufferOpaqueCaptureAddress=nil;
    vkGetBufferOpaqueCaptureAddressKHR:TvkGetBufferOpaqueCaptureAddressKHR=nil;
    vkGetBufferDeviceAddress:TvkGetBufferDeviceAddress=nil;
    vkGetBufferDeviceAddressKHR:TvkGetBufferDeviceAddressKHR=nil;
    vkGetBufferDeviceAddressEXT:TvkGetBufferDeviceAddressEXT=nil;
    vkCreateHeadlessSurfaceEXT:TvkCreateHeadlessSurfaceEXT=nil;
    vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV:TvkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV=nil;
    vkInitializePerformanceApiINTEL:TvkInitializePerformanceApiINTEL=nil;
    vkUninitializePerformanceApiINTEL:TvkUninitializePerformanceApiINTEL=nil;
    vkCmdSetPerformanceMarkerINTEL:TvkCmdSetPerformanceMarkerINTEL=nil;
    vkCmdSetPerformanceStreamMarkerINTEL:TvkCmdSetPerformanceStreamMarkerINTEL=nil;
    vkCmdSetPerformanceOverrideINTEL:TvkCmdSetPerformanceOverrideINTEL=nil;
    vkAcquirePerformanceConfigurationINTEL:TvkAcquirePerformanceConfigurationINTEL=nil;
    vkReleasePerformanceConfigurationINTEL:TvkReleasePerformanceConfigurationINTEL=nil;
    vkQueueSetPerformanceConfigurationINTEL:TvkQueueSetPerformanceConfigurationINTEL=nil;
    vkGetPerformanceParameterINTEL:TvkGetPerformanceParameterINTEL=nil;
    vkGetDeviceMemoryOpaqueCaptureAddress:TvkGetDeviceMemoryOpaqueCaptureAddress=nil;
    vkGetDeviceMemoryOpaqueCaptureAddressKHR:TvkGetDeviceMemoryOpaqueCaptureAddressKHR=nil;
    vkGetPipelineExecutablePropertiesKHR:TvkGetPipelineExecutablePropertiesKHR=nil;
    vkGetPipelineExecutableStatisticsKHR:TvkGetPipelineExecutableStatisticsKHR=nil;
    vkGetPipelineExecutableInternalRepresentationsKHR:TvkGetPipelineExecutableInternalRepresentationsKHR=nil;
    vkCmdSetLineStippleEXT:TvkCmdSetLineStippleEXT=nil;
    vkGetPhysicalDeviceToolPropertiesEXT:TvkGetPhysicalDeviceToolPropertiesEXT=nil;
    vkCreateAccelerationStructureKHR:TvkCreateAccelerationStructureKHR=nil;
    vkCmdBuildAccelerationStructureKHR:TvkCmdBuildAccelerationStructureKHR=nil;
    vkCmdBuildAccelerationStructureIndirectKHR:TvkCmdBuildAccelerationStructureIndirectKHR=nil;
    vkBuildAccelerationStructureKHR:TvkBuildAccelerationStructureKHR=nil;
    vkGetAccelerationStructureDeviceAddressKHR:TvkGetAccelerationStructureDeviceAddressKHR=nil;
    vkCreateDeferredOperationKHR:TvkCreateDeferredOperationKHR=nil;
    vkDestroyDeferredOperationKHR:TvkDestroyDeferredOperationKHR=nil;
    vkGetDeferredOperationMaxConcurrencyKHR:TvkGetDeferredOperationMaxConcurrencyKHR=nil;
    vkGetDeferredOperationResultKHR:TvkGetDeferredOperationResultKHR=nil;
    vkDeferredOperationJoinKHR:TvkDeferredOperationJoinKHR=nil;
    vkCmdSetCullModeEXT:TvkCmdSetCullModeEXT=nil;
    vkCmdSetFrontFaceEXT:TvkCmdSetFrontFaceEXT=nil;
    vkCmdSetPrimitiveTopologyEXT:TvkCmdSetPrimitiveTopologyEXT=nil;
    vkCmdSetViewportWithCountEXT:TvkCmdSetViewportWithCountEXT=nil;
    vkCmdSetScissorWithCountEXT:TvkCmdSetScissorWithCountEXT=nil;
    vkCmdBindVertexBuffers2EXT:TvkCmdBindVertexBuffers2EXT=nil;
    vkCmdSetDepthTestEnableEXT:TvkCmdSetDepthTestEnableEXT=nil;
    vkCmdSetDepthWriteEnableEXT:TvkCmdSetDepthWriteEnableEXT=nil;
    vkCmdSetDepthCompareOpEXT:TvkCmdSetDepthCompareOpEXT=nil;
    vkCmdSetDepthBoundsTestEnableEXT:TvkCmdSetDepthBoundsTestEnableEXT=nil;
    vkCmdSetStencilTestEnableEXT:TvkCmdSetStencilTestEnableEXT=nil;
    vkCmdSetStencilOpEXT:TvkCmdSetStencilOpEXT=nil;
    vkCreatePrivateDataSlotEXT:TvkCreatePrivateDataSlotEXT=nil;
    vkDestroyPrivateDataSlotEXT:TvkDestroyPrivateDataSlotEXT=nil;
    vkSetPrivateDataEXT:TvkSetPrivateDataEXT=nil;
    vkGetPrivateDataEXT:TvkGetPrivateDataEXT=nil;

//...............................................
    vkOCreateInstance:TvkCreateInstance;
    vkOGetInstanceProcAddr:TvkGetInstanceProcAddr;
    vkOEnumerateInstanceExtensionProperties:TvkEnumerateInstanceExtensionProperties;
    vkOEnumerateInstanceLayerProperties:TvkEnumerateInstanceLayerProperties;

//================ Global Functions =========================================

function vkMakeVersion(const aMajor, aMinor, aPatch: Integer): TVkVersion; inline;
function vkGetVersionMajor(const aVersion: TVkVersion): Integer; inline;
function vkGetVersionMinor(const aVersion: TVkVersion): Integer; inline;
function vkGetVersionPatch(const aVersion: TVkVersion): Integer; inline;

function  vkAPIInitialize(const aLibName: String = VK_DEFAULT_LIB_NAME): Boolean;
procedure vkAPIFinalize;
function  vkAPI_IsMESA: Boolean;
function  vkoAPIInitialize(const aLibName: String = VK_DEFAULT_LIB_NAME): Boolean;
function  vkoLoadInstanceFunctions(const aInstance: TVkInstance): TVkInstanceFunctions;
function  vkoLoadDeviceFunctions(const aInstance: TVkInstance; const aDevice: TVkDevice): TVkDeviceFunctions;


implementation

const
 InvalidLibHandle = 0;

type
  TvkLibHandle = TLibHandle;

var
  vkLibHandle: TvkLibHandle = InvalidLibHandle;
  VarIsMESADriver: Boolean = False;

function vkMakeVersion(const aMajor, aMinor, aPatch: Integer): TVkVersion;
begin
  result := (aMajor shl 22) or (aMinor shl 12) or aPatch;
end;

function vkGetVersionMajor(const aVersion: TVkVersion): Integer;
begin
  result := (aVersion shr 22);
end;

function vkGetVersionMinor(const aVersion: TVkVersion): Integer;
begin
  result := (aVersion shr 12) and $3FF;
end;
 
function vkGetVersionPatch(const aVersion: TVkVersion): Integer;
begin
  result := (aVersion and $FFF);
end;

function vkLoadLibrary(const aLibName: String): TvkLibHandle;
  var xLibName: String;
begin
  result:=0;
  xLibName:=aLibName;
  result := dynlibs.LoadLibrary(xLibName);
end;

function vkGetProcAddress(const aProcName: String; aLibHandle: TvkLibHandle = InvalidLibHandle): TPFN_vkVoidFunction;
begin
  result := nil;
  if (aLibHandle = InvalidLibHandle) then
    aLibHandle := vkLibHandle;

  result := TPFN_vkVoidFunction(dynlibs.GetProcedureAddress(aLibHandle, AnsiString(aProcName)));
end;

function  vkAPI_IsMESA: Boolean;
begin
  Result:=VarIsMESADriver;
end;

procedure vkFreeLibrary(var aLibHandle: TvkLibHandle);
begin
  if (aLibHandle <> InvalidLibHandle) then
    begin
      dynlibs.FreeLibrary(aLibHandle);
      aLibHandle := InvalidLibHandle;
    end;
end;

function vkAPIInitialize(const aLibName: String = VK_DEFAULT_LIB_NAME): Boolean;
begin
  VarIsMESADriver:=False;
  Result:=False;
  if vkLibHandle = InvalidLibHandle then
     vkLibHandle := vkLoadLibrary(aLibName);

  {$IF DEFINED(UNIX) and (NOT DEFINED(darwin))}
   if vkLibHandle=InvalidLibHandle then
    begin
     vkLibHandle := vkLoadLibrary('libvulkan.so'); //MESA Driver
     if vkLibHandle<>InvalidLibHandle then VarIsMESADriver:=true;
    end;
  {$ENDIF}

  result := (vkLibHandle <> InvalidLibHandle);

  if not result then exit;

    //............................ Total Global Functions: 438
        vkCreateInstance := TvkCreateInstance(vkGetProcAddress('vkCreateInstance'));
        vkDestroyInstance := TvkDestroyInstance(vkGetProcAddress('vkDestroyInstance'));
        vkEnumeratePhysicalDevices := TvkEnumeratePhysicalDevices(vkGetProcAddress('vkEnumeratePhysicalDevices'));
        vkGetDeviceProcAddr := TvkGetDeviceProcAddr(vkGetProcAddress('vkGetDeviceProcAddr'));
        vkGetInstanceProcAddr := TvkGetInstanceProcAddr(vkGetProcAddress('vkGetInstanceProcAddr'));
        vkGetPhysicalDeviceProperties := TvkGetPhysicalDeviceProperties(vkGetProcAddress('vkGetPhysicalDeviceProperties'));
        vkGetPhysicalDeviceQueueFamilyProperties := TvkGetPhysicalDeviceQueueFamilyProperties(vkGetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties'));
        vkGetPhysicalDeviceMemoryProperties := TvkGetPhysicalDeviceMemoryProperties(vkGetProcAddress('vkGetPhysicalDeviceMemoryProperties'));
        vkGetPhysicalDeviceFeatures := TvkGetPhysicalDeviceFeatures(vkGetProcAddress('vkGetPhysicalDeviceFeatures'));
        vkGetPhysicalDeviceFormatProperties := TvkGetPhysicalDeviceFormatProperties(vkGetProcAddress('vkGetPhysicalDeviceFormatProperties'));
        vkGetPhysicalDeviceImageFormatProperties := TvkGetPhysicalDeviceImageFormatProperties(vkGetProcAddress('vkGetPhysicalDeviceImageFormatProperties'));
        vkCreateDevice := TvkCreateDevice(vkGetProcAddress('vkCreateDevice'));
        vkDestroyDevice := TvkDestroyDevice(vkGetProcAddress('vkDestroyDevice'));
        vkEnumerateInstanceVersion := TvkEnumerateInstanceVersion(vkGetProcAddress('vkEnumerateInstanceVersion'));
        vkEnumerateInstanceLayerProperties := TvkEnumerateInstanceLayerProperties(vkGetProcAddress('vkEnumerateInstanceLayerProperties'));
        vkEnumerateInstanceExtensionProperties := TvkEnumerateInstanceExtensionProperties(vkGetProcAddress('vkEnumerateInstanceExtensionProperties'));
        vkEnumerateDeviceLayerProperties := TvkEnumerateDeviceLayerProperties(vkGetProcAddress('vkEnumerateDeviceLayerProperties'));
        vkEnumerateDeviceExtensionProperties := TvkEnumerateDeviceExtensionProperties(vkGetProcAddress('vkEnumerateDeviceExtensionProperties'));
        vkGetDeviceQueue := TvkGetDeviceQueue(vkGetProcAddress('vkGetDeviceQueue'));
        vkQueueSubmit := TvkQueueSubmit(vkGetProcAddress('vkQueueSubmit'));
        vkQueueWaitIdle := TvkQueueWaitIdle(vkGetProcAddress('vkQueueWaitIdle'));
        vkDeviceWaitIdle := TvkDeviceWaitIdle(vkGetProcAddress('vkDeviceWaitIdle'));
        vkAllocateMemory := TvkAllocateMemory(vkGetProcAddress('vkAllocateMemory'));
        vkFreeMemory := TvkFreeMemory(vkGetProcAddress('vkFreeMemory'));
        vkMapMemory := TvkMapMemory(vkGetProcAddress('vkMapMemory'));
        vkUnmapMemory := TvkUnmapMemory(vkGetProcAddress('vkUnmapMemory'));
        vkFlushMappedMemoryRanges := TvkFlushMappedMemoryRanges(vkGetProcAddress('vkFlushMappedMemoryRanges'));
        vkInvalidateMappedMemoryRanges := TvkInvalidateMappedMemoryRanges(vkGetProcAddress('vkInvalidateMappedMemoryRanges'));
        vkGetDeviceMemoryCommitment := TvkGetDeviceMemoryCommitment(vkGetProcAddress('vkGetDeviceMemoryCommitment'));
        vkGetBufferMemoryRequirements := TvkGetBufferMemoryRequirements(vkGetProcAddress('vkGetBufferMemoryRequirements'));
        vkBindBufferMemory := TvkBindBufferMemory(vkGetProcAddress('vkBindBufferMemory'));
        vkGetImageMemoryRequirements := TvkGetImageMemoryRequirements(vkGetProcAddress('vkGetImageMemoryRequirements'));
        vkBindImageMemory := TvkBindImageMemory(vkGetProcAddress('vkBindImageMemory'));
        vkGetImageSparseMemoryRequirements := TvkGetImageSparseMemoryRequirements(vkGetProcAddress('vkGetImageSparseMemoryRequirements'));
        vkGetPhysicalDeviceSparseImageFormatProperties := TvkGetPhysicalDeviceSparseImageFormatProperties(vkGetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties'));
        vkQueueBindSparse := TvkQueueBindSparse(vkGetProcAddress('vkQueueBindSparse'));
        vkCreateFence := TvkCreateFence(vkGetProcAddress('vkCreateFence'));
        vkDestroyFence := TvkDestroyFence(vkGetProcAddress('vkDestroyFence'));
        vkResetFences := TvkResetFences(vkGetProcAddress('vkResetFences'));
        vkGetFenceStatus := TvkGetFenceStatus(vkGetProcAddress('vkGetFenceStatus'));
        vkWaitForFences := TvkWaitForFences(vkGetProcAddress('vkWaitForFences'));
        vkCreateSemaphore := TvkCreateSemaphore(vkGetProcAddress('vkCreateSemaphore'));
        vkDestroySemaphore := TvkDestroySemaphore(vkGetProcAddress('vkDestroySemaphore'));
        vkCreateEvent := TvkCreateEvent(vkGetProcAddress('vkCreateEvent'));
        vkDestroyEvent := TvkDestroyEvent(vkGetProcAddress('vkDestroyEvent'));
        vkGetEventStatus := TvkGetEventStatus(vkGetProcAddress('vkGetEventStatus'));
        vkSetEvent := TvkSetEvent(vkGetProcAddress('vkSetEvent'));
        vkResetEvent := TvkResetEvent(vkGetProcAddress('vkResetEvent'));
        vkCreateQueryPool := TvkCreateQueryPool(vkGetProcAddress('vkCreateQueryPool'));
        vkDestroyQueryPool := TvkDestroyQueryPool(vkGetProcAddress('vkDestroyQueryPool'));
        vkGetQueryPoolResults := TvkGetQueryPoolResults(vkGetProcAddress('vkGetQueryPoolResults'));
        vkResetQueryPool := TvkResetQueryPool(vkGetProcAddress('vkResetQueryPool'));
        vkResetQueryPoolEXT := TvkResetQueryPoolEXT(vkGetProcAddress('vkResetQueryPoolEXT'));
        vkCreateBuffer := TvkCreateBuffer(vkGetProcAddress('vkCreateBuffer'));
        vkDestroyBuffer := TvkDestroyBuffer(vkGetProcAddress('vkDestroyBuffer'));
        vkCreateBufferView := TvkCreateBufferView(vkGetProcAddress('vkCreateBufferView'));
        vkDestroyBufferView := TvkDestroyBufferView(vkGetProcAddress('vkDestroyBufferView'));
        vkCreateImage := TvkCreateImage(vkGetProcAddress('vkCreateImage'));
        vkDestroyImage := TvkDestroyImage(vkGetProcAddress('vkDestroyImage'));
        vkGetImageSubresourceLayout := TvkGetImageSubresourceLayout(vkGetProcAddress('vkGetImageSubresourceLayout'));
        vkCreateImageView := TvkCreateImageView(vkGetProcAddress('vkCreateImageView'));
        vkDestroyImageView := TvkDestroyImageView(vkGetProcAddress('vkDestroyImageView'));
        vkCreateShaderModule := TvkCreateShaderModule(vkGetProcAddress('vkCreateShaderModule'));
        vkDestroyShaderModule := TvkDestroyShaderModule(vkGetProcAddress('vkDestroyShaderModule'));
        vkCreatePipelineCache := TvkCreatePipelineCache(vkGetProcAddress('vkCreatePipelineCache'));
        vkDestroyPipelineCache := TvkDestroyPipelineCache(vkGetProcAddress('vkDestroyPipelineCache'));
        vkGetPipelineCacheData := TvkGetPipelineCacheData(vkGetProcAddress('vkGetPipelineCacheData'));
        vkMergePipelineCaches := TvkMergePipelineCaches(vkGetProcAddress('vkMergePipelineCaches'));
        vkCreateGraphicsPipelines := TvkCreateGraphicsPipelines(vkGetProcAddress('vkCreateGraphicsPipelines'));
        vkCreateComputePipelines := TvkCreateComputePipelines(vkGetProcAddress('vkCreateComputePipelines'));
        vkDestroyPipeline := TvkDestroyPipeline(vkGetProcAddress('vkDestroyPipeline'));
        vkCreatePipelineLayout := TvkCreatePipelineLayout(vkGetProcAddress('vkCreatePipelineLayout'));
        vkDestroyPipelineLayout := TvkDestroyPipelineLayout(vkGetProcAddress('vkDestroyPipelineLayout'));
        vkCreateSampler := TvkCreateSampler(vkGetProcAddress('vkCreateSampler'));
        vkDestroySampler := TvkDestroySampler(vkGetProcAddress('vkDestroySampler'));
        vkCreateDescriptorSetLayout := TvkCreateDescriptorSetLayout(vkGetProcAddress('vkCreateDescriptorSetLayout'));
        vkDestroyDescriptorSetLayout := TvkDestroyDescriptorSetLayout(vkGetProcAddress('vkDestroyDescriptorSetLayout'));
        vkCreateDescriptorPool := TvkCreateDescriptorPool(vkGetProcAddress('vkCreateDescriptorPool'));
        vkDestroyDescriptorPool := TvkDestroyDescriptorPool(vkGetProcAddress('vkDestroyDescriptorPool'));
        vkResetDescriptorPool := TvkResetDescriptorPool(vkGetProcAddress('vkResetDescriptorPool'));
        vkAllocateDescriptorSets := TvkAllocateDescriptorSets(vkGetProcAddress('vkAllocateDescriptorSets'));
        vkFreeDescriptorSets := TvkFreeDescriptorSets(vkGetProcAddress('vkFreeDescriptorSets'));
        vkUpdateDescriptorSets := TvkUpdateDescriptorSets(vkGetProcAddress('vkUpdateDescriptorSets'));
        vkCreateFramebuffer := TvkCreateFramebuffer(vkGetProcAddress('vkCreateFramebuffer'));
        vkDestroyFramebuffer := TvkDestroyFramebuffer(vkGetProcAddress('vkDestroyFramebuffer'));
        vkCreateRenderPass := TvkCreateRenderPass(vkGetProcAddress('vkCreateRenderPass'));
        vkDestroyRenderPass := TvkDestroyRenderPass(vkGetProcAddress('vkDestroyRenderPass'));
        vkGetRenderAreaGranularity := TvkGetRenderAreaGranularity(vkGetProcAddress('vkGetRenderAreaGranularity'));
        vkCreateCommandPool := TvkCreateCommandPool(vkGetProcAddress('vkCreateCommandPool'));
        vkDestroyCommandPool := TvkDestroyCommandPool(vkGetProcAddress('vkDestroyCommandPool'));
        vkResetCommandPool := TvkResetCommandPool(vkGetProcAddress('vkResetCommandPool'));
        vkAllocateCommandBuffers := TvkAllocateCommandBuffers(vkGetProcAddress('vkAllocateCommandBuffers'));
        vkFreeCommandBuffers := TvkFreeCommandBuffers(vkGetProcAddress('vkFreeCommandBuffers'));
        vkBeginCommandBuffer := TvkBeginCommandBuffer(vkGetProcAddress('vkBeginCommandBuffer'));
        vkEndCommandBuffer := TvkEndCommandBuffer(vkGetProcAddress('vkEndCommandBuffer'));
        vkResetCommandBuffer := TvkResetCommandBuffer(vkGetProcAddress('vkResetCommandBuffer'));
        vkCmdBindPipeline := TvkCmdBindPipeline(vkGetProcAddress('vkCmdBindPipeline'));
        vkCmdSetViewport := TvkCmdSetViewport(vkGetProcAddress('vkCmdSetViewport'));
        vkCmdSetScissor := TvkCmdSetScissor(vkGetProcAddress('vkCmdSetScissor'));
        vkCmdSetLineWidth := TvkCmdSetLineWidth(vkGetProcAddress('vkCmdSetLineWidth'));
        vkCmdSetDepthBias := TvkCmdSetDepthBias(vkGetProcAddress('vkCmdSetDepthBias'));
        vkCmdSetBlendConstants := TvkCmdSetBlendConstants(vkGetProcAddress('vkCmdSetBlendConstants'));
        vkCmdSetDepthBounds := TvkCmdSetDepthBounds(vkGetProcAddress('vkCmdSetDepthBounds'));
        vkCmdSetStencilCompareMask := TvkCmdSetStencilCompareMask(vkGetProcAddress('vkCmdSetStencilCompareMask'));
        vkCmdSetStencilWriteMask := TvkCmdSetStencilWriteMask(vkGetProcAddress('vkCmdSetStencilWriteMask'));
        vkCmdSetStencilReference := TvkCmdSetStencilReference(vkGetProcAddress('vkCmdSetStencilReference'));
        vkCmdBindDescriptorSets := TvkCmdBindDescriptorSets(vkGetProcAddress('vkCmdBindDescriptorSets'));
        vkCmdBindIndexBuffer := TvkCmdBindIndexBuffer(vkGetProcAddress('vkCmdBindIndexBuffer'));
        vkCmdBindVertexBuffers := TvkCmdBindVertexBuffers(vkGetProcAddress('vkCmdBindVertexBuffers'));
        vkCmdDraw := TvkCmdDraw(vkGetProcAddress('vkCmdDraw'));
        vkCmdDrawIndexed := TvkCmdDrawIndexed(vkGetProcAddress('vkCmdDrawIndexed'));
        vkCmdDrawIndirect := TvkCmdDrawIndirect(vkGetProcAddress('vkCmdDrawIndirect'));
        vkCmdDrawIndexedIndirect := TvkCmdDrawIndexedIndirect(vkGetProcAddress('vkCmdDrawIndexedIndirect'));
        vkCmdDispatch := TvkCmdDispatch(vkGetProcAddress('vkCmdDispatch'));
        vkCmdDispatchIndirect := TvkCmdDispatchIndirect(vkGetProcAddress('vkCmdDispatchIndirect'));
        vkCmdCopyBuffer := TvkCmdCopyBuffer(vkGetProcAddress('vkCmdCopyBuffer'));
        vkCmdCopyImage := TvkCmdCopyImage(vkGetProcAddress('vkCmdCopyImage'));
        vkCmdBlitImage := TvkCmdBlitImage(vkGetProcAddress('vkCmdBlitImage'));
        vkCmdCopyBufferToImage := TvkCmdCopyBufferToImage(vkGetProcAddress('vkCmdCopyBufferToImage'));
        vkCmdCopyImageToBuffer := TvkCmdCopyImageToBuffer(vkGetProcAddress('vkCmdCopyImageToBuffer'));
        vkCmdUpdateBuffer := TvkCmdUpdateBuffer(vkGetProcAddress('vkCmdUpdateBuffer'));
        vkCmdFillBuffer := TvkCmdFillBuffer(vkGetProcAddress('vkCmdFillBuffer'));
        vkCmdClearColorImage := TvkCmdClearColorImage(vkGetProcAddress('vkCmdClearColorImage'));
        vkCmdClearDepthStencilImage := TvkCmdClearDepthStencilImage(vkGetProcAddress('vkCmdClearDepthStencilImage'));
        vkCmdClearAttachments := TvkCmdClearAttachments(vkGetProcAddress('vkCmdClearAttachments'));
        vkCmdResolveImage := TvkCmdResolveImage(vkGetProcAddress('vkCmdResolveImage'));
        vkCmdSetEvent := TvkCmdSetEvent(vkGetProcAddress('vkCmdSetEvent'));
        vkCmdResetEvent := TvkCmdResetEvent(vkGetProcAddress('vkCmdResetEvent'));
        vkCmdWaitEvents := TvkCmdWaitEvents(vkGetProcAddress('vkCmdWaitEvents'));
        vkCmdPipelineBarrier := TvkCmdPipelineBarrier(vkGetProcAddress('vkCmdPipelineBarrier'));
        vkCmdBeginQuery := TvkCmdBeginQuery(vkGetProcAddress('vkCmdBeginQuery'));
        vkCmdEndQuery := TvkCmdEndQuery(vkGetProcAddress('vkCmdEndQuery'));
        vkCmdBeginConditionalRenderingEXT := TvkCmdBeginConditionalRenderingEXT(vkGetProcAddress('vkCmdBeginConditionalRenderingEXT'));
        vkCmdEndConditionalRenderingEXT := TvkCmdEndConditionalRenderingEXT(vkGetProcAddress('vkCmdEndConditionalRenderingEXT'));
        vkCmdResetQueryPool := TvkCmdResetQueryPool(vkGetProcAddress('vkCmdResetQueryPool'));
        vkCmdWriteTimestamp := TvkCmdWriteTimestamp(vkGetProcAddress('vkCmdWriteTimestamp'));
        vkCmdCopyQueryPoolResults := TvkCmdCopyQueryPoolResults(vkGetProcAddress('vkCmdCopyQueryPoolResults'));
        vkCmdPushConstants := TvkCmdPushConstants(vkGetProcAddress('vkCmdPushConstants'));
        vkCmdBeginRenderPass := TvkCmdBeginRenderPass(vkGetProcAddress('vkCmdBeginRenderPass'));
        vkCmdNextSubpass := TvkCmdNextSubpass(vkGetProcAddress('vkCmdNextSubpass'));
        vkCmdEndRenderPass := TvkCmdEndRenderPass(vkGetProcAddress('vkCmdEndRenderPass'));
        vkCmdExecuteCommands := TvkCmdExecuteCommands(vkGetProcAddress('vkCmdExecuteCommands'));
       {$ifdef Android}
        vkCreateAndroidSurfaceKHR := TvkCreateAndroidSurfaceKHR(vkGetProcAddress('vkCreateAndroidSurfaceKHR'));
       {$endif}
        vkGetPhysicalDeviceDisplayPropertiesKHR := TvkGetPhysicalDeviceDisplayPropertiesKHR(vkGetProcAddress('vkGetPhysicalDeviceDisplayPropertiesKHR'));
        vkGetPhysicalDeviceDisplayPlanePropertiesKHR := TvkGetPhysicalDeviceDisplayPlanePropertiesKHR(vkGetProcAddress('vkGetPhysicalDeviceDisplayPlanePropertiesKHR'));
        vkGetDisplayPlaneSupportedDisplaysKHR := TvkGetDisplayPlaneSupportedDisplaysKHR(vkGetProcAddress('vkGetDisplayPlaneSupportedDisplaysKHR'));
        vkGetDisplayModePropertiesKHR := TvkGetDisplayModePropertiesKHR(vkGetProcAddress('vkGetDisplayModePropertiesKHR'));
        vkCreateDisplayModeKHR := TvkCreateDisplayModeKHR(vkGetProcAddress('vkCreateDisplayModeKHR'));
        vkGetDisplayPlaneCapabilitiesKHR := TvkGetDisplayPlaneCapabilitiesKHR(vkGetProcAddress('vkGetDisplayPlaneCapabilitiesKHR'));
        vkCreateDisplayPlaneSurfaceKHR := TvkCreateDisplayPlaneSurfaceKHR(vkGetProcAddress('vkCreateDisplayPlaneSurfaceKHR'));
        vkCreateSharedSwapchainsKHR := TvkCreateSharedSwapchainsKHR(vkGetProcAddress('vkCreateSharedSwapchainsKHR'));
        vkDestroySurfaceKHR := TvkDestroySurfaceKHR(vkGetProcAddress('vkDestroySurfaceKHR'));
        vkGetPhysicalDeviceSurfaceSupportKHR := TvkGetPhysicalDeviceSurfaceSupportKHR(vkGetProcAddress('vkGetPhysicalDeviceSurfaceSupportKHR'));
        vkGetPhysicalDeviceSurfaceCapabilitiesKHR := TvkGetPhysicalDeviceSurfaceCapabilitiesKHR(vkGetProcAddress('vkGetPhysicalDeviceSurfaceCapabilitiesKHR'));
        vkGetPhysicalDeviceSurfaceFormatsKHR := TvkGetPhysicalDeviceSurfaceFormatsKHR(vkGetProcAddress('vkGetPhysicalDeviceSurfaceFormatsKHR'));
        vkGetPhysicalDeviceSurfacePresentModesKHR := TvkGetPhysicalDeviceSurfacePresentModesKHR(vkGetProcAddress('vkGetPhysicalDeviceSurfacePresentModesKHR'));
        vkCreateSwapchainKHR := TvkCreateSwapchainKHR(vkGetProcAddress('vkCreateSwapchainKHR'));
        vkDestroySwapchainKHR := TvkDestroySwapchainKHR(vkGetProcAddress('vkDestroySwapchainKHR'));
        vkGetSwapchainImagesKHR := TvkGetSwapchainImagesKHR(vkGetProcAddress('vkGetSwapchainImagesKHR'));
        vkAcquireNextImageKHR := TvkAcquireNextImageKHR(vkGetProcAddress('vkAcquireNextImageKHR'));
        vkQueuePresentKHR := TvkQueuePresentKHR(vkGetProcAddress('vkQueuePresentKHR'));
        vkCreateViSurfaceNN := TvkCreateViSurfaceNN(vkGetProcAddress('vkCreateViSurfaceNN'));
       {$ifdef Wayland}
        vkCreateWaylandSurfaceKHR := TvkCreateWaylandSurfaceKHR(vkGetProcAddress('vkCreateWaylandSurfaceKHR'));
       {$endif}
       {$ifdef Wayland}
        vkGetPhysicalDeviceWaylandPresentationSupportKHR := TvkGetPhysicalDeviceWaylandPresentationSupportKHR(vkGetProcAddress('vkGetPhysicalDeviceWaylandPresentationSupportKHR'));
       {$endif}
       {$ifdef Windows}
        vkCreateWin32SurfaceKHR := TvkCreateWin32SurfaceKHR(vkGetProcAddress('vkCreateWin32SurfaceKHR'));
       {$endif}
       {$ifdef Windows}
        vkGetPhysicalDeviceWin32PresentationSupportKHR := TvkGetPhysicalDeviceWin32PresentationSupportKHR(vkGetProcAddress('vkGetPhysicalDeviceWin32PresentationSupportKHR'));
       {$endif}
       {$ifdef XLIB}
        vkCreateXlibSurfaceKHR := TvkCreateXlibSurfaceKHR(vkGetProcAddress('vkCreateXlibSurfaceKHR'));
       {$endif}
       {$ifdef XLIB}
        vkGetPhysicalDeviceXlibPresentationSupportKHR := TvkGetPhysicalDeviceXlibPresentationSupportKHR(vkGetProcAddress('vkGetPhysicalDeviceXlibPresentationSupportKHR'));
       {$endif}
       {$ifdef XCB}
        vkCreateXcbSurfaceKHR := TvkCreateXcbSurfaceKHR(vkGetProcAddress('vkCreateXcbSurfaceKHR'));
       {$endif}
       {$ifdef XCB}
        vkGetPhysicalDeviceXcbPresentationSupportKHR := TvkGetPhysicalDeviceXcbPresentationSupportKHR(vkGetProcAddress('vkGetPhysicalDeviceXcbPresentationSupportKHR'));
       {$endif}
        vkCreateDirectFBSurfaceEXT := TvkCreateDirectFBSurfaceEXT(vkGetProcAddress('vkCreateDirectFBSurfaceEXT'));
        vkGetPhysicalDeviceDirectFBPresentationSupportEXT := TvkGetPhysicalDeviceDirectFBPresentationSupportEXT(vkGetProcAddress('vkGetPhysicalDeviceDirectFBPresentationSupportEXT'));
        vkCreateImagePipeSurfaceFUCHSIA := TvkCreateImagePipeSurfaceFUCHSIA(vkGetProcAddress('vkCreateImagePipeSurfaceFUCHSIA'));
        vkCreateStreamDescriptorSurfaceGGP := TvkCreateStreamDescriptorSurfaceGGP(vkGetProcAddress('vkCreateStreamDescriptorSurfaceGGP'));
        vkCreateDebugReportCallbackEXT := TvkCreateDebugReportCallbackEXT(vkGetProcAddress('vkCreateDebugReportCallbackEXT'));
        vkDestroyDebugReportCallbackEXT := TvkDestroyDebugReportCallbackEXT(vkGetProcAddress('vkDestroyDebugReportCallbackEXT'));
        vkDebugReportMessageEXT := TvkDebugReportMessageEXT(vkGetProcAddress('vkDebugReportMessageEXT'));
        vkDebugMarkerSetObjectNameEXT := TvkDebugMarkerSetObjectNameEXT(vkGetProcAddress('vkDebugMarkerSetObjectNameEXT'));
        vkDebugMarkerSetObjectTagEXT := TvkDebugMarkerSetObjectTagEXT(vkGetProcAddress('vkDebugMarkerSetObjectTagEXT'));
        vkCmdDebugMarkerBeginEXT := TvkCmdDebugMarkerBeginEXT(vkGetProcAddress('vkCmdDebugMarkerBeginEXT'));
        vkCmdDebugMarkerEndEXT := TvkCmdDebugMarkerEndEXT(vkGetProcAddress('vkCmdDebugMarkerEndEXT'));
        vkCmdDebugMarkerInsertEXT := TvkCmdDebugMarkerInsertEXT(vkGetProcAddress('vkCmdDebugMarkerInsertEXT'));
        vkGetPhysicalDeviceExternalImageFormatPropertiesNV := TvkGetPhysicalDeviceExternalImageFormatPropertiesNV(vkGetProcAddress('vkGetPhysicalDeviceExternalImageFormatPropertiesNV'));
       {$ifdef Windows}
        vkGetMemoryWin32HandleNV := TvkGetMemoryWin32HandleNV(vkGetProcAddress('vkGetMemoryWin32HandleNV'));
       {$endif}
        vkCmdExecuteGeneratedCommandsNV := TvkCmdExecuteGeneratedCommandsNV(vkGetProcAddress('vkCmdExecuteGeneratedCommandsNV'));
        vkCmdPreprocessGeneratedCommandsNV := TvkCmdPreprocessGeneratedCommandsNV(vkGetProcAddress('vkCmdPreprocessGeneratedCommandsNV'));
        vkCmdBindPipelineShaderGroupNV := TvkCmdBindPipelineShaderGroupNV(vkGetProcAddress('vkCmdBindPipelineShaderGroupNV'));
        vkGetGeneratedCommandsMemoryRequirementsNV := TvkGetGeneratedCommandsMemoryRequirementsNV(vkGetProcAddress('vkGetGeneratedCommandsMemoryRequirementsNV'));
        vkCreateIndirectCommandsLayoutNV := TvkCreateIndirectCommandsLayoutNV(vkGetProcAddress('vkCreateIndirectCommandsLayoutNV'));
        vkDestroyIndirectCommandsLayoutNV := TvkDestroyIndirectCommandsLayoutNV(vkGetProcAddress('vkDestroyIndirectCommandsLayoutNV'));
        vkGetPhysicalDeviceFeatures2 := TvkGetPhysicalDeviceFeatures2(vkGetProcAddress('vkGetPhysicalDeviceFeatures2'));
        vkGetPhysicalDeviceFeatures2KHR := TvkGetPhysicalDeviceFeatures2KHR(vkGetProcAddress('vkGetPhysicalDeviceFeatures2KHR'));
        vkGetPhysicalDeviceProperties2 := TvkGetPhysicalDeviceProperties2(vkGetProcAddress('vkGetPhysicalDeviceProperties2'));
        vkGetPhysicalDeviceProperties2KHR := TvkGetPhysicalDeviceProperties2KHR(vkGetProcAddress('vkGetPhysicalDeviceProperties2KHR'));
        vkGetPhysicalDeviceFormatProperties2 := TvkGetPhysicalDeviceFormatProperties2(vkGetProcAddress('vkGetPhysicalDeviceFormatProperties2'));
        vkGetPhysicalDeviceFormatProperties2KHR := TvkGetPhysicalDeviceFormatProperties2KHR(vkGetProcAddress('vkGetPhysicalDeviceFormatProperties2KHR'));
        vkGetPhysicalDeviceImageFormatProperties2 := TvkGetPhysicalDeviceImageFormatProperties2(vkGetProcAddress('vkGetPhysicalDeviceImageFormatProperties2'));
        vkGetPhysicalDeviceImageFormatProperties2KHR := TvkGetPhysicalDeviceImageFormatProperties2KHR(vkGetProcAddress('vkGetPhysicalDeviceImageFormatProperties2KHR'));
        vkGetPhysicalDeviceQueueFamilyProperties2 := TvkGetPhysicalDeviceQueueFamilyProperties2(vkGetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties2'));
        vkGetPhysicalDeviceQueueFamilyProperties2KHR := TvkGetPhysicalDeviceQueueFamilyProperties2KHR(vkGetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties2KHR'));
        vkGetPhysicalDeviceMemoryProperties2 := TvkGetPhysicalDeviceMemoryProperties2(vkGetProcAddress('vkGetPhysicalDeviceMemoryProperties2'));
        vkGetPhysicalDeviceMemoryProperties2KHR := TvkGetPhysicalDeviceMemoryProperties2KHR(vkGetProcAddress('vkGetPhysicalDeviceMemoryProperties2KHR'));
        vkGetPhysicalDeviceSparseImageFormatProperties2 := TvkGetPhysicalDeviceSparseImageFormatProperties2(vkGetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties2'));
        vkGetPhysicalDeviceSparseImageFormatProperties2KHR := TvkGetPhysicalDeviceSparseImageFormatProperties2KHR(vkGetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties2KHR'));
        vkCmdPushDescriptorSetKHR := TvkCmdPushDescriptorSetKHR(vkGetProcAddress('vkCmdPushDescriptorSetKHR'));
        vkTrimCommandPool := TvkTrimCommandPool(vkGetProcAddress('vkTrimCommandPool'));
        vkTrimCommandPoolKHR := TvkTrimCommandPoolKHR(vkGetProcAddress('vkTrimCommandPoolKHR'));
        vkGetPhysicalDeviceExternalBufferProperties := TvkGetPhysicalDeviceExternalBufferProperties(vkGetProcAddress('vkGetPhysicalDeviceExternalBufferProperties'));
        vkGetPhysicalDeviceExternalBufferPropertiesKHR := TvkGetPhysicalDeviceExternalBufferPropertiesKHR(vkGetProcAddress('vkGetPhysicalDeviceExternalBufferPropertiesKHR'));
       {$ifdef Windows}
        vkGetMemoryWin32HandleKHR := TvkGetMemoryWin32HandleKHR(vkGetProcAddress('vkGetMemoryWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkGetMemoryWin32HandlePropertiesKHR := TvkGetMemoryWin32HandlePropertiesKHR(vkGetProcAddress('vkGetMemoryWin32HandlePropertiesKHR'));
       {$endif}
        vkGetMemoryFdKHR := TvkGetMemoryFdKHR(vkGetProcAddress('vkGetMemoryFdKHR'));
        vkGetMemoryFdPropertiesKHR := TvkGetMemoryFdPropertiesKHR(vkGetProcAddress('vkGetMemoryFdPropertiesKHR'));
        vkGetPhysicalDeviceExternalSemaphoreProperties := TvkGetPhysicalDeviceExternalSemaphoreProperties(vkGetProcAddress('vkGetPhysicalDeviceExternalSemaphoreProperties'));
        vkGetPhysicalDeviceExternalSemaphorePropertiesKHR := TvkGetPhysicalDeviceExternalSemaphorePropertiesKHR(vkGetProcAddress('vkGetPhysicalDeviceExternalSemaphorePropertiesKHR'));
       {$ifdef Windows}
        vkGetSemaphoreWin32HandleKHR := TvkGetSemaphoreWin32HandleKHR(vkGetProcAddress('vkGetSemaphoreWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkImportSemaphoreWin32HandleKHR := TvkImportSemaphoreWin32HandleKHR(vkGetProcAddress('vkImportSemaphoreWin32HandleKHR'));
       {$endif}
        vkGetSemaphoreFdKHR := TvkGetSemaphoreFdKHR(vkGetProcAddress('vkGetSemaphoreFdKHR'));
        vkImportSemaphoreFdKHR := TvkImportSemaphoreFdKHR(vkGetProcAddress('vkImportSemaphoreFdKHR'));
        vkGetPhysicalDeviceExternalFenceProperties := TvkGetPhysicalDeviceExternalFenceProperties(vkGetProcAddress('vkGetPhysicalDeviceExternalFenceProperties'));
        vkGetPhysicalDeviceExternalFencePropertiesKHR := TvkGetPhysicalDeviceExternalFencePropertiesKHR(vkGetProcAddress('vkGetPhysicalDeviceExternalFencePropertiesKHR'));
       {$ifdef Windows}
        vkGetFenceWin32HandleKHR := TvkGetFenceWin32HandleKHR(vkGetProcAddress('vkGetFenceWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkImportFenceWin32HandleKHR := TvkImportFenceWin32HandleKHR(vkGetProcAddress('vkImportFenceWin32HandleKHR'));
       {$endif}
        vkGetFenceFdKHR := TvkGetFenceFdKHR(vkGetProcAddress('vkGetFenceFdKHR'));
        vkImportFenceFdKHR := TvkImportFenceFdKHR(vkGetProcAddress('vkImportFenceFdKHR'));
        vkReleaseDisplayEXT := TvkReleaseDisplayEXT(vkGetProcAddress('vkReleaseDisplayEXT'));
       {$ifdef XLIB}
        vkAcquireXlibDisplayEXT := TvkAcquireXlibDisplayEXT(vkGetProcAddress('vkAcquireXlibDisplayEXT'));
       {$endif}
       {$ifdef RandR}
        vkGetRandROutputDisplayEXT := TvkGetRandROutputDisplayEXT(vkGetProcAddress('vkGetRandROutputDisplayEXT'));
       {$endif}
        vkDisplayPowerControlEXT := TvkDisplayPowerControlEXT(vkGetProcAddress('vkDisplayPowerControlEXT'));
        vkRegisterDeviceEventEXT := TvkRegisterDeviceEventEXT(vkGetProcAddress('vkRegisterDeviceEventEXT'));
        vkRegisterDisplayEventEXT := TvkRegisterDisplayEventEXT(vkGetProcAddress('vkRegisterDisplayEventEXT'));
        vkGetSwapchainCounterEXT := TvkGetSwapchainCounterEXT(vkGetProcAddress('vkGetSwapchainCounterEXT'));
        vkGetPhysicalDeviceSurfaceCapabilities2EXT := TvkGetPhysicalDeviceSurfaceCapabilities2EXT(vkGetProcAddress('vkGetPhysicalDeviceSurfaceCapabilities2EXT'));
        vkEnumeratePhysicalDeviceGroups := TvkEnumeratePhysicalDeviceGroups(vkGetProcAddress('vkEnumeratePhysicalDeviceGroups'));
        vkEnumeratePhysicalDeviceGroupsKHR := TvkEnumeratePhysicalDeviceGroupsKHR(vkGetProcAddress('vkEnumeratePhysicalDeviceGroupsKHR'));
        vkGetDeviceGroupPeerMemoryFeatures := TvkGetDeviceGroupPeerMemoryFeatures(vkGetProcAddress('vkGetDeviceGroupPeerMemoryFeatures'));
        vkGetDeviceGroupPeerMemoryFeaturesKHR := TvkGetDeviceGroupPeerMemoryFeaturesKHR(vkGetProcAddress('vkGetDeviceGroupPeerMemoryFeaturesKHR'));
        vkBindBufferMemory2 := TvkBindBufferMemory2(vkGetProcAddress('vkBindBufferMemory2'));
        vkBindBufferMemory2KHR := TvkBindBufferMemory2KHR(vkGetProcAddress('vkBindBufferMemory2KHR'));
        vkBindImageMemory2 := TvkBindImageMemory2(vkGetProcAddress('vkBindImageMemory2'));
        vkBindImageMemory2KHR := TvkBindImageMemory2KHR(vkGetProcAddress('vkBindImageMemory2KHR'));
        vkCmdSetDeviceMask := TvkCmdSetDeviceMask(vkGetProcAddress('vkCmdSetDeviceMask'));
        vkCmdSetDeviceMaskKHR := TvkCmdSetDeviceMaskKHR(vkGetProcAddress('vkCmdSetDeviceMaskKHR'));
        vkGetDeviceGroupPresentCapabilitiesKHR := TvkGetDeviceGroupPresentCapabilitiesKHR(vkGetProcAddress('vkGetDeviceGroupPresentCapabilitiesKHR'));
        vkGetDeviceGroupSurfacePresentModesKHR := TvkGetDeviceGroupSurfacePresentModesKHR(vkGetProcAddress('vkGetDeviceGroupSurfacePresentModesKHR'));
        vkAcquireNextImage2KHR := TvkAcquireNextImage2KHR(vkGetProcAddress('vkAcquireNextImage2KHR'));
        vkCmdDispatchBase := TvkCmdDispatchBase(vkGetProcAddress('vkCmdDispatchBase'));
        vkCmdDispatchBaseKHR := TvkCmdDispatchBaseKHR(vkGetProcAddress('vkCmdDispatchBaseKHR'));
        vkGetPhysicalDevicePresentRectanglesKHR := TvkGetPhysicalDevicePresentRectanglesKHR(vkGetProcAddress('vkGetPhysicalDevicePresentRectanglesKHR'));
        vkCreateDescriptorUpdateTemplate := TvkCreateDescriptorUpdateTemplate(vkGetProcAddress('vkCreateDescriptorUpdateTemplate'));
        vkCreateDescriptorUpdateTemplateKHR := TvkCreateDescriptorUpdateTemplateKHR(vkGetProcAddress('vkCreateDescriptorUpdateTemplateKHR'));
        vkDestroyDescriptorUpdateTemplate := TvkDestroyDescriptorUpdateTemplate(vkGetProcAddress('vkDestroyDescriptorUpdateTemplate'));
        vkDestroyDescriptorUpdateTemplateKHR := TvkDestroyDescriptorUpdateTemplateKHR(vkGetProcAddress('vkDestroyDescriptorUpdateTemplateKHR'));
        vkUpdateDescriptorSetWithTemplate := TvkUpdateDescriptorSetWithTemplate(vkGetProcAddress('vkUpdateDescriptorSetWithTemplate'));
        vkUpdateDescriptorSetWithTemplateKHR := TvkUpdateDescriptorSetWithTemplateKHR(vkGetProcAddress('vkUpdateDescriptorSetWithTemplateKHR'));
        vkCmdPushDescriptorSetWithTemplateKHR := TvkCmdPushDescriptorSetWithTemplateKHR(vkGetProcAddress('vkCmdPushDescriptorSetWithTemplateKHR'));
        vkSetHdrMetadataEXT := TvkSetHdrMetadataEXT(vkGetProcAddress('vkSetHdrMetadataEXT'));
        vkGetSwapchainStatusKHR := TvkGetSwapchainStatusKHR(vkGetProcAddress('vkGetSwapchainStatusKHR'));
        vkGetRefreshCycleDurationGOOGLE := TvkGetRefreshCycleDurationGOOGLE(vkGetProcAddress('vkGetRefreshCycleDurationGOOGLE'));
        vkGetPastPresentationTimingGOOGLE := TvkGetPastPresentationTimingGOOGLE(vkGetProcAddress('vkGetPastPresentationTimingGOOGLE'));
       {$ifdef MoltenVK_IOS}
        vkCreateIOSSurfaceMVK := TvkCreateIOSSurfaceMVK(vkGetProcAddress('vkCreateIOSSurfaceMVK'));
       {$endif}
       {$ifdef MoltenVK_MacOS}
        vkCreateMacOSSurfaceMVK := TvkCreateMacOSSurfaceMVK(vkGetProcAddress('vkCreateMacOSSurfaceMVK'));
       {$endif}
        vkCreateMetalSurfaceEXT := TvkCreateMetalSurfaceEXT(vkGetProcAddress('vkCreateMetalSurfaceEXT'));
        vkCmdSetViewportWScalingNV := TvkCmdSetViewportWScalingNV(vkGetProcAddress('vkCmdSetViewportWScalingNV'));
        vkCmdSetDiscardRectangleEXT := TvkCmdSetDiscardRectangleEXT(vkGetProcAddress('vkCmdSetDiscardRectangleEXT'));
        vkCmdSetSampleLocationsEXT := TvkCmdSetSampleLocationsEXT(vkGetProcAddress('vkCmdSetSampleLocationsEXT'));
        vkGetPhysicalDeviceMultisamplePropertiesEXT := TvkGetPhysicalDeviceMultisamplePropertiesEXT(vkGetProcAddress('vkGetPhysicalDeviceMultisamplePropertiesEXT'));
        vkGetPhysicalDeviceSurfaceCapabilities2KHR := TvkGetPhysicalDeviceSurfaceCapabilities2KHR(vkGetProcAddress('vkGetPhysicalDeviceSurfaceCapabilities2KHR'));
        vkGetPhysicalDeviceSurfaceFormats2KHR := TvkGetPhysicalDeviceSurfaceFormats2KHR(vkGetProcAddress('vkGetPhysicalDeviceSurfaceFormats2KHR'));
        vkGetPhysicalDeviceDisplayProperties2KHR := TvkGetPhysicalDeviceDisplayProperties2KHR(vkGetProcAddress('vkGetPhysicalDeviceDisplayProperties2KHR'));
        vkGetPhysicalDeviceDisplayPlaneProperties2KHR := TvkGetPhysicalDeviceDisplayPlaneProperties2KHR(vkGetProcAddress('vkGetPhysicalDeviceDisplayPlaneProperties2KHR'));
        vkGetDisplayModeProperties2KHR := TvkGetDisplayModeProperties2KHR(vkGetProcAddress('vkGetDisplayModeProperties2KHR'));
        vkGetDisplayPlaneCapabilities2KHR := TvkGetDisplayPlaneCapabilities2KHR(vkGetProcAddress('vkGetDisplayPlaneCapabilities2KHR'));
        vkGetBufferMemoryRequirements2 := TvkGetBufferMemoryRequirements2(vkGetProcAddress('vkGetBufferMemoryRequirements2'));
        vkGetBufferMemoryRequirements2KHR := TvkGetBufferMemoryRequirements2KHR(vkGetProcAddress('vkGetBufferMemoryRequirements2KHR'));
        vkGetImageMemoryRequirements2 := TvkGetImageMemoryRequirements2(vkGetProcAddress('vkGetImageMemoryRequirements2'));
        vkGetImageMemoryRequirements2KHR := TvkGetImageMemoryRequirements2KHR(vkGetProcAddress('vkGetImageMemoryRequirements2KHR'));
        vkGetImageSparseMemoryRequirements2 := TvkGetImageSparseMemoryRequirements2(vkGetProcAddress('vkGetImageSparseMemoryRequirements2'));
        vkGetImageSparseMemoryRequirements2KHR := TvkGetImageSparseMemoryRequirements2KHR(vkGetProcAddress('vkGetImageSparseMemoryRequirements2KHR'));
        vkCreateSamplerYcbcrConversion := TvkCreateSamplerYcbcrConversion(vkGetProcAddress('vkCreateSamplerYcbcrConversion'));
        vkCreateSamplerYcbcrConversionKHR := TvkCreateSamplerYcbcrConversionKHR(vkGetProcAddress('vkCreateSamplerYcbcrConversionKHR'));
        vkDestroySamplerYcbcrConversion := TvkDestroySamplerYcbcrConversion(vkGetProcAddress('vkDestroySamplerYcbcrConversion'));
        vkDestroySamplerYcbcrConversionKHR := TvkDestroySamplerYcbcrConversionKHR(vkGetProcAddress('vkDestroySamplerYcbcrConversionKHR'));
        vkGetDeviceQueue2 := TvkGetDeviceQueue2(vkGetProcAddress('vkGetDeviceQueue2'));
        vkCreateValidationCacheEXT := TvkCreateValidationCacheEXT(vkGetProcAddress('vkCreateValidationCacheEXT'));
        vkDestroyValidationCacheEXT := TvkDestroyValidationCacheEXT(vkGetProcAddress('vkDestroyValidationCacheEXT'));
        vkGetValidationCacheDataEXT := TvkGetValidationCacheDataEXT(vkGetProcAddress('vkGetValidationCacheDataEXT'));
        vkMergeValidationCachesEXT := TvkMergeValidationCachesEXT(vkGetProcAddress('vkMergeValidationCachesEXT'));
        vkGetDescriptorSetLayoutSupport := TvkGetDescriptorSetLayoutSupport(vkGetProcAddress('vkGetDescriptorSetLayoutSupport'));
        vkGetDescriptorSetLayoutSupportKHR := TvkGetDescriptorSetLayoutSupportKHR(vkGetProcAddress('vkGetDescriptorSetLayoutSupportKHR'));
        vkGetSwapchainGrallocUsageANDROID := TvkGetSwapchainGrallocUsageANDROID(vkGetProcAddress('vkGetSwapchainGrallocUsageANDROID'));
       {$ifdef Android}
        vkGetSwapchainGrallocUsage2ANDROID := TvkGetSwapchainGrallocUsage2ANDROID(vkGetProcAddress('vkGetSwapchainGrallocUsage2ANDROID'));
       {$endif}
        vkAcquireImageANDROID := TvkAcquireImageANDROID(vkGetProcAddress('vkAcquireImageANDROID'));
        vkQueueSignalReleaseImageANDROID := TvkQueueSignalReleaseImageANDROID(vkGetProcAddress('vkQueueSignalReleaseImageANDROID'));
        vkGetShaderInfoAMD := TvkGetShaderInfoAMD(vkGetProcAddress('vkGetShaderInfoAMD'));
        vkSetLocalDimmingAMD := TvkSetLocalDimmingAMD(vkGetProcAddress('vkSetLocalDimmingAMD'));
        vkGetPhysicalDeviceCalibrateableTimeDomainsEXT := TvkGetPhysicalDeviceCalibrateableTimeDomainsEXT(vkGetProcAddress('vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'));
        vkGetCalibratedTimestampsEXT := TvkGetCalibratedTimestampsEXT(vkGetProcAddress('vkGetCalibratedTimestampsEXT'));
        vkSetDebugUtilsObjectNameEXT := TvkSetDebugUtilsObjectNameEXT(vkGetProcAddress('vkSetDebugUtilsObjectNameEXT'));
        vkSetDebugUtilsObjectTagEXT := TvkSetDebugUtilsObjectTagEXT(vkGetProcAddress('vkSetDebugUtilsObjectTagEXT'));
        vkQueueBeginDebugUtilsLabelEXT := TvkQueueBeginDebugUtilsLabelEXT(vkGetProcAddress('vkQueueBeginDebugUtilsLabelEXT'));
        vkQueueEndDebugUtilsLabelEXT := TvkQueueEndDebugUtilsLabelEXT(vkGetProcAddress('vkQueueEndDebugUtilsLabelEXT'));
        vkQueueInsertDebugUtilsLabelEXT := TvkQueueInsertDebugUtilsLabelEXT(vkGetProcAddress('vkQueueInsertDebugUtilsLabelEXT'));
        vkCmdBeginDebugUtilsLabelEXT := TvkCmdBeginDebugUtilsLabelEXT(vkGetProcAddress('vkCmdBeginDebugUtilsLabelEXT'));
        vkCmdEndDebugUtilsLabelEXT := TvkCmdEndDebugUtilsLabelEXT(vkGetProcAddress('vkCmdEndDebugUtilsLabelEXT'));
        vkCmdInsertDebugUtilsLabelEXT := TvkCmdInsertDebugUtilsLabelEXT(vkGetProcAddress('vkCmdInsertDebugUtilsLabelEXT'));
        vkCreateDebugUtilsMessengerEXT := TvkCreateDebugUtilsMessengerEXT(vkGetProcAddress('vkCreateDebugUtilsMessengerEXT'));
        vkDestroyDebugUtilsMessengerEXT := TvkDestroyDebugUtilsMessengerEXT(vkGetProcAddress('vkDestroyDebugUtilsMessengerEXT'));
        vkSubmitDebugUtilsMessageEXT := TvkSubmitDebugUtilsMessageEXT(vkGetProcAddress('vkSubmitDebugUtilsMessageEXT'));
        vkGetMemoryHostPointerPropertiesEXT := TvkGetMemoryHostPointerPropertiesEXT(vkGetProcAddress('vkGetMemoryHostPointerPropertiesEXT'));
        vkCmdWriteBufferMarkerAMD := TvkCmdWriteBufferMarkerAMD(vkGetProcAddress('vkCmdWriteBufferMarkerAMD'));
        vkCreateRenderPass2 := TvkCreateRenderPass2(vkGetProcAddress('vkCreateRenderPass2'));
        vkCreateRenderPass2KHR := TvkCreateRenderPass2KHR(vkGetProcAddress('vkCreateRenderPass2KHR'));
        vkCmdBeginRenderPass2 := TvkCmdBeginRenderPass2(vkGetProcAddress('vkCmdBeginRenderPass2'));
        vkCmdBeginRenderPass2KHR := TvkCmdBeginRenderPass2KHR(vkGetProcAddress('vkCmdBeginRenderPass2KHR'));
        vkCmdNextSubpass2 := TvkCmdNextSubpass2(vkGetProcAddress('vkCmdNextSubpass2'));
        vkCmdNextSubpass2KHR := TvkCmdNextSubpass2KHR(vkGetProcAddress('vkCmdNextSubpass2KHR'));
        vkCmdEndRenderPass2 := TvkCmdEndRenderPass2(vkGetProcAddress('vkCmdEndRenderPass2'));
        vkCmdEndRenderPass2KHR := TvkCmdEndRenderPass2KHR(vkGetProcAddress('vkCmdEndRenderPass2KHR'));
        vkGetSemaphoreCounterValue := TvkGetSemaphoreCounterValue(vkGetProcAddress('vkGetSemaphoreCounterValue'));
        vkGetSemaphoreCounterValueKHR := TvkGetSemaphoreCounterValueKHR(vkGetProcAddress('vkGetSemaphoreCounterValueKHR'));
        vkWaitSemaphores := TvkWaitSemaphores(vkGetProcAddress('vkWaitSemaphores'));
        vkWaitSemaphoresKHR := TvkWaitSemaphoresKHR(vkGetProcAddress('vkWaitSemaphoresKHR'));
        vkSignalSemaphore := TvkSignalSemaphore(vkGetProcAddress('vkSignalSemaphore'));
        vkSignalSemaphoreKHR := TvkSignalSemaphoreKHR(vkGetProcAddress('vkSignalSemaphoreKHR'));
       {$ifdef Android}
        vkGetAndroidHardwareBufferPropertiesANDROID := TvkGetAndroidHardwareBufferPropertiesANDROID(vkGetProcAddress('vkGetAndroidHardwareBufferPropertiesANDROID'));
       {$endif}
       {$ifdef Android}
        vkGetMemoryAndroidHardwareBufferANDROID := TvkGetMemoryAndroidHardwareBufferANDROID(vkGetProcAddress('vkGetMemoryAndroidHardwareBufferANDROID'));
       {$endif}
        vkCmdDrawIndirectCount := TvkCmdDrawIndirectCount(vkGetProcAddress('vkCmdDrawIndirectCount'));
        vkCmdDrawIndirectCountKHR := TvkCmdDrawIndirectCountKHR(vkGetProcAddress('vkCmdDrawIndirectCountKHR'));
        vkCmdDrawIndirectCountAMD := TvkCmdDrawIndirectCountAMD(vkGetProcAddress('vkCmdDrawIndirectCountAMD'));
        vkCmdDrawIndexedIndirectCount := TvkCmdDrawIndexedIndirectCount(vkGetProcAddress('vkCmdDrawIndexedIndirectCount'));
        vkCmdDrawIndexedIndirectCountKHR := TvkCmdDrawIndexedIndirectCountKHR(vkGetProcAddress('vkCmdDrawIndexedIndirectCountKHR'));
        vkCmdDrawIndexedIndirectCountAMD := TvkCmdDrawIndexedIndirectCountAMD(vkGetProcAddress('vkCmdDrawIndexedIndirectCountAMD'));
        vkCmdSetCheckpointNV := TvkCmdSetCheckpointNV(vkGetProcAddress('vkCmdSetCheckpointNV'));
        vkGetQueueCheckpointDataNV := TvkGetQueueCheckpointDataNV(vkGetProcAddress('vkGetQueueCheckpointDataNV'));
        vkCmdBindTransformFeedbackBuffersEXT := TvkCmdBindTransformFeedbackBuffersEXT(vkGetProcAddress('vkCmdBindTransformFeedbackBuffersEXT'));
        vkCmdBeginTransformFeedbackEXT := TvkCmdBeginTransformFeedbackEXT(vkGetProcAddress('vkCmdBeginTransformFeedbackEXT'));
        vkCmdEndTransformFeedbackEXT := TvkCmdEndTransformFeedbackEXT(vkGetProcAddress('vkCmdEndTransformFeedbackEXT'));
        vkCmdBeginQueryIndexedEXT := TvkCmdBeginQueryIndexedEXT(vkGetProcAddress('vkCmdBeginQueryIndexedEXT'));
        vkCmdEndQueryIndexedEXT := TvkCmdEndQueryIndexedEXT(vkGetProcAddress('vkCmdEndQueryIndexedEXT'));
        vkCmdDrawIndirectByteCountEXT := TvkCmdDrawIndirectByteCountEXT(vkGetProcAddress('vkCmdDrawIndirectByteCountEXT'));
        vkCmdSetExclusiveScissorNV := TvkCmdSetExclusiveScissorNV(vkGetProcAddress('vkCmdSetExclusiveScissorNV'));
        vkCmdBindShadingRateImageNV := TvkCmdBindShadingRateImageNV(vkGetProcAddress('vkCmdBindShadingRateImageNV'));
        vkCmdSetViewportShadingRatePaletteNV := TvkCmdSetViewportShadingRatePaletteNV(vkGetProcAddress('vkCmdSetViewportShadingRatePaletteNV'));
        vkCmdSetCoarseSampleOrderNV := TvkCmdSetCoarseSampleOrderNV(vkGetProcAddress('vkCmdSetCoarseSampleOrderNV'));
        vkCmdDrawMeshTasksNV := TvkCmdDrawMeshTasksNV(vkGetProcAddress('vkCmdDrawMeshTasksNV'));
        vkCmdDrawMeshTasksIndirectNV := TvkCmdDrawMeshTasksIndirectNV(vkGetProcAddress('vkCmdDrawMeshTasksIndirectNV'));
        vkCmdDrawMeshTasksIndirectCountNV := TvkCmdDrawMeshTasksIndirectCountNV(vkGetProcAddress('vkCmdDrawMeshTasksIndirectCountNV'));
        vkCompileDeferredNV := TvkCompileDeferredNV(vkGetProcAddress('vkCompileDeferredNV'));
        vkCreateAccelerationStructureNV := TvkCreateAccelerationStructureNV(vkGetProcAddress('vkCreateAccelerationStructureNV'));
        vkDestroyAccelerationStructureKHR := TvkDestroyAccelerationStructureKHR(vkGetProcAddress('vkDestroyAccelerationStructureKHR'));
        vkDestroyAccelerationStructureNV := TvkDestroyAccelerationStructureNV(vkGetProcAddress('vkDestroyAccelerationStructureNV'));
        vkGetAccelerationStructureMemoryRequirementsKHR := TvkGetAccelerationStructureMemoryRequirementsKHR(vkGetProcAddress('vkGetAccelerationStructureMemoryRequirementsKHR'));
        vkGetAccelerationStructureMemoryRequirementsNV := TvkGetAccelerationStructureMemoryRequirementsNV(vkGetProcAddress('vkGetAccelerationStructureMemoryRequirementsNV'));
        vkBindAccelerationStructureMemoryKHR := TvkBindAccelerationStructureMemoryKHR(vkGetProcAddress('vkBindAccelerationStructureMemoryKHR'));
        vkBindAccelerationStructureMemoryNV := TvkBindAccelerationStructureMemoryNV(vkGetProcAddress('vkBindAccelerationStructureMemoryNV'));
        vkCmdCopyAccelerationStructureNV := TvkCmdCopyAccelerationStructureNV(vkGetProcAddress('vkCmdCopyAccelerationStructureNV'));
        vkCmdCopyAccelerationStructureKHR := TvkCmdCopyAccelerationStructureKHR(vkGetProcAddress('vkCmdCopyAccelerationStructureKHR'));
        vkCopyAccelerationStructureKHR := TvkCopyAccelerationStructureKHR(vkGetProcAddress('vkCopyAccelerationStructureKHR'));
        vkCmdCopyAccelerationStructureToMemoryKHR := TvkCmdCopyAccelerationStructureToMemoryKHR(vkGetProcAddress('vkCmdCopyAccelerationStructureToMemoryKHR'));
        vkCopyAccelerationStructureToMemoryKHR := TvkCopyAccelerationStructureToMemoryKHR(vkGetProcAddress('vkCopyAccelerationStructureToMemoryKHR'));
        vkCmdCopyMemoryToAccelerationStructureKHR := TvkCmdCopyMemoryToAccelerationStructureKHR(vkGetProcAddress('vkCmdCopyMemoryToAccelerationStructureKHR'));
        vkCopyMemoryToAccelerationStructureKHR := TvkCopyMemoryToAccelerationStructureKHR(vkGetProcAddress('vkCopyMemoryToAccelerationStructureKHR'));
        vkCmdWriteAccelerationStructuresPropertiesKHR := TvkCmdWriteAccelerationStructuresPropertiesKHR(vkGetProcAddress('vkCmdWriteAccelerationStructuresPropertiesKHR'));
        vkCmdWriteAccelerationStructuresPropertiesNV := TvkCmdWriteAccelerationStructuresPropertiesNV(vkGetProcAddress('vkCmdWriteAccelerationStructuresPropertiesNV'));
        vkCmdBuildAccelerationStructureNV := TvkCmdBuildAccelerationStructureNV(vkGetProcAddress('vkCmdBuildAccelerationStructureNV'));
        vkWriteAccelerationStructuresPropertiesKHR := TvkWriteAccelerationStructuresPropertiesKHR(vkGetProcAddress('vkWriteAccelerationStructuresPropertiesKHR'));
        vkCmdTraceRaysKHR := TvkCmdTraceRaysKHR(vkGetProcAddress('vkCmdTraceRaysKHR'));
        vkCmdTraceRaysNV := TvkCmdTraceRaysNV(vkGetProcAddress('vkCmdTraceRaysNV'));
        vkGetRayTracingShaderGroupHandlesKHR := TvkGetRayTracingShaderGroupHandlesKHR(vkGetProcAddress('vkGetRayTracingShaderGroupHandlesKHR'));
        vkGetRayTracingShaderGroupHandlesNV := TvkGetRayTracingShaderGroupHandlesNV(vkGetProcAddress('vkGetRayTracingShaderGroupHandlesNV'));
        vkGetRayTracingCaptureReplayShaderGroupHandlesKHR := TvkGetRayTracingCaptureReplayShaderGroupHandlesKHR(vkGetProcAddress('vkGetRayTracingCaptureReplayShaderGroupHandlesKHR'));
        vkGetAccelerationStructureHandleNV := TvkGetAccelerationStructureHandleNV(vkGetProcAddress('vkGetAccelerationStructureHandleNV'));
        vkCreateRayTracingPipelinesNV := TvkCreateRayTracingPipelinesNV(vkGetProcAddress('vkCreateRayTracingPipelinesNV'));
        vkCreateRayTracingPipelinesKHR := TvkCreateRayTracingPipelinesKHR(vkGetProcAddress('vkCreateRayTracingPipelinesKHR'));
        vkGetPhysicalDeviceCooperativeMatrixPropertiesNV := TvkGetPhysicalDeviceCooperativeMatrixPropertiesNV(vkGetProcAddress('vkGetPhysicalDeviceCooperativeMatrixPropertiesNV'));
        vkCmdTraceRaysIndirectKHR := TvkCmdTraceRaysIndirectKHR(vkGetProcAddress('vkCmdTraceRaysIndirectKHR'));
        vkGetDeviceAccelerationStructureCompatibilityKHR := TvkGetDeviceAccelerationStructureCompatibilityKHR(vkGetProcAddress('vkGetDeviceAccelerationStructureCompatibilityKHR'));
        vkGetImageViewHandleNVX := TvkGetImageViewHandleNVX(vkGetProcAddress('vkGetImageViewHandleNVX'));
        vkGetImageViewAddressNVX := TvkGetImageViewAddressNVX(vkGetProcAddress('vkGetImageViewAddressNVX'));
        vkGetPhysicalDeviceSurfacePresentModes2EXT := TvkGetPhysicalDeviceSurfacePresentModes2EXT(vkGetProcAddress('vkGetPhysicalDeviceSurfacePresentModes2EXT'));
        vkGetDeviceGroupSurfacePresentModes2EXT := TvkGetDeviceGroupSurfacePresentModes2EXT(vkGetProcAddress('vkGetDeviceGroupSurfacePresentModes2EXT'));
        vkAcquireFullScreenExclusiveModeEXT := TvkAcquireFullScreenExclusiveModeEXT(vkGetProcAddress('vkAcquireFullScreenExclusiveModeEXT'));
        vkReleaseFullScreenExclusiveModeEXT := TvkReleaseFullScreenExclusiveModeEXT(vkGetProcAddress('vkReleaseFullScreenExclusiveModeEXT'));
        vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR := TvkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(vkGetProcAddress('vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'));
        vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR := TvkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(vkGetProcAddress('vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR'));
        vkAcquireProfilingLockKHR := TvkAcquireProfilingLockKHR(vkGetProcAddress('vkAcquireProfilingLockKHR'));
        vkReleaseProfilingLockKHR := TvkReleaseProfilingLockKHR(vkGetProcAddress('vkReleaseProfilingLockKHR'));
        vkGetImageDrmFormatModifierPropertiesEXT := TvkGetImageDrmFormatModifierPropertiesEXT(vkGetProcAddress('vkGetImageDrmFormatModifierPropertiesEXT'));
        vkGetBufferOpaqueCaptureAddress := TvkGetBufferOpaqueCaptureAddress(vkGetProcAddress('vkGetBufferOpaqueCaptureAddress'));
        vkGetBufferOpaqueCaptureAddressKHR := TvkGetBufferOpaqueCaptureAddressKHR(vkGetProcAddress('vkGetBufferOpaqueCaptureAddressKHR'));
        vkGetBufferDeviceAddress := TvkGetBufferDeviceAddress(vkGetProcAddress('vkGetBufferDeviceAddress'));
        vkGetBufferDeviceAddressKHR := TvkGetBufferDeviceAddressKHR(vkGetProcAddress('vkGetBufferDeviceAddressKHR'));
        vkGetBufferDeviceAddressEXT := TvkGetBufferDeviceAddressEXT(vkGetProcAddress('vkGetBufferDeviceAddressEXT'));
        vkCreateHeadlessSurfaceEXT := TvkCreateHeadlessSurfaceEXT(vkGetProcAddress('vkCreateHeadlessSurfaceEXT'));
        vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV := TvkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(vkGetProcAddress('vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV'));
        vkInitializePerformanceApiINTEL := TvkInitializePerformanceApiINTEL(vkGetProcAddress('vkInitializePerformanceApiINTEL'));
        vkUninitializePerformanceApiINTEL := TvkUninitializePerformanceApiINTEL(vkGetProcAddress('vkUninitializePerformanceApiINTEL'));
        vkCmdSetPerformanceMarkerINTEL := TvkCmdSetPerformanceMarkerINTEL(vkGetProcAddress('vkCmdSetPerformanceMarkerINTEL'));
        vkCmdSetPerformanceStreamMarkerINTEL := TvkCmdSetPerformanceStreamMarkerINTEL(vkGetProcAddress('vkCmdSetPerformanceStreamMarkerINTEL'));
        vkCmdSetPerformanceOverrideINTEL := TvkCmdSetPerformanceOverrideINTEL(vkGetProcAddress('vkCmdSetPerformanceOverrideINTEL'));
        vkAcquirePerformanceConfigurationINTEL := TvkAcquirePerformanceConfigurationINTEL(vkGetProcAddress('vkAcquirePerformanceConfigurationINTEL'));
        vkReleasePerformanceConfigurationINTEL := TvkReleasePerformanceConfigurationINTEL(vkGetProcAddress('vkReleasePerformanceConfigurationINTEL'));
        vkQueueSetPerformanceConfigurationINTEL := TvkQueueSetPerformanceConfigurationINTEL(vkGetProcAddress('vkQueueSetPerformanceConfigurationINTEL'));
        vkGetPerformanceParameterINTEL := TvkGetPerformanceParameterINTEL(vkGetProcAddress('vkGetPerformanceParameterINTEL'));
        vkGetDeviceMemoryOpaqueCaptureAddress := TvkGetDeviceMemoryOpaqueCaptureAddress(vkGetProcAddress('vkGetDeviceMemoryOpaqueCaptureAddress'));
        vkGetDeviceMemoryOpaqueCaptureAddressKHR := TvkGetDeviceMemoryOpaqueCaptureAddressKHR(vkGetProcAddress('vkGetDeviceMemoryOpaqueCaptureAddressKHR'));
        vkGetPipelineExecutablePropertiesKHR := TvkGetPipelineExecutablePropertiesKHR(vkGetProcAddress('vkGetPipelineExecutablePropertiesKHR'));
        vkGetPipelineExecutableStatisticsKHR := TvkGetPipelineExecutableStatisticsKHR(vkGetProcAddress('vkGetPipelineExecutableStatisticsKHR'));
        vkGetPipelineExecutableInternalRepresentationsKHR := TvkGetPipelineExecutableInternalRepresentationsKHR(vkGetProcAddress('vkGetPipelineExecutableInternalRepresentationsKHR'));
        vkCmdSetLineStippleEXT := TvkCmdSetLineStippleEXT(vkGetProcAddress('vkCmdSetLineStippleEXT'));
        vkGetPhysicalDeviceToolPropertiesEXT := TvkGetPhysicalDeviceToolPropertiesEXT(vkGetProcAddress('vkGetPhysicalDeviceToolPropertiesEXT'));
        vkCreateAccelerationStructureKHR := TvkCreateAccelerationStructureKHR(vkGetProcAddress('vkCreateAccelerationStructureKHR'));
        vkCmdBuildAccelerationStructureKHR := TvkCmdBuildAccelerationStructureKHR(vkGetProcAddress('vkCmdBuildAccelerationStructureKHR'));
        vkCmdBuildAccelerationStructureIndirectKHR := TvkCmdBuildAccelerationStructureIndirectKHR(vkGetProcAddress('vkCmdBuildAccelerationStructureIndirectKHR'));
        vkBuildAccelerationStructureKHR := TvkBuildAccelerationStructureKHR(vkGetProcAddress('vkBuildAccelerationStructureKHR'));
        vkGetAccelerationStructureDeviceAddressKHR := TvkGetAccelerationStructureDeviceAddressKHR(vkGetProcAddress('vkGetAccelerationStructureDeviceAddressKHR'));
        vkCreateDeferredOperationKHR := TvkCreateDeferredOperationKHR(vkGetProcAddress('vkCreateDeferredOperationKHR'));
        vkDestroyDeferredOperationKHR := TvkDestroyDeferredOperationKHR(vkGetProcAddress('vkDestroyDeferredOperationKHR'));
        vkGetDeferredOperationMaxConcurrencyKHR := TvkGetDeferredOperationMaxConcurrencyKHR(vkGetProcAddress('vkGetDeferredOperationMaxConcurrencyKHR'));
        vkGetDeferredOperationResultKHR := TvkGetDeferredOperationResultKHR(vkGetProcAddress('vkGetDeferredOperationResultKHR'));
        vkDeferredOperationJoinKHR := TvkDeferredOperationJoinKHR(vkGetProcAddress('vkDeferredOperationJoinKHR'));
        vkCmdSetCullModeEXT := TvkCmdSetCullModeEXT(vkGetProcAddress('vkCmdSetCullModeEXT'));
        vkCmdSetFrontFaceEXT := TvkCmdSetFrontFaceEXT(vkGetProcAddress('vkCmdSetFrontFaceEXT'));
        vkCmdSetPrimitiveTopologyEXT := TvkCmdSetPrimitiveTopologyEXT(vkGetProcAddress('vkCmdSetPrimitiveTopologyEXT'));
        vkCmdSetViewportWithCountEXT := TvkCmdSetViewportWithCountEXT(vkGetProcAddress('vkCmdSetViewportWithCountEXT'));
        vkCmdSetScissorWithCountEXT := TvkCmdSetScissorWithCountEXT(vkGetProcAddress('vkCmdSetScissorWithCountEXT'));
        vkCmdBindVertexBuffers2EXT := TvkCmdBindVertexBuffers2EXT(vkGetProcAddress('vkCmdBindVertexBuffers2EXT'));
        vkCmdSetDepthTestEnableEXT := TvkCmdSetDepthTestEnableEXT(vkGetProcAddress('vkCmdSetDepthTestEnableEXT'));
        vkCmdSetDepthWriteEnableEXT := TvkCmdSetDepthWriteEnableEXT(vkGetProcAddress('vkCmdSetDepthWriteEnableEXT'));
        vkCmdSetDepthCompareOpEXT := TvkCmdSetDepthCompareOpEXT(vkGetProcAddress('vkCmdSetDepthCompareOpEXT'));
        vkCmdSetDepthBoundsTestEnableEXT := TvkCmdSetDepthBoundsTestEnableEXT(vkGetProcAddress('vkCmdSetDepthBoundsTestEnableEXT'));
        vkCmdSetStencilTestEnableEXT := TvkCmdSetStencilTestEnableEXT(vkGetProcAddress('vkCmdSetStencilTestEnableEXT'));
        vkCmdSetStencilOpEXT := TvkCmdSetStencilOpEXT(vkGetProcAddress('vkCmdSetStencilOpEXT'));
        vkCreatePrivateDataSlotEXT := TvkCreatePrivateDataSlotEXT(vkGetProcAddress('vkCreatePrivateDataSlotEXT'));
        vkDestroyPrivateDataSlotEXT := TvkDestroyPrivateDataSlotEXT(vkGetProcAddress('vkDestroyPrivateDataSlotEXT'));
        vkSetPrivateDataEXT := TvkSetPrivateDataEXT(vkGetProcAddress('vkSetPrivateDataEXT'));
        vkGetPrivateDataEXT := TvkGetPrivateDataEXT(vkGetProcAddress('vkGetPrivateDataEXT'));

 vkoAPIInitialize(aLibName)

end;


function vkoAPIInitialize(const aLibName: String = VK_DEFAULT_LIB_NAME): Boolean;
begin
 if vkLibHandle = InvalidLibHandle then
    vkLibHandle := vkLoadLibrary(aLibName);

  result := (vkLibHandle <> InvalidLibHandle);

  if not result then exit;

//.... Only 4 Vulkan functions loaded as Global functions ....

  vkOCreateInstance:= TvkCreateInstance(vkGetProcAddress('vkCreateInstance'));
  vkOGetInstanceProcAddr:= TvkGetInstanceProcAddr(vkGetProcAddress('vkGetInstanceProcAddr'));
  vkOEnumerateInstanceExtensionProperties:= TvkEnumerateInstanceExtensionProperties(vkGetProcAddress('vkEnumerateInstanceExtensionProperties'));
  vkOEnumerateInstanceLayerProperties:= TvkEnumerateInstanceLayerProperties(vkGetProcAddress('vkEnumerateInstanceLayerProperties'));

  if vkCreateInstance=nil then vkCreateInstance:=vkOCreateInstance;
  if vkGetInstanceProcAddr=nil then vkGetInstanceProcAddr:=vkOGetInstanceProcAddr;
  if vkEnumerateInstanceExtensionProperties=nil then vkEnumerateInstanceExtensionProperties:=vkOEnumerateInstanceExtensionProperties;
  if vkEnumerateInstanceLayerProperties=nil then vkEnumerateInstanceLayerProperties:=vkOEnumerateInstanceLayerProperties;
end;

function vkoLoadInstanceFunctions(const aInstance: TVkInstance): TVkInstanceFunctions;
  //.....................
  function _GetProcAddress(const aName: String): TPFN_vkVoidFunction;
  begin
    result := vkOGetInstanceProcAddr(aInstance, PVkChar(aName));
  end;
  //.....................
begin
  result  := TVkInstanceFunctions.Create;
  try
    result.aaInstance := aInstance;
    with result do begin
    //............................ Total Instance Functions: 438
        vkCreateInstance := TvkCreateInstance(_GetProcAddress('vkCreateInstance'));
        vkDestroyInstance := TvkDestroyInstance(_GetProcAddress('vkDestroyInstance'));
        vkEnumeratePhysicalDevices := TvkEnumeratePhysicalDevices(_GetProcAddress('vkEnumeratePhysicalDevices'));
        vkGetDeviceProcAddr := TvkGetDeviceProcAddr(_GetProcAddress('vkGetDeviceProcAddr'));
        vkGetInstanceProcAddr := TvkGetInstanceProcAddr(_GetProcAddress('vkGetInstanceProcAddr'));
        vkGetPhysicalDeviceProperties := TvkGetPhysicalDeviceProperties(_GetProcAddress('vkGetPhysicalDeviceProperties'));
        vkGetPhysicalDeviceQueueFamilyProperties := TvkGetPhysicalDeviceQueueFamilyProperties(_GetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties'));
        vkGetPhysicalDeviceMemoryProperties := TvkGetPhysicalDeviceMemoryProperties(_GetProcAddress('vkGetPhysicalDeviceMemoryProperties'));
        vkGetPhysicalDeviceFeatures := TvkGetPhysicalDeviceFeatures(_GetProcAddress('vkGetPhysicalDeviceFeatures'));
        vkGetPhysicalDeviceFormatProperties := TvkGetPhysicalDeviceFormatProperties(_GetProcAddress('vkGetPhysicalDeviceFormatProperties'));
        vkGetPhysicalDeviceImageFormatProperties := TvkGetPhysicalDeviceImageFormatProperties(_GetProcAddress('vkGetPhysicalDeviceImageFormatProperties'));
        vkCreateDevice := TvkCreateDevice(_GetProcAddress('vkCreateDevice'));
        vkDestroyDevice := TvkDestroyDevice(_GetProcAddress('vkDestroyDevice'));
        vkEnumerateInstanceVersion := TvkEnumerateInstanceVersion(_GetProcAddress('vkEnumerateInstanceVersion'));
        vkEnumerateInstanceLayerProperties := TvkEnumerateInstanceLayerProperties(_GetProcAddress('vkEnumerateInstanceLayerProperties'));
        vkEnumerateInstanceExtensionProperties := TvkEnumerateInstanceExtensionProperties(_GetProcAddress('vkEnumerateInstanceExtensionProperties'));
        vkEnumerateDeviceLayerProperties := TvkEnumerateDeviceLayerProperties(_GetProcAddress('vkEnumerateDeviceLayerProperties'));
        vkEnumerateDeviceExtensionProperties := TvkEnumerateDeviceExtensionProperties(_GetProcAddress('vkEnumerateDeviceExtensionProperties'));
        vkGetDeviceQueue := TvkGetDeviceQueue(_GetProcAddress('vkGetDeviceQueue'));
        vkQueueSubmit := TvkQueueSubmit(_GetProcAddress('vkQueueSubmit'));
        vkQueueWaitIdle := TvkQueueWaitIdle(_GetProcAddress('vkQueueWaitIdle'));
        vkDeviceWaitIdle := TvkDeviceWaitIdle(_GetProcAddress('vkDeviceWaitIdle'));
        vkAllocateMemory := TvkAllocateMemory(_GetProcAddress('vkAllocateMemory'));
        vkFreeMemory := TvkFreeMemory(_GetProcAddress('vkFreeMemory'));
        vkMapMemory := TvkMapMemory(_GetProcAddress('vkMapMemory'));
        vkUnmapMemory := TvkUnmapMemory(_GetProcAddress('vkUnmapMemory'));
        vkFlushMappedMemoryRanges := TvkFlushMappedMemoryRanges(_GetProcAddress('vkFlushMappedMemoryRanges'));
        vkInvalidateMappedMemoryRanges := TvkInvalidateMappedMemoryRanges(_GetProcAddress('vkInvalidateMappedMemoryRanges'));
        vkGetDeviceMemoryCommitment := TvkGetDeviceMemoryCommitment(_GetProcAddress('vkGetDeviceMemoryCommitment'));
        vkGetBufferMemoryRequirements := TvkGetBufferMemoryRequirements(_GetProcAddress('vkGetBufferMemoryRequirements'));
        vkBindBufferMemory := TvkBindBufferMemory(_GetProcAddress('vkBindBufferMemory'));
        vkGetImageMemoryRequirements := TvkGetImageMemoryRequirements(_GetProcAddress('vkGetImageMemoryRequirements'));
        vkBindImageMemory := TvkBindImageMemory(_GetProcAddress('vkBindImageMemory'));
        vkGetImageSparseMemoryRequirements := TvkGetImageSparseMemoryRequirements(_GetProcAddress('vkGetImageSparseMemoryRequirements'));
        vkGetPhysicalDeviceSparseImageFormatProperties := TvkGetPhysicalDeviceSparseImageFormatProperties(_GetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties'));
        vkQueueBindSparse := TvkQueueBindSparse(_GetProcAddress('vkQueueBindSparse'));
        vkCreateFence := TvkCreateFence(_GetProcAddress('vkCreateFence'));
        vkDestroyFence := TvkDestroyFence(_GetProcAddress('vkDestroyFence'));
        vkResetFences := TvkResetFences(_GetProcAddress('vkResetFences'));
        vkGetFenceStatus := TvkGetFenceStatus(_GetProcAddress('vkGetFenceStatus'));
        vkWaitForFences := TvkWaitForFences(_GetProcAddress('vkWaitForFences'));
        vkCreateSemaphore := TvkCreateSemaphore(_GetProcAddress('vkCreateSemaphore'));
        vkDestroySemaphore := TvkDestroySemaphore(_GetProcAddress('vkDestroySemaphore'));
        vkCreateEvent := TvkCreateEvent(_GetProcAddress('vkCreateEvent'));
        vkDestroyEvent := TvkDestroyEvent(_GetProcAddress('vkDestroyEvent'));
        vkGetEventStatus := TvkGetEventStatus(_GetProcAddress('vkGetEventStatus'));
        vkSetEvent := TvkSetEvent(_GetProcAddress('vkSetEvent'));
        vkResetEvent := TvkResetEvent(_GetProcAddress('vkResetEvent'));
        vkCreateQueryPool := TvkCreateQueryPool(_GetProcAddress('vkCreateQueryPool'));
        vkDestroyQueryPool := TvkDestroyQueryPool(_GetProcAddress('vkDestroyQueryPool'));
        vkGetQueryPoolResults := TvkGetQueryPoolResults(_GetProcAddress('vkGetQueryPoolResults'));
        vkResetQueryPool := TvkResetQueryPool(_GetProcAddress('vkResetQueryPool'));
        vkResetQueryPoolEXT := TvkResetQueryPoolEXT(_GetProcAddress('vkResetQueryPoolEXT'));
        vkCreateBuffer := TvkCreateBuffer(_GetProcAddress('vkCreateBuffer'));
        vkDestroyBuffer := TvkDestroyBuffer(_GetProcAddress('vkDestroyBuffer'));
        vkCreateBufferView := TvkCreateBufferView(_GetProcAddress('vkCreateBufferView'));
        vkDestroyBufferView := TvkDestroyBufferView(_GetProcAddress('vkDestroyBufferView'));
        vkCreateImage := TvkCreateImage(_GetProcAddress('vkCreateImage'));
        vkDestroyImage := TvkDestroyImage(_GetProcAddress('vkDestroyImage'));
        vkGetImageSubresourceLayout := TvkGetImageSubresourceLayout(_GetProcAddress('vkGetImageSubresourceLayout'));
        vkCreateImageView := TvkCreateImageView(_GetProcAddress('vkCreateImageView'));
        vkDestroyImageView := TvkDestroyImageView(_GetProcAddress('vkDestroyImageView'));
        vkCreateShaderModule := TvkCreateShaderModule(_GetProcAddress('vkCreateShaderModule'));
        vkDestroyShaderModule := TvkDestroyShaderModule(_GetProcAddress('vkDestroyShaderModule'));
        vkCreatePipelineCache := TvkCreatePipelineCache(_GetProcAddress('vkCreatePipelineCache'));
        vkDestroyPipelineCache := TvkDestroyPipelineCache(_GetProcAddress('vkDestroyPipelineCache'));
        vkGetPipelineCacheData := TvkGetPipelineCacheData(_GetProcAddress('vkGetPipelineCacheData'));
        vkMergePipelineCaches := TvkMergePipelineCaches(_GetProcAddress('vkMergePipelineCaches'));
        vkCreateGraphicsPipelines := TvkCreateGraphicsPipelines(_GetProcAddress('vkCreateGraphicsPipelines'));
        vkCreateComputePipelines := TvkCreateComputePipelines(_GetProcAddress('vkCreateComputePipelines'));
        vkDestroyPipeline := TvkDestroyPipeline(_GetProcAddress('vkDestroyPipeline'));
        vkCreatePipelineLayout := TvkCreatePipelineLayout(_GetProcAddress('vkCreatePipelineLayout'));
        vkDestroyPipelineLayout := TvkDestroyPipelineLayout(_GetProcAddress('vkDestroyPipelineLayout'));
        vkCreateSampler := TvkCreateSampler(_GetProcAddress('vkCreateSampler'));
        vkDestroySampler := TvkDestroySampler(_GetProcAddress('vkDestroySampler'));
        vkCreateDescriptorSetLayout := TvkCreateDescriptorSetLayout(_GetProcAddress('vkCreateDescriptorSetLayout'));
        vkDestroyDescriptorSetLayout := TvkDestroyDescriptorSetLayout(_GetProcAddress('vkDestroyDescriptorSetLayout'));
        vkCreateDescriptorPool := TvkCreateDescriptorPool(_GetProcAddress('vkCreateDescriptorPool'));
        vkDestroyDescriptorPool := TvkDestroyDescriptorPool(_GetProcAddress('vkDestroyDescriptorPool'));
        vkResetDescriptorPool := TvkResetDescriptorPool(_GetProcAddress('vkResetDescriptorPool'));
        vkAllocateDescriptorSets := TvkAllocateDescriptorSets(_GetProcAddress('vkAllocateDescriptorSets'));
        vkFreeDescriptorSets := TvkFreeDescriptorSets(_GetProcAddress('vkFreeDescriptorSets'));
        vkUpdateDescriptorSets := TvkUpdateDescriptorSets(_GetProcAddress('vkUpdateDescriptorSets'));
        vkCreateFramebuffer := TvkCreateFramebuffer(_GetProcAddress('vkCreateFramebuffer'));
        vkDestroyFramebuffer := TvkDestroyFramebuffer(_GetProcAddress('vkDestroyFramebuffer'));
        vkCreateRenderPass := TvkCreateRenderPass(_GetProcAddress('vkCreateRenderPass'));
        vkDestroyRenderPass := TvkDestroyRenderPass(_GetProcAddress('vkDestroyRenderPass'));
        vkGetRenderAreaGranularity := TvkGetRenderAreaGranularity(_GetProcAddress('vkGetRenderAreaGranularity'));
        vkCreateCommandPool := TvkCreateCommandPool(_GetProcAddress('vkCreateCommandPool'));
        vkDestroyCommandPool := TvkDestroyCommandPool(_GetProcAddress('vkDestroyCommandPool'));
        vkResetCommandPool := TvkResetCommandPool(_GetProcAddress('vkResetCommandPool'));
        vkAllocateCommandBuffers := TvkAllocateCommandBuffers(_GetProcAddress('vkAllocateCommandBuffers'));
        vkFreeCommandBuffers := TvkFreeCommandBuffers(_GetProcAddress('vkFreeCommandBuffers'));
        vkBeginCommandBuffer := TvkBeginCommandBuffer(_GetProcAddress('vkBeginCommandBuffer'));
        vkEndCommandBuffer := TvkEndCommandBuffer(_GetProcAddress('vkEndCommandBuffer'));
        vkResetCommandBuffer := TvkResetCommandBuffer(_GetProcAddress('vkResetCommandBuffer'));
        vkCmdBindPipeline := TvkCmdBindPipeline(_GetProcAddress('vkCmdBindPipeline'));
        vkCmdSetViewport := TvkCmdSetViewport(_GetProcAddress('vkCmdSetViewport'));
        vkCmdSetScissor := TvkCmdSetScissor(_GetProcAddress('vkCmdSetScissor'));
        vkCmdSetLineWidth := TvkCmdSetLineWidth(_GetProcAddress('vkCmdSetLineWidth'));
        vkCmdSetDepthBias := TvkCmdSetDepthBias(_GetProcAddress('vkCmdSetDepthBias'));
        vkCmdSetBlendConstants := TvkCmdSetBlendConstants(_GetProcAddress('vkCmdSetBlendConstants'));
        vkCmdSetDepthBounds := TvkCmdSetDepthBounds(_GetProcAddress('vkCmdSetDepthBounds'));
        vkCmdSetStencilCompareMask := TvkCmdSetStencilCompareMask(_GetProcAddress('vkCmdSetStencilCompareMask'));
        vkCmdSetStencilWriteMask := TvkCmdSetStencilWriteMask(_GetProcAddress('vkCmdSetStencilWriteMask'));
        vkCmdSetStencilReference := TvkCmdSetStencilReference(_GetProcAddress('vkCmdSetStencilReference'));
        vkCmdBindDescriptorSets := TvkCmdBindDescriptorSets(_GetProcAddress('vkCmdBindDescriptorSets'));
        vkCmdBindIndexBuffer := TvkCmdBindIndexBuffer(_GetProcAddress('vkCmdBindIndexBuffer'));
        vkCmdBindVertexBuffers := TvkCmdBindVertexBuffers(_GetProcAddress('vkCmdBindVertexBuffers'));
        vkCmdDraw := TvkCmdDraw(_GetProcAddress('vkCmdDraw'));
        vkCmdDrawIndexed := TvkCmdDrawIndexed(_GetProcAddress('vkCmdDrawIndexed'));
        vkCmdDrawIndirect := TvkCmdDrawIndirect(_GetProcAddress('vkCmdDrawIndirect'));
        vkCmdDrawIndexedIndirect := TvkCmdDrawIndexedIndirect(_GetProcAddress('vkCmdDrawIndexedIndirect'));
        vkCmdDispatch := TvkCmdDispatch(_GetProcAddress('vkCmdDispatch'));
        vkCmdDispatchIndirect := TvkCmdDispatchIndirect(_GetProcAddress('vkCmdDispatchIndirect'));
        vkCmdCopyBuffer := TvkCmdCopyBuffer(_GetProcAddress('vkCmdCopyBuffer'));
        vkCmdCopyImage := TvkCmdCopyImage(_GetProcAddress('vkCmdCopyImage'));
        vkCmdBlitImage := TvkCmdBlitImage(_GetProcAddress('vkCmdBlitImage'));
        vkCmdCopyBufferToImage := TvkCmdCopyBufferToImage(_GetProcAddress('vkCmdCopyBufferToImage'));
        vkCmdCopyImageToBuffer := TvkCmdCopyImageToBuffer(_GetProcAddress('vkCmdCopyImageToBuffer'));
        vkCmdUpdateBuffer := TvkCmdUpdateBuffer(_GetProcAddress('vkCmdUpdateBuffer'));
        vkCmdFillBuffer := TvkCmdFillBuffer(_GetProcAddress('vkCmdFillBuffer'));
        vkCmdClearColorImage := TvkCmdClearColorImage(_GetProcAddress('vkCmdClearColorImage'));
        vkCmdClearDepthStencilImage := TvkCmdClearDepthStencilImage(_GetProcAddress('vkCmdClearDepthStencilImage'));
        vkCmdClearAttachments := TvkCmdClearAttachments(_GetProcAddress('vkCmdClearAttachments'));
        vkCmdResolveImage := TvkCmdResolveImage(_GetProcAddress('vkCmdResolveImage'));
        vkCmdSetEvent := TvkCmdSetEvent(_GetProcAddress('vkCmdSetEvent'));
        vkCmdResetEvent := TvkCmdResetEvent(_GetProcAddress('vkCmdResetEvent'));
        vkCmdWaitEvents := TvkCmdWaitEvents(_GetProcAddress('vkCmdWaitEvents'));
        vkCmdPipelineBarrier := TvkCmdPipelineBarrier(_GetProcAddress('vkCmdPipelineBarrier'));
        vkCmdBeginQuery := TvkCmdBeginQuery(_GetProcAddress('vkCmdBeginQuery'));
        vkCmdEndQuery := TvkCmdEndQuery(_GetProcAddress('vkCmdEndQuery'));
        vkCmdBeginConditionalRenderingEXT := TvkCmdBeginConditionalRenderingEXT(_GetProcAddress('vkCmdBeginConditionalRenderingEXT'));
        vkCmdEndConditionalRenderingEXT := TvkCmdEndConditionalRenderingEXT(_GetProcAddress('vkCmdEndConditionalRenderingEXT'));
        vkCmdResetQueryPool := TvkCmdResetQueryPool(_GetProcAddress('vkCmdResetQueryPool'));
        vkCmdWriteTimestamp := TvkCmdWriteTimestamp(_GetProcAddress('vkCmdWriteTimestamp'));
        vkCmdCopyQueryPoolResults := TvkCmdCopyQueryPoolResults(_GetProcAddress('vkCmdCopyQueryPoolResults'));
        vkCmdPushConstants := TvkCmdPushConstants(_GetProcAddress('vkCmdPushConstants'));
        vkCmdBeginRenderPass := TvkCmdBeginRenderPass(_GetProcAddress('vkCmdBeginRenderPass'));
        vkCmdNextSubpass := TvkCmdNextSubpass(_GetProcAddress('vkCmdNextSubpass'));
        vkCmdEndRenderPass := TvkCmdEndRenderPass(_GetProcAddress('vkCmdEndRenderPass'));
        vkCmdExecuteCommands := TvkCmdExecuteCommands(_GetProcAddress('vkCmdExecuteCommands'));
       {$ifdef Android}
        vkCreateAndroidSurfaceKHR := TvkCreateAndroidSurfaceKHR(_GetProcAddress('vkCreateAndroidSurfaceKHR'));
       {$endif}
        vkGetPhysicalDeviceDisplayPropertiesKHR := TvkGetPhysicalDeviceDisplayPropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceDisplayPropertiesKHR'));
        vkGetPhysicalDeviceDisplayPlanePropertiesKHR := TvkGetPhysicalDeviceDisplayPlanePropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceDisplayPlanePropertiesKHR'));
        vkGetDisplayPlaneSupportedDisplaysKHR := TvkGetDisplayPlaneSupportedDisplaysKHR(_GetProcAddress('vkGetDisplayPlaneSupportedDisplaysKHR'));
        vkGetDisplayModePropertiesKHR := TvkGetDisplayModePropertiesKHR(_GetProcAddress('vkGetDisplayModePropertiesKHR'));
        vkCreateDisplayModeKHR := TvkCreateDisplayModeKHR(_GetProcAddress('vkCreateDisplayModeKHR'));
        vkGetDisplayPlaneCapabilitiesKHR := TvkGetDisplayPlaneCapabilitiesKHR(_GetProcAddress('vkGetDisplayPlaneCapabilitiesKHR'));
        vkCreateDisplayPlaneSurfaceKHR := TvkCreateDisplayPlaneSurfaceKHR(_GetProcAddress('vkCreateDisplayPlaneSurfaceKHR'));
        vkCreateSharedSwapchainsKHR := TvkCreateSharedSwapchainsKHR(_GetProcAddress('vkCreateSharedSwapchainsKHR'));
        vkDestroySurfaceKHR := TvkDestroySurfaceKHR(_GetProcAddress('vkDestroySurfaceKHR'));
        vkGetPhysicalDeviceSurfaceSupportKHR := TvkGetPhysicalDeviceSurfaceSupportKHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceSupportKHR'));
        vkGetPhysicalDeviceSurfaceCapabilitiesKHR := TvkGetPhysicalDeviceSurfaceCapabilitiesKHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceCapabilitiesKHR'));
        vkGetPhysicalDeviceSurfaceFormatsKHR := TvkGetPhysicalDeviceSurfaceFormatsKHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceFormatsKHR'));
        vkGetPhysicalDeviceSurfacePresentModesKHR := TvkGetPhysicalDeviceSurfacePresentModesKHR(_GetProcAddress('vkGetPhysicalDeviceSurfacePresentModesKHR'));
        vkCreateSwapchainKHR := TvkCreateSwapchainKHR(_GetProcAddress('vkCreateSwapchainKHR'));
        vkDestroySwapchainKHR := TvkDestroySwapchainKHR(_GetProcAddress('vkDestroySwapchainKHR'));
        vkGetSwapchainImagesKHR := TvkGetSwapchainImagesKHR(_GetProcAddress('vkGetSwapchainImagesKHR'));
        vkAcquireNextImageKHR := TvkAcquireNextImageKHR(_GetProcAddress('vkAcquireNextImageKHR'));
        vkQueuePresentKHR := TvkQueuePresentKHR(_GetProcAddress('vkQueuePresentKHR'));
        vkCreateViSurfaceNN := TvkCreateViSurfaceNN(_GetProcAddress('vkCreateViSurfaceNN'));
       {$ifdef Wayland}
        vkCreateWaylandSurfaceKHR := TvkCreateWaylandSurfaceKHR(_GetProcAddress('vkCreateWaylandSurfaceKHR'));
       {$endif}
       {$ifdef Wayland}
        vkGetPhysicalDeviceWaylandPresentationSupportKHR := TvkGetPhysicalDeviceWaylandPresentationSupportKHR(_GetProcAddress('vkGetPhysicalDeviceWaylandPresentationSupportKHR'));
       {$endif}
       {$ifdef Windows}
        vkCreateWin32SurfaceKHR := TvkCreateWin32SurfaceKHR(_GetProcAddress('vkCreateWin32SurfaceKHR'));
       {$endif}
       {$ifdef Windows}
        vkGetPhysicalDeviceWin32PresentationSupportKHR := TvkGetPhysicalDeviceWin32PresentationSupportKHR(_GetProcAddress('vkGetPhysicalDeviceWin32PresentationSupportKHR'));
       {$endif}
       {$ifdef XLIB}
        vkCreateXlibSurfaceKHR := TvkCreateXlibSurfaceKHR(_GetProcAddress('vkCreateXlibSurfaceKHR'));
       {$endif}
       {$ifdef XLIB}
        vkGetPhysicalDeviceXlibPresentationSupportKHR := TvkGetPhysicalDeviceXlibPresentationSupportKHR(_GetProcAddress('vkGetPhysicalDeviceXlibPresentationSupportKHR'));
       {$endif}
       {$ifdef XCB}
        vkCreateXcbSurfaceKHR := TvkCreateXcbSurfaceKHR(_GetProcAddress('vkCreateXcbSurfaceKHR'));
       {$endif}
       {$ifdef XCB}
        vkGetPhysicalDeviceXcbPresentationSupportKHR := TvkGetPhysicalDeviceXcbPresentationSupportKHR(_GetProcAddress('vkGetPhysicalDeviceXcbPresentationSupportKHR'));
       {$endif}
        vkCreateDirectFBSurfaceEXT := TvkCreateDirectFBSurfaceEXT(_GetProcAddress('vkCreateDirectFBSurfaceEXT'));
        vkGetPhysicalDeviceDirectFBPresentationSupportEXT := TvkGetPhysicalDeviceDirectFBPresentationSupportEXT(_GetProcAddress('vkGetPhysicalDeviceDirectFBPresentationSupportEXT'));
        vkCreateImagePipeSurfaceFUCHSIA := TvkCreateImagePipeSurfaceFUCHSIA(_GetProcAddress('vkCreateImagePipeSurfaceFUCHSIA'));
        vkCreateStreamDescriptorSurfaceGGP := TvkCreateStreamDescriptorSurfaceGGP(_GetProcAddress('vkCreateStreamDescriptorSurfaceGGP'));
        vkCreateDebugReportCallbackEXT := TvkCreateDebugReportCallbackEXT(_GetProcAddress('vkCreateDebugReportCallbackEXT'));
        vkDestroyDebugReportCallbackEXT := TvkDestroyDebugReportCallbackEXT(_GetProcAddress('vkDestroyDebugReportCallbackEXT'));
        vkDebugReportMessageEXT := TvkDebugReportMessageEXT(_GetProcAddress('vkDebugReportMessageEXT'));
        vkDebugMarkerSetObjectNameEXT := TvkDebugMarkerSetObjectNameEXT(_GetProcAddress('vkDebugMarkerSetObjectNameEXT'));
        vkDebugMarkerSetObjectTagEXT := TvkDebugMarkerSetObjectTagEXT(_GetProcAddress('vkDebugMarkerSetObjectTagEXT'));
        vkCmdDebugMarkerBeginEXT := TvkCmdDebugMarkerBeginEXT(_GetProcAddress('vkCmdDebugMarkerBeginEXT'));
        vkCmdDebugMarkerEndEXT := TvkCmdDebugMarkerEndEXT(_GetProcAddress('vkCmdDebugMarkerEndEXT'));
        vkCmdDebugMarkerInsertEXT := TvkCmdDebugMarkerInsertEXT(_GetProcAddress('vkCmdDebugMarkerInsertEXT'));
        vkGetPhysicalDeviceExternalImageFormatPropertiesNV := TvkGetPhysicalDeviceExternalImageFormatPropertiesNV(_GetProcAddress('vkGetPhysicalDeviceExternalImageFormatPropertiesNV'));
       {$ifdef Windows}
        vkGetMemoryWin32HandleNV := TvkGetMemoryWin32HandleNV(_GetProcAddress('vkGetMemoryWin32HandleNV'));
       {$endif}
        vkCmdExecuteGeneratedCommandsNV := TvkCmdExecuteGeneratedCommandsNV(_GetProcAddress('vkCmdExecuteGeneratedCommandsNV'));
        vkCmdPreprocessGeneratedCommandsNV := TvkCmdPreprocessGeneratedCommandsNV(_GetProcAddress('vkCmdPreprocessGeneratedCommandsNV'));
        vkCmdBindPipelineShaderGroupNV := TvkCmdBindPipelineShaderGroupNV(_GetProcAddress('vkCmdBindPipelineShaderGroupNV'));
        vkGetGeneratedCommandsMemoryRequirementsNV := TvkGetGeneratedCommandsMemoryRequirementsNV(_GetProcAddress('vkGetGeneratedCommandsMemoryRequirementsNV'));
        vkCreateIndirectCommandsLayoutNV := TvkCreateIndirectCommandsLayoutNV(_GetProcAddress('vkCreateIndirectCommandsLayoutNV'));
        vkDestroyIndirectCommandsLayoutNV := TvkDestroyIndirectCommandsLayoutNV(_GetProcAddress('vkDestroyIndirectCommandsLayoutNV'));
        vkGetPhysicalDeviceFeatures2 := TvkGetPhysicalDeviceFeatures2(_GetProcAddress('vkGetPhysicalDeviceFeatures2'));
        vkGetPhysicalDeviceFeatures2KHR := TvkGetPhysicalDeviceFeatures2KHR(_GetProcAddress('vkGetPhysicalDeviceFeatures2KHR'));
        vkGetPhysicalDeviceProperties2 := TvkGetPhysicalDeviceProperties2(_GetProcAddress('vkGetPhysicalDeviceProperties2'));
        vkGetPhysicalDeviceProperties2KHR := TvkGetPhysicalDeviceProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceProperties2KHR'));
        vkGetPhysicalDeviceFormatProperties2 := TvkGetPhysicalDeviceFormatProperties2(_GetProcAddress('vkGetPhysicalDeviceFormatProperties2'));
        vkGetPhysicalDeviceFormatProperties2KHR := TvkGetPhysicalDeviceFormatProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceFormatProperties2KHR'));
        vkGetPhysicalDeviceImageFormatProperties2 := TvkGetPhysicalDeviceImageFormatProperties2(_GetProcAddress('vkGetPhysicalDeviceImageFormatProperties2'));
        vkGetPhysicalDeviceImageFormatProperties2KHR := TvkGetPhysicalDeviceImageFormatProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceImageFormatProperties2KHR'));
        vkGetPhysicalDeviceQueueFamilyProperties2 := TvkGetPhysicalDeviceQueueFamilyProperties2(_GetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties2'));
        vkGetPhysicalDeviceQueueFamilyProperties2KHR := TvkGetPhysicalDeviceQueueFamilyProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties2KHR'));
        vkGetPhysicalDeviceMemoryProperties2 := TvkGetPhysicalDeviceMemoryProperties2(_GetProcAddress('vkGetPhysicalDeviceMemoryProperties2'));
        vkGetPhysicalDeviceMemoryProperties2KHR := TvkGetPhysicalDeviceMemoryProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceMemoryProperties2KHR'));
        vkGetPhysicalDeviceSparseImageFormatProperties2 := TvkGetPhysicalDeviceSparseImageFormatProperties2(_GetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties2'));
        vkGetPhysicalDeviceSparseImageFormatProperties2KHR := TvkGetPhysicalDeviceSparseImageFormatProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties2KHR'));
        vkCmdPushDescriptorSetKHR := TvkCmdPushDescriptorSetKHR(_GetProcAddress('vkCmdPushDescriptorSetKHR'));
        vkTrimCommandPool := TvkTrimCommandPool(_GetProcAddress('vkTrimCommandPool'));
        vkTrimCommandPoolKHR := TvkTrimCommandPoolKHR(_GetProcAddress('vkTrimCommandPoolKHR'));
        vkGetPhysicalDeviceExternalBufferProperties := TvkGetPhysicalDeviceExternalBufferProperties(_GetProcAddress('vkGetPhysicalDeviceExternalBufferProperties'));
        vkGetPhysicalDeviceExternalBufferPropertiesKHR := TvkGetPhysicalDeviceExternalBufferPropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceExternalBufferPropertiesKHR'));
       {$ifdef Windows}
        vkGetMemoryWin32HandleKHR := TvkGetMemoryWin32HandleKHR(_GetProcAddress('vkGetMemoryWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkGetMemoryWin32HandlePropertiesKHR := TvkGetMemoryWin32HandlePropertiesKHR(_GetProcAddress('vkGetMemoryWin32HandlePropertiesKHR'));
       {$endif}
        vkGetMemoryFdKHR := TvkGetMemoryFdKHR(_GetProcAddress('vkGetMemoryFdKHR'));
        vkGetMemoryFdPropertiesKHR := TvkGetMemoryFdPropertiesKHR(_GetProcAddress('vkGetMemoryFdPropertiesKHR'));
        vkGetPhysicalDeviceExternalSemaphoreProperties := TvkGetPhysicalDeviceExternalSemaphoreProperties(_GetProcAddress('vkGetPhysicalDeviceExternalSemaphoreProperties'));
        vkGetPhysicalDeviceExternalSemaphorePropertiesKHR := TvkGetPhysicalDeviceExternalSemaphorePropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceExternalSemaphorePropertiesKHR'));
       {$ifdef Windows}
        vkGetSemaphoreWin32HandleKHR := TvkGetSemaphoreWin32HandleKHR(_GetProcAddress('vkGetSemaphoreWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkImportSemaphoreWin32HandleKHR := TvkImportSemaphoreWin32HandleKHR(_GetProcAddress('vkImportSemaphoreWin32HandleKHR'));
       {$endif}
        vkGetSemaphoreFdKHR := TvkGetSemaphoreFdKHR(_GetProcAddress('vkGetSemaphoreFdKHR'));
        vkImportSemaphoreFdKHR := TvkImportSemaphoreFdKHR(_GetProcAddress('vkImportSemaphoreFdKHR'));
        vkGetPhysicalDeviceExternalFenceProperties := TvkGetPhysicalDeviceExternalFenceProperties(_GetProcAddress('vkGetPhysicalDeviceExternalFenceProperties'));
        vkGetPhysicalDeviceExternalFencePropertiesKHR := TvkGetPhysicalDeviceExternalFencePropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceExternalFencePropertiesKHR'));
       {$ifdef Windows}
        vkGetFenceWin32HandleKHR := TvkGetFenceWin32HandleKHR(_GetProcAddress('vkGetFenceWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkImportFenceWin32HandleKHR := TvkImportFenceWin32HandleKHR(_GetProcAddress('vkImportFenceWin32HandleKHR'));
       {$endif}
        vkGetFenceFdKHR := TvkGetFenceFdKHR(_GetProcAddress('vkGetFenceFdKHR'));
        vkImportFenceFdKHR := TvkImportFenceFdKHR(_GetProcAddress('vkImportFenceFdKHR'));
        vkReleaseDisplayEXT := TvkReleaseDisplayEXT(_GetProcAddress('vkReleaseDisplayEXT'));
       {$ifdef XLIB}
        vkAcquireXlibDisplayEXT := TvkAcquireXlibDisplayEXT(_GetProcAddress('vkAcquireXlibDisplayEXT'));
       {$endif}
       {$ifdef RandR}
        vkGetRandROutputDisplayEXT := TvkGetRandROutputDisplayEXT(_GetProcAddress('vkGetRandROutputDisplayEXT'));
       {$endif}
        vkDisplayPowerControlEXT := TvkDisplayPowerControlEXT(_GetProcAddress('vkDisplayPowerControlEXT'));
        vkRegisterDeviceEventEXT := TvkRegisterDeviceEventEXT(_GetProcAddress('vkRegisterDeviceEventEXT'));
        vkRegisterDisplayEventEXT := TvkRegisterDisplayEventEXT(_GetProcAddress('vkRegisterDisplayEventEXT'));
        vkGetSwapchainCounterEXT := TvkGetSwapchainCounterEXT(_GetProcAddress('vkGetSwapchainCounterEXT'));
        vkGetPhysicalDeviceSurfaceCapabilities2EXT := TvkGetPhysicalDeviceSurfaceCapabilities2EXT(_GetProcAddress('vkGetPhysicalDeviceSurfaceCapabilities2EXT'));
        vkEnumeratePhysicalDeviceGroups := TvkEnumeratePhysicalDeviceGroups(_GetProcAddress('vkEnumeratePhysicalDeviceGroups'));
        vkEnumeratePhysicalDeviceGroupsKHR := TvkEnumeratePhysicalDeviceGroupsKHR(_GetProcAddress('vkEnumeratePhysicalDeviceGroupsKHR'));
        vkGetDeviceGroupPeerMemoryFeatures := TvkGetDeviceGroupPeerMemoryFeatures(_GetProcAddress('vkGetDeviceGroupPeerMemoryFeatures'));
        vkGetDeviceGroupPeerMemoryFeaturesKHR := TvkGetDeviceGroupPeerMemoryFeaturesKHR(_GetProcAddress('vkGetDeviceGroupPeerMemoryFeaturesKHR'));
        vkBindBufferMemory2 := TvkBindBufferMemory2(_GetProcAddress('vkBindBufferMemory2'));
        vkBindBufferMemory2KHR := TvkBindBufferMemory2KHR(_GetProcAddress('vkBindBufferMemory2KHR'));
        vkBindImageMemory2 := TvkBindImageMemory2(_GetProcAddress('vkBindImageMemory2'));
        vkBindImageMemory2KHR := TvkBindImageMemory2KHR(_GetProcAddress('vkBindImageMemory2KHR'));
        vkCmdSetDeviceMask := TvkCmdSetDeviceMask(_GetProcAddress('vkCmdSetDeviceMask'));
        vkCmdSetDeviceMaskKHR := TvkCmdSetDeviceMaskKHR(_GetProcAddress('vkCmdSetDeviceMaskKHR'));
        vkGetDeviceGroupPresentCapabilitiesKHR := TvkGetDeviceGroupPresentCapabilitiesKHR(_GetProcAddress('vkGetDeviceGroupPresentCapabilitiesKHR'));
        vkGetDeviceGroupSurfacePresentModesKHR := TvkGetDeviceGroupSurfacePresentModesKHR(_GetProcAddress('vkGetDeviceGroupSurfacePresentModesKHR'));
        vkAcquireNextImage2KHR := TvkAcquireNextImage2KHR(_GetProcAddress('vkAcquireNextImage2KHR'));
        vkCmdDispatchBase := TvkCmdDispatchBase(_GetProcAddress('vkCmdDispatchBase'));
        vkCmdDispatchBaseKHR := TvkCmdDispatchBaseKHR(_GetProcAddress('vkCmdDispatchBaseKHR'));
        vkGetPhysicalDevicePresentRectanglesKHR := TvkGetPhysicalDevicePresentRectanglesKHR(_GetProcAddress('vkGetPhysicalDevicePresentRectanglesKHR'));
        vkCreateDescriptorUpdateTemplate := TvkCreateDescriptorUpdateTemplate(_GetProcAddress('vkCreateDescriptorUpdateTemplate'));
        vkCreateDescriptorUpdateTemplateKHR := TvkCreateDescriptorUpdateTemplateKHR(_GetProcAddress('vkCreateDescriptorUpdateTemplateKHR'));
        vkDestroyDescriptorUpdateTemplate := TvkDestroyDescriptorUpdateTemplate(_GetProcAddress('vkDestroyDescriptorUpdateTemplate'));
        vkDestroyDescriptorUpdateTemplateKHR := TvkDestroyDescriptorUpdateTemplateKHR(_GetProcAddress('vkDestroyDescriptorUpdateTemplateKHR'));
        vkUpdateDescriptorSetWithTemplate := TvkUpdateDescriptorSetWithTemplate(_GetProcAddress('vkUpdateDescriptorSetWithTemplate'));
        vkUpdateDescriptorSetWithTemplateKHR := TvkUpdateDescriptorSetWithTemplateKHR(_GetProcAddress('vkUpdateDescriptorSetWithTemplateKHR'));
        vkCmdPushDescriptorSetWithTemplateKHR := TvkCmdPushDescriptorSetWithTemplateKHR(_GetProcAddress('vkCmdPushDescriptorSetWithTemplateKHR'));
        vkSetHdrMetadataEXT := TvkSetHdrMetadataEXT(_GetProcAddress('vkSetHdrMetadataEXT'));
        vkGetSwapchainStatusKHR := TvkGetSwapchainStatusKHR(_GetProcAddress('vkGetSwapchainStatusKHR'));
        vkGetRefreshCycleDurationGOOGLE := TvkGetRefreshCycleDurationGOOGLE(_GetProcAddress('vkGetRefreshCycleDurationGOOGLE'));
        vkGetPastPresentationTimingGOOGLE := TvkGetPastPresentationTimingGOOGLE(_GetProcAddress('vkGetPastPresentationTimingGOOGLE'));
       {$ifdef MoltenVK_IOS}
        vkCreateIOSSurfaceMVK := TvkCreateIOSSurfaceMVK(_GetProcAddress('vkCreateIOSSurfaceMVK'));
       {$endif}
       {$ifdef MoltenVK_MacOS}
        vkCreateMacOSSurfaceMVK := TvkCreateMacOSSurfaceMVK(_GetProcAddress('vkCreateMacOSSurfaceMVK'));
       {$endif}
        vkCreateMetalSurfaceEXT := TvkCreateMetalSurfaceEXT(_GetProcAddress('vkCreateMetalSurfaceEXT'));
        vkCmdSetViewportWScalingNV := TvkCmdSetViewportWScalingNV(_GetProcAddress('vkCmdSetViewportWScalingNV'));
        vkCmdSetDiscardRectangleEXT := TvkCmdSetDiscardRectangleEXT(_GetProcAddress('vkCmdSetDiscardRectangleEXT'));
        vkCmdSetSampleLocationsEXT := TvkCmdSetSampleLocationsEXT(_GetProcAddress('vkCmdSetSampleLocationsEXT'));
        vkGetPhysicalDeviceMultisamplePropertiesEXT := TvkGetPhysicalDeviceMultisamplePropertiesEXT(_GetProcAddress('vkGetPhysicalDeviceMultisamplePropertiesEXT'));
        vkGetPhysicalDeviceSurfaceCapabilities2KHR := TvkGetPhysicalDeviceSurfaceCapabilities2KHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceCapabilities2KHR'));
        vkGetPhysicalDeviceSurfaceFormats2KHR := TvkGetPhysicalDeviceSurfaceFormats2KHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceFormats2KHR'));
        vkGetPhysicalDeviceDisplayProperties2KHR := TvkGetPhysicalDeviceDisplayProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceDisplayProperties2KHR'));
        vkGetPhysicalDeviceDisplayPlaneProperties2KHR := TvkGetPhysicalDeviceDisplayPlaneProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceDisplayPlaneProperties2KHR'));
        vkGetDisplayModeProperties2KHR := TvkGetDisplayModeProperties2KHR(_GetProcAddress('vkGetDisplayModeProperties2KHR'));
        vkGetDisplayPlaneCapabilities2KHR := TvkGetDisplayPlaneCapabilities2KHR(_GetProcAddress('vkGetDisplayPlaneCapabilities2KHR'));
        vkGetBufferMemoryRequirements2 := TvkGetBufferMemoryRequirements2(_GetProcAddress('vkGetBufferMemoryRequirements2'));
        vkGetBufferMemoryRequirements2KHR := TvkGetBufferMemoryRequirements2KHR(_GetProcAddress('vkGetBufferMemoryRequirements2KHR'));
        vkGetImageMemoryRequirements2 := TvkGetImageMemoryRequirements2(_GetProcAddress('vkGetImageMemoryRequirements2'));
        vkGetImageMemoryRequirements2KHR := TvkGetImageMemoryRequirements2KHR(_GetProcAddress('vkGetImageMemoryRequirements2KHR'));
        vkGetImageSparseMemoryRequirements2 := TvkGetImageSparseMemoryRequirements2(_GetProcAddress('vkGetImageSparseMemoryRequirements2'));
        vkGetImageSparseMemoryRequirements2KHR := TvkGetImageSparseMemoryRequirements2KHR(_GetProcAddress('vkGetImageSparseMemoryRequirements2KHR'));
        vkCreateSamplerYcbcrConversion := TvkCreateSamplerYcbcrConversion(_GetProcAddress('vkCreateSamplerYcbcrConversion'));
        vkCreateSamplerYcbcrConversionKHR := TvkCreateSamplerYcbcrConversionKHR(_GetProcAddress('vkCreateSamplerYcbcrConversionKHR'));
        vkDestroySamplerYcbcrConversion := TvkDestroySamplerYcbcrConversion(_GetProcAddress('vkDestroySamplerYcbcrConversion'));
        vkDestroySamplerYcbcrConversionKHR := TvkDestroySamplerYcbcrConversionKHR(_GetProcAddress('vkDestroySamplerYcbcrConversionKHR'));
        vkGetDeviceQueue2 := TvkGetDeviceQueue2(_GetProcAddress('vkGetDeviceQueue2'));
        vkCreateValidationCacheEXT := TvkCreateValidationCacheEXT(_GetProcAddress('vkCreateValidationCacheEXT'));
        vkDestroyValidationCacheEXT := TvkDestroyValidationCacheEXT(_GetProcAddress('vkDestroyValidationCacheEXT'));
        vkGetValidationCacheDataEXT := TvkGetValidationCacheDataEXT(_GetProcAddress('vkGetValidationCacheDataEXT'));
        vkMergeValidationCachesEXT := TvkMergeValidationCachesEXT(_GetProcAddress('vkMergeValidationCachesEXT'));
        vkGetDescriptorSetLayoutSupport := TvkGetDescriptorSetLayoutSupport(_GetProcAddress('vkGetDescriptorSetLayoutSupport'));
        vkGetDescriptorSetLayoutSupportKHR := TvkGetDescriptorSetLayoutSupportKHR(_GetProcAddress('vkGetDescriptorSetLayoutSupportKHR'));
        vkGetSwapchainGrallocUsageANDROID := TvkGetSwapchainGrallocUsageANDROID(_GetProcAddress('vkGetSwapchainGrallocUsageANDROID'));
       {$ifdef Android}
        vkGetSwapchainGrallocUsage2ANDROID := TvkGetSwapchainGrallocUsage2ANDROID(_GetProcAddress('vkGetSwapchainGrallocUsage2ANDROID'));
       {$endif}
        vkAcquireImageANDROID := TvkAcquireImageANDROID(_GetProcAddress('vkAcquireImageANDROID'));
        vkQueueSignalReleaseImageANDROID := TvkQueueSignalReleaseImageANDROID(_GetProcAddress('vkQueueSignalReleaseImageANDROID'));
        vkGetShaderInfoAMD := TvkGetShaderInfoAMD(_GetProcAddress('vkGetShaderInfoAMD'));
        vkSetLocalDimmingAMD := TvkSetLocalDimmingAMD(_GetProcAddress('vkSetLocalDimmingAMD'));
        vkGetPhysicalDeviceCalibrateableTimeDomainsEXT := TvkGetPhysicalDeviceCalibrateableTimeDomainsEXT(_GetProcAddress('vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'));
        vkGetCalibratedTimestampsEXT := TvkGetCalibratedTimestampsEXT(_GetProcAddress('vkGetCalibratedTimestampsEXT'));
        vkSetDebugUtilsObjectNameEXT := TvkSetDebugUtilsObjectNameEXT(_GetProcAddress('vkSetDebugUtilsObjectNameEXT'));
        vkSetDebugUtilsObjectTagEXT := TvkSetDebugUtilsObjectTagEXT(_GetProcAddress('vkSetDebugUtilsObjectTagEXT'));
        vkQueueBeginDebugUtilsLabelEXT := TvkQueueBeginDebugUtilsLabelEXT(_GetProcAddress('vkQueueBeginDebugUtilsLabelEXT'));
        vkQueueEndDebugUtilsLabelEXT := TvkQueueEndDebugUtilsLabelEXT(_GetProcAddress('vkQueueEndDebugUtilsLabelEXT'));
        vkQueueInsertDebugUtilsLabelEXT := TvkQueueInsertDebugUtilsLabelEXT(_GetProcAddress('vkQueueInsertDebugUtilsLabelEXT'));
        vkCmdBeginDebugUtilsLabelEXT := TvkCmdBeginDebugUtilsLabelEXT(_GetProcAddress('vkCmdBeginDebugUtilsLabelEXT'));
        vkCmdEndDebugUtilsLabelEXT := TvkCmdEndDebugUtilsLabelEXT(_GetProcAddress('vkCmdEndDebugUtilsLabelEXT'));
        vkCmdInsertDebugUtilsLabelEXT := TvkCmdInsertDebugUtilsLabelEXT(_GetProcAddress('vkCmdInsertDebugUtilsLabelEXT'));
        vkCreateDebugUtilsMessengerEXT := TvkCreateDebugUtilsMessengerEXT(_GetProcAddress('vkCreateDebugUtilsMessengerEXT'));
        vkDestroyDebugUtilsMessengerEXT := TvkDestroyDebugUtilsMessengerEXT(_GetProcAddress('vkDestroyDebugUtilsMessengerEXT'));
        vkSubmitDebugUtilsMessageEXT := TvkSubmitDebugUtilsMessageEXT(_GetProcAddress('vkSubmitDebugUtilsMessageEXT'));
        vkGetMemoryHostPointerPropertiesEXT := TvkGetMemoryHostPointerPropertiesEXT(_GetProcAddress('vkGetMemoryHostPointerPropertiesEXT'));
        vkCmdWriteBufferMarkerAMD := TvkCmdWriteBufferMarkerAMD(_GetProcAddress('vkCmdWriteBufferMarkerAMD'));
        vkCreateRenderPass2 := TvkCreateRenderPass2(_GetProcAddress('vkCreateRenderPass2'));
        vkCreateRenderPass2KHR := TvkCreateRenderPass2KHR(_GetProcAddress('vkCreateRenderPass2KHR'));
        vkCmdBeginRenderPass2 := TvkCmdBeginRenderPass2(_GetProcAddress('vkCmdBeginRenderPass2'));
        vkCmdBeginRenderPass2KHR := TvkCmdBeginRenderPass2KHR(_GetProcAddress('vkCmdBeginRenderPass2KHR'));
        vkCmdNextSubpass2 := TvkCmdNextSubpass2(_GetProcAddress('vkCmdNextSubpass2'));
        vkCmdNextSubpass2KHR := TvkCmdNextSubpass2KHR(_GetProcAddress('vkCmdNextSubpass2KHR'));
        vkCmdEndRenderPass2 := TvkCmdEndRenderPass2(_GetProcAddress('vkCmdEndRenderPass2'));
        vkCmdEndRenderPass2KHR := TvkCmdEndRenderPass2KHR(_GetProcAddress('vkCmdEndRenderPass2KHR'));
        vkGetSemaphoreCounterValue := TvkGetSemaphoreCounterValue(_GetProcAddress('vkGetSemaphoreCounterValue'));
        vkGetSemaphoreCounterValueKHR := TvkGetSemaphoreCounterValueKHR(_GetProcAddress('vkGetSemaphoreCounterValueKHR'));
        vkWaitSemaphores := TvkWaitSemaphores(_GetProcAddress('vkWaitSemaphores'));
        vkWaitSemaphoresKHR := TvkWaitSemaphoresKHR(_GetProcAddress('vkWaitSemaphoresKHR'));
        vkSignalSemaphore := TvkSignalSemaphore(_GetProcAddress('vkSignalSemaphore'));
        vkSignalSemaphoreKHR := TvkSignalSemaphoreKHR(_GetProcAddress('vkSignalSemaphoreKHR'));
       {$ifdef Android}
        vkGetAndroidHardwareBufferPropertiesANDROID := TvkGetAndroidHardwareBufferPropertiesANDROID(_GetProcAddress('vkGetAndroidHardwareBufferPropertiesANDROID'));
       {$endif}
       {$ifdef Android}
        vkGetMemoryAndroidHardwareBufferANDROID := TvkGetMemoryAndroidHardwareBufferANDROID(_GetProcAddress('vkGetMemoryAndroidHardwareBufferANDROID'));
       {$endif}
        vkCmdDrawIndirectCount := TvkCmdDrawIndirectCount(_GetProcAddress('vkCmdDrawIndirectCount'));
        vkCmdDrawIndirectCountKHR := TvkCmdDrawIndirectCountKHR(_GetProcAddress('vkCmdDrawIndirectCountKHR'));
        vkCmdDrawIndirectCountAMD := TvkCmdDrawIndirectCountAMD(_GetProcAddress('vkCmdDrawIndirectCountAMD'));
        vkCmdDrawIndexedIndirectCount := TvkCmdDrawIndexedIndirectCount(_GetProcAddress('vkCmdDrawIndexedIndirectCount'));
        vkCmdDrawIndexedIndirectCountKHR := TvkCmdDrawIndexedIndirectCountKHR(_GetProcAddress('vkCmdDrawIndexedIndirectCountKHR'));
        vkCmdDrawIndexedIndirectCountAMD := TvkCmdDrawIndexedIndirectCountAMD(_GetProcAddress('vkCmdDrawIndexedIndirectCountAMD'));
        vkCmdSetCheckpointNV := TvkCmdSetCheckpointNV(_GetProcAddress('vkCmdSetCheckpointNV'));
        vkGetQueueCheckpointDataNV := TvkGetQueueCheckpointDataNV(_GetProcAddress('vkGetQueueCheckpointDataNV'));
        vkCmdBindTransformFeedbackBuffersEXT := TvkCmdBindTransformFeedbackBuffersEXT(_GetProcAddress('vkCmdBindTransformFeedbackBuffersEXT'));
        vkCmdBeginTransformFeedbackEXT := TvkCmdBeginTransformFeedbackEXT(_GetProcAddress('vkCmdBeginTransformFeedbackEXT'));
        vkCmdEndTransformFeedbackEXT := TvkCmdEndTransformFeedbackEXT(_GetProcAddress('vkCmdEndTransformFeedbackEXT'));
        vkCmdBeginQueryIndexedEXT := TvkCmdBeginQueryIndexedEXT(_GetProcAddress('vkCmdBeginQueryIndexedEXT'));
        vkCmdEndQueryIndexedEXT := TvkCmdEndQueryIndexedEXT(_GetProcAddress('vkCmdEndQueryIndexedEXT'));
        vkCmdDrawIndirectByteCountEXT := TvkCmdDrawIndirectByteCountEXT(_GetProcAddress('vkCmdDrawIndirectByteCountEXT'));
        vkCmdSetExclusiveScissorNV := TvkCmdSetExclusiveScissorNV(_GetProcAddress('vkCmdSetExclusiveScissorNV'));
        vkCmdBindShadingRateImageNV := TvkCmdBindShadingRateImageNV(_GetProcAddress('vkCmdBindShadingRateImageNV'));
        vkCmdSetViewportShadingRatePaletteNV := TvkCmdSetViewportShadingRatePaletteNV(_GetProcAddress('vkCmdSetViewportShadingRatePaletteNV'));
        vkCmdSetCoarseSampleOrderNV := TvkCmdSetCoarseSampleOrderNV(_GetProcAddress('vkCmdSetCoarseSampleOrderNV'));
        vkCmdDrawMeshTasksNV := TvkCmdDrawMeshTasksNV(_GetProcAddress('vkCmdDrawMeshTasksNV'));
        vkCmdDrawMeshTasksIndirectNV := TvkCmdDrawMeshTasksIndirectNV(_GetProcAddress('vkCmdDrawMeshTasksIndirectNV'));
        vkCmdDrawMeshTasksIndirectCountNV := TvkCmdDrawMeshTasksIndirectCountNV(_GetProcAddress('vkCmdDrawMeshTasksIndirectCountNV'));
        vkCompileDeferredNV := TvkCompileDeferredNV(_GetProcAddress('vkCompileDeferredNV'));
        vkCreateAccelerationStructureNV := TvkCreateAccelerationStructureNV(_GetProcAddress('vkCreateAccelerationStructureNV'));
        vkDestroyAccelerationStructureKHR := TvkDestroyAccelerationStructureKHR(_GetProcAddress('vkDestroyAccelerationStructureKHR'));
        vkDestroyAccelerationStructureNV := TvkDestroyAccelerationStructureNV(_GetProcAddress('vkDestroyAccelerationStructureNV'));
        vkGetAccelerationStructureMemoryRequirementsKHR := TvkGetAccelerationStructureMemoryRequirementsKHR(_GetProcAddress('vkGetAccelerationStructureMemoryRequirementsKHR'));
        vkGetAccelerationStructureMemoryRequirementsNV := TvkGetAccelerationStructureMemoryRequirementsNV(_GetProcAddress('vkGetAccelerationStructureMemoryRequirementsNV'));
        vkBindAccelerationStructureMemoryKHR := TvkBindAccelerationStructureMemoryKHR(_GetProcAddress('vkBindAccelerationStructureMemoryKHR'));
        vkBindAccelerationStructureMemoryNV := TvkBindAccelerationStructureMemoryNV(_GetProcAddress('vkBindAccelerationStructureMemoryNV'));
        vkCmdCopyAccelerationStructureNV := TvkCmdCopyAccelerationStructureNV(_GetProcAddress('vkCmdCopyAccelerationStructureNV'));
        vkCmdCopyAccelerationStructureKHR := TvkCmdCopyAccelerationStructureKHR(_GetProcAddress('vkCmdCopyAccelerationStructureKHR'));
        vkCopyAccelerationStructureKHR := TvkCopyAccelerationStructureKHR(_GetProcAddress('vkCopyAccelerationStructureKHR'));
        vkCmdCopyAccelerationStructureToMemoryKHR := TvkCmdCopyAccelerationStructureToMemoryKHR(_GetProcAddress('vkCmdCopyAccelerationStructureToMemoryKHR'));
        vkCopyAccelerationStructureToMemoryKHR := TvkCopyAccelerationStructureToMemoryKHR(_GetProcAddress('vkCopyAccelerationStructureToMemoryKHR'));
        vkCmdCopyMemoryToAccelerationStructureKHR := TvkCmdCopyMemoryToAccelerationStructureKHR(_GetProcAddress('vkCmdCopyMemoryToAccelerationStructureKHR'));
        vkCopyMemoryToAccelerationStructureKHR := TvkCopyMemoryToAccelerationStructureKHR(_GetProcAddress('vkCopyMemoryToAccelerationStructureKHR'));
        vkCmdWriteAccelerationStructuresPropertiesKHR := TvkCmdWriteAccelerationStructuresPropertiesKHR(_GetProcAddress('vkCmdWriteAccelerationStructuresPropertiesKHR'));
        vkCmdWriteAccelerationStructuresPropertiesNV := TvkCmdWriteAccelerationStructuresPropertiesNV(_GetProcAddress('vkCmdWriteAccelerationStructuresPropertiesNV'));
        vkCmdBuildAccelerationStructureNV := TvkCmdBuildAccelerationStructureNV(_GetProcAddress('vkCmdBuildAccelerationStructureNV'));
        vkWriteAccelerationStructuresPropertiesKHR := TvkWriteAccelerationStructuresPropertiesKHR(_GetProcAddress('vkWriteAccelerationStructuresPropertiesKHR'));
        vkCmdTraceRaysKHR := TvkCmdTraceRaysKHR(_GetProcAddress('vkCmdTraceRaysKHR'));
        vkCmdTraceRaysNV := TvkCmdTraceRaysNV(_GetProcAddress('vkCmdTraceRaysNV'));
        vkGetRayTracingShaderGroupHandlesKHR := TvkGetRayTracingShaderGroupHandlesKHR(_GetProcAddress('vkGetRayTracingShaderGroupHandlesKHR'));
        vkGetRayTracingShaderGroupHandlesNV := TvkGetRayTracingShaderGroupHandlesNV(_GetProcAddress('vkGetRayTracingShaderGroupHandlesNV'));
        vkGetRayTracingCaptureReplayShaderGroupHandlesKHR := TvkGetRayTracingCaptureReplayShaderGroupHandlesKHR(_GetProcAddress('vkGetRayTracingCaptureReplayShaderGroupHandlesKHR'));
        vkGetAccelerationStructureHandleNV := TvkGetAccelerationStructureHandleNV(_GetProcAddress('vkGetAccelerationStructureHandleNV'));
        vkCreateRayTracingPipelinesNV := TvkCreateRayTracingPipelinesNV(_GetProcAddress('vkCreateRayTracingPipelinesNV'));
        vkCreateRayTracingPipelinesKHR := TvkCreateRayTracingPipelinesKHR(_GetProcAddress('vkCreateRayTracingPipelinesKHR'));
        vkGetPhysicalDeviceCooperativeMatrixPropertiesNV := TvkGetPhysicalDeviceCooperativeMatrixPropertiesNV(_GetProcAddress('vkGetPhysicalDeviceCooperativeMatrixPropertiesNV'));
        vkCmdTraceRaysIndirectKHR := TvkCmdTraceRaysIndirectKHR(_GetProcAddress('vkCmdTraceRaysIndirectKHR'));
        vkGetDeviceAccelerationStructureCompatibilityKHR := TvkGetDeviceAccelerationStructureCompatibilityKHR(_GetProcAddress('vkGetDeviceAccelerationStructureCompatibilityKHR'));
        vkGetImageViewHandleNVX := TvkGetImageViewHandleNVX(_GetProcAddress('vkGetImageViewHandleNVX'));
        vkGetImageViewAddressNVX := TvkGetImageViewAddressNVX(_GetProcAddress('vkGetImageViewAddressNVX'));
        vkGetPhysicalDeviceSurfacePresentModes2EXT := TvkGetPhysicalDeviceSurfacePresentModes2EXT(_GetProcAddress('vkGetPhysicalDeviceSurfacePresentModes2EXT'));
        vkGetDeviceGroupSurfacePresentModes2EXT := TvkGetDeviceGroupSurfacePresentModes2EXT(_GetProcAddress('vkGetDeviceGroupSurfacePresentModes2EXT'));
        vkAcquireFullScreenExclusiveModeEXT := TvkAcquireFullScreenExclusiveModeEXT(_GetProcAddress('vkAcquireFullScreenExclusiveModeEXT'));
        vkReleaseFullScreenExclusiveModeEXT := TvkReleaseFullScreenExclusiveModeEXT(_GetProcAddress('vkReleaseFullScreenExclusiveModeEXT'));
        vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR := TvkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(_GetProcAddress('vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR'));
        vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR := TvkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(_GetProcAddress('vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR'));
        vkAcquireProfilingLockKHR := TvkAcquireProfilingLockKHR(_GetProcAddress('vkAcquireProfilingLockKHR'));
        vkReleaseProfilingLockKHR := TvkReleaseProfilingLockKHR(_GetProcAddress('vkReleaseProfilingLockKHR'));
        vkGetImageDrmFormatModifierPropertiesEXT := TvkGetImageDrmFormatModifierPropertiesEXT(_GetProcAddress('vkGetImageDrmFormatModifierPropertiesEXT'));
        vkGetBufferOpaqueCaptureAddress := TvkGetBufferOpaqueCaptureAddress(_GetProcAddress('vkGetBufferOpaqueCaptureAddress'));
        vkGetBufferOpaqueCaptureAddressKHR := TvkGetBufferOpaqueCaptureAddressKHR(_GetProcAddress('vkGetBufferOpaqueCaptureAddressKHR'));
        vkGetBufferDeviceAddress := TvkGetBufferDeviceAddress(_GetProcAddress('vkGetBufferDeviceAddress'));
        vkGetBufferDeviceAddressKHR := TvkGetBufferDeviceAddressKHR(_GetProcAddress('vkGetBufferDeviceAddressKHR'));
        vkGetBufferDeviceAddressEXT := TvkGetBufferDeviceAddressEXT(_GetProcAddress('vkGetBufferDeviceAddressEXT'));
        vkCreateHeadlessSurfaceEXT := TvkCreateHeadlessSurfaceEXT(_GetProcAddress('vkCreateHeadlessSurfaceEXT'));
        vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV := TvkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(_GetProcAddress('vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV'));
        vkInitializePerformanceApiINTEL := TvkInitializePerformanceApiINTEL(_GetProcAddress('vkInitializePerformanceApiINTEL'));
        vkUninitializePerformanceApiINTEL := TvkUninitializePerformanceApiINTEL(_GetProcAddress('vkUninitializePerformanceApiINTEL'));
        vkCmdSetPerformanceMarkerINTEL := TvkCmdSetPerformanceMarkerINTEL(_GetProcAddress('vkCmdSetPerformanceMarkerINTEL'));
        vkCmdSetPerformanceStreamMarkerINTEL := TvkCmdSetPerformanceStreamMarkerINTEL(_GetProcAddress('vkCmdSetPerformanceStreamMarkerINTEL'));
        vkCmdSetPerformanceOverrideINTEL := TvkCmdSetPerformanceOverrideINTEL(_GetProcAddress('vkCmdSetPerformanceOverrideINTEL'));
        vkAcquirePerformanceConfigurationINTEL := TvkAcquirePerformanceConfigurationINTEL(_GetProcAddress('vkAcquirePerformanceConfigurationINTEL'));
        vkReleasePerformanceConfigurationINTEL := TvkReleasePerformanceConfigurationINTEL(_GetProcAddress('vkReleasePerformanceConfigurationINTEL'));
        vkQueueSetPerformanceConfigurationINTEL := TvkQueueSetPerformanceConfigurationINTEL(_GetProcAddress('vkQueueSetPerformanceConfigurationINTEL'));
        vkGetPerformanceParameterINTEL := TvkGetPerformanceParameterINTEL(_GetProcAddress('vkGetPerformanceParameterINTEL'));
        vkGetDeviceMemoryOpaqueCaptureAddress := TvkGetDeviceMemoryOpaqueCaptureAddress(_GetProcAddress('vkGetDeviceMemoryOpaqueCaptureAddress'));
        vkGetDeviceMemoryOpaqueCaptureAddressKHR := TvkGetDeviceMemoryOpaqueCaptureAddressKHR(_GetProcAddress('vkGetDeviceMemoryOpaqueCaptureAddressKHR'));
        vkGetPipelineExecutablePropertiesKHR := TvkGetPipelineExecutablePropertiesKHR(_GetProcAddress('vkGetPipelineExecutablePropertiesKHR'));
        vkGetPipelineExecutableStatisticsKHR := TvkGetPipelineExecutableStatisticsKHR(_GetProcAddress('vkGetPipelineExecutableStatisticsKHR'));
        vkGetPipelineExecutableInternalRepresentationsKHR := TvkGetPipelineExecutableInternalRepresentationsKHR(_GetProcAddress('vkGetPipelineExecutableInternalRepresentationsKHR'));
        vkCmdSetLineStippleEXT := TvkCmdSetLineStippleEXT(_GetProcAddress('vkCmdSetLineStippleEXT'));
        vkGetPhysicalDeviceToolPropertiesEXT := TvkGetPhysicalDeviceToolPropertiesEXT(_GetProcAddress('vkGetPhysicalDeviceToolPropertiesEXT'));
        vkCreateAccelerationStructureKHR := TvkCreateAccelerationStructureKHR(_GetProcAddress('vkCreateAccelerationStructureKHR'));
        vkCmdBuildAccelerationStructureKHR := TvkCmdBuildAccelerationStructureKHR(_GetProcAddress('vkCmdBuildAccelerationStructureKHR'));
        vkCmdBuildAccelerationStructureIndirectKHR := TvkCmdBuildAccelerationStructureIndirectKHR(_GetProcAddress('vkCmdBuildAccelerationStructureIndirectKHR'));
        vkBuildAccelerationStructureKHR := TvkBuildAccelerationStructureKHR(_GetProcAddress('vkBuildAccelerationStructureKHR'));
        vkGetAccelerationStructureDeviceAddressKHR := TvkGetAccelerationStructureDeviceAddressKHR(_GetProcAddress('vkGetAccelerationStructureDeviceAddressKHR'));
        vkCreateDeferredOperationKHR := TvkCreateDeferredOperationKHR(_GetProcAddress('vkCreateDeferredOperationKHR'));
        vkDestroyDeferredOperationKHR := TvkDestroyDeferredOperationKHR(_GetProcAddress('vkDestroyDeferredOperationKHR'));
        vkGetDeferredOperationMaxConcurrencyKHR := TvkGetDeferredOperationMaxConcurrencyKHR(_GetProcAddress('vkGetDeferredOperationMaxConcurrencyKHR'));
        vkGetDeferredOperationResultKHR := TvkGetDeferredOperationResultKHR(_GetProcAddress('vkGetDeferredOperationResultKHR'));
        vkDeferredOperationJoinKHR := TvkDeferredOperationJoinKHR(_GetProcAddress('vkDeferredOperationJoinKHR'));
        vkCmdSetCullModeEXT := TvkCmdSetCullModeEXT(_GetProcAddress('vkCmdSetCullModeEXT'));
        vkCmdSetFrontFaceEXT := TvkCmdSetFrontFaceEXT(_GetProcAddress('vkCmdSetFrontFaceEXT'));
        vkCmdSetPrimitiveTopologyEXT := TvkCmdSetPrimitiveTopologyEXT(_GetProcAddress('vkCmdSetPrimitiveTopologyEXT'));
        vkCmdSetViewportWithCountEXT := TvkCmdSetViewportWithCountEXT(_GetProcAddress('vkCmdSetViewportWithCountEXT'));
        vkCmdSetScissorWithCountEXT := TvkCmdSetScissorWithCountEXT(_GetProcAddress('vkCmdSetScissorWithCountEXT'));
        vkCmdBindVertexBuffers2EXT := TvkCmdBindVertexBuffers2EXT(_GetProcAddress('vkCmdBindVertexBuffers2EXT'));
        vkCmdSetDepthTestEnableEXT := TvkCmdSetDepthTestEnableEXT(_GetProcAddress('vkCmdSetDepthTestEnableEXT'));
        vkCmdSetDepthWriteEnableEXT := TvkCmdSetDepthWriteEnableEXT(_GetProcAddress('vkCmdSetDepthWriteEnableEXT'));
        vkCmdSetDepthCompareOpEXT := TvkCmdSetDepthCompareOpEXT(_GetProcAddress('vkCmdSetDepthCompareOpEXT'));
        vkCmdSetDepthBoundsTestEnableEXT := TvkCmdSetDepthBoundsTestEnableEXT(_GetProcAddress('vkCmdSetDepthBoundsTestEnableEXT'));
        vkCmdSetStencilTestEnableEXT := TvkCmdSetStencilTestEnableEXT(_GetProcAddress('vkCmdSetStencilTestEnableEXT'));
        vkCmdSetStencilOpEXT := TvkCmdSetStencilOpEXT(_GetProcAddress('vkCmdSetStencilOpEXT'));
        vkCreatePrivateDataSlotEXT := TvkCreatePrivateDataSlotEXT(_GetProcAddress('vkCreatePrivateDataSlotEXT'));
        vkDestroyPrivateDataSlotEXT := TvkDestroyPrivateDataSlotEXT(_GetProcAddress('vkDestroyPrivateDataSlotEXT'));
        vkSetPrivateDataEXT := TvkSetPrivateDataEXT(_GetProcAddress('vkSetPrivateDataEXT'));
        vkGetPrivateDataEXT := TvkGetPrivateDataEXT(_GetProcAddress('vkGetPrivateDataEXT'));
    end;
  except
    FreeAndNil(result);
    raise;
  end;
end;


function vkoLoadDeviceFunctions(const aInstance: TVkInstance; const aDevice: TVkDevice): TVkDeviceFunctions;
var
  xxGetDeviceProcAddr: TvkGetDeviceProcAddr;

  function _GetProcAddress(const aName: String): TPFN_vkVoidFunction;
  begin
    result := xxGetDeviceProcAddr(aDevice, PVkChar(aName));
  end;

begin
  Pointer(xxGetDeviceProcAddr) := TvkGetDeviceProcAddr(vkGetInstanceProcAddr(aInstance, 'vkGetDeviceProcAddr'));
  result := TVkDeviceFunctions.Create;
  try
    result.aaDevice := aDevice;
    with result do begin
    //............................ Total Device Functions : 343
        vkCreateInstance := TvkCreateInstance(_GetProcAddress('vkCreateInstance'));
        vkDestroyInstance := TvkDestroyInstance(_GetProcAddress('vkDestroyInstance'));
        vkEnumeratePhysicalDevices := TvkEnumeratePhysicalDevices(_GetProcAddress('vkEnumeratePhysicalDevices'));
        vkGetDeviceProcAddr := TvkGetDeviceProcAddr(_GetProcAddress('vkGetDeviceProcAddr'));
        vkGetInstanceProcAddr := TvkGetInstanceProcAddr(_GetProcAddress('vkGetInstanceProcAddr'));
        vkGetPhysicalDeviceProperties := TvkGetPhysicalDeviceProperties(_GetProcAddress('vkGetPhysicalDeviceProperties'));
        vkGetPhysicalDeviceQueueFamilyProperties := TvkGetPhysicalDeviceQueueFamilyProperties(_GetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties'));
        vkGetPhysicalDeviceMemoryProperties := TvkGetPhysicalDeviceMemoryProperties(_GetProcAddress('vkGetPhysicalDeviceMemoryProperties'));
        vkGetPhysicalDeviceFeatures := TvkGetPhysicalDeviceFeatures(_GetProcAddress('vkGetPhysicalDeviceFeatures'));
        vkGetPhysicalDeviceFormatProperties := TvkGetPhysicalDeviceFormatProperties(_GetProcAddress('vkGetPhysicalDeviceFormatProperties'));
        vkGetPhysicalDeviceImageFormatProperties := TvkGetPhysicalDeviceImageFormatProperties(_GetProcAddress('vkGetPhysicalDeviceImageFormatProperties'));
        vkCreateDevice := TvkCreateDevice(_GetProcAddress('vkCreateDevice'));
        vkDestroyDevice := TvkDestroyDevice(_GetProcAddress('vkDestroyDevice'));
        vkEnumerateInstanceVersion := TvkEnumerateInstanceVersion(_GetProcAddress('vkEnumerateInstanceVersion'));
        vkEnumerateInstanceLayerProperties := TvkEnumerateInstanceLayerProperties(_GetProcAddress('vkEnumerateInstanceLayerProperties'));
        vkEnumerateInstanceExtensionProperties := TvkEnumerateInstanceExtensionProperties(_GetProcAddress('vkEnumerateInstanceExtensionProperties'));
        vkEnumerateDeviceLayerProperties := TvkEnumerateDeviceLayerProperties(_GetProcAddress('vkEnumerateDeviceLayerProperties'));
        vkEnumerateDeviceExtensionProperties := TvkEnumerateDeviceExtensionProperties(_GetProcAddress('vkEnumerateDeviceExtensionProperties'));
        vkGetDeviceQueue := TvkGetDeviceQueue(_GetProcAddress('vkGetDeviceQueue'));
        vkQueueSubmit := TvkQueueSubmit(_GetProcAddress('vkQueueSubmit'));
        vkQueueWaitIdle := TvkQueueWaitIdle(_GetProcAddress('vkQueueWaitIdle'));
        vkDeviceWaitIdle := TvkDeviceWaitIdle(_GetProcAddress('vkDeviceWaitIdle'));
        vkAllocateMemory := TvkAllocateMemory(_GetProcAddress('vkAllocateMemory'));
        vkFreeMemory := TvkFreeMemory(_GetProcAddress('vkFreeMemory'));
        vkMapMemory := TvkMapMemory(_GetProcAddress('vkMapMemory'));
        vkUnmapMemory := TvkUnmapMemory(_GetProcAddress('vkUnmapMemory'));
        vkFlushMappedMemoryRanges := TvkFlushMappedMemoryRanges(_GetProcAddress('vkFlushMappedMemoryRanges'));
        vkInvalidateMappedMemoryRanges := TvkInvalidateMappedMemoryRanges(_GetProcAddress('vkInvalidateMappedMemoryRanges'));
        vkGetDeviceMemoryCommitment := TvkGetDeviceMemoryCommitment(_GetProcAddress('vkGetDeviceMemoryCommitment'));
        vkGetBufferMemoryRequirements := TvkGetBufferMemoryRequirements(_GetProcAddress('vkGetBufferMemoryRequirements'));
        vkBindBufferMemory := TvkBindBufferMemory(_GetProcAddress('vkBindBufferMemory'));
        vkGetImageMemoryRequirements := TvkGetImageMemoryRequirements(_GetProcAddress('vkGetImageMemoryRequirements'));
        vkBindImageMemory := TvkBindImageMemory(_GetProcAddress('vkBindImageMemory'));
        vkGetImageSparseMemoryRequirements := TvkGetImageSparseMemoryRequirements(_GetProcAddress('vkGetImageSparseMemoryRequirements'));
        vkGetPhysicalDeviceSparseImageFormatProperties := TvkGetPhysicalDeviceSparseImageFormatProperties(_GetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties'));
        vkQueueBindSparse := TvkQueueBindSparse(_GetProcAddress('vkQueueBindSparse'));
        vkCreateFence := TvkCreateFence(_GetProcAddress('vkCreateFence'));
        vkDestroyFence := TvkDestroyFence(_GetProcAddress('vkDestroyFence'));
        vkResetFences := TvkResetFences(_GetProcAddress('vkResetFences'));
        vkGetFenceStatus := TvkGetFenceStatus(_GetProcAddress('vkGetFenceStatus'));
        vkWaitForFences := TvkWaitForFences(_GetProcAddress('vkWaitForFences'));
        vkCreateSemaphore := TvkCreateSemaphore(_GetProcAddress('vkCreateSemaphore'));
        vkDestroySemaphore := TvkDestroySemaphore(_GetProcAddress('vkDestroySemaphore'));
        vkCreateEvent := TvkCreateEvent(_GetProcAddress('vkCreateEvent'));
        vkDestroyEvent := TvkDestroyEvent(_GetProcAddress('vkDestroyEvent'));
        vkGetEventStatus := TvkGetEventStatus(_GetProcAddress('vkGetEventStatus'));
        vkSetEvent := TvkSetEvent(_GetProcAddress('vkSetEvent'));
        vkResetEvent := TvkResetEvent(_GetProcAddress('vkResetEvent'));
        vkCreateQueryPool := TvkCreateQueryPool(_GetProcAddress('vkCreateQueryPool'));
        vkDestroyQueryPool := TvkDestroyQueryPool(_GetProcAddress('vkDestroyQueryPool'));
        vkGetQueryPoolResults := TvkGetQueryPoolResults(_GetProcAddress('vkGetQueryPoolResults'));
        vkResetQueryPool := TvkResetQueryPool(_GetProcAddress('vkResetQueryPool'));
        vkResetQueryPoolEXT := TvkResetQueryPoolEXT(_GetProcAddress('vkResetQueryPoolEXT'));
        vkCreateBuffer := TvkCreateBuffer(_GetProcAddress('vkCreateBuffer'));
        vkDestroyBuffer := TvkDestroyBuffer(_GetProcAddress('vkDestroyBuffer'));
        vkCreateBufferView := TvkCreateBufferView(_GetProcAddress('vkCreateBufferView'));
        vkDestroyBufferView := TvkDestroyBufferView(_GetProcAddress('vkDestroyBufferView'));
        vkCreateImage := TvkCreateImage(_GetProcAddress('vkCreateImage'));
        vkDestroyImage := TvkDestroyImage(_GetProcAddress('vkDestroyImage'));
        vkGetImageSubresourceLayout := TvkGetImageSubresourceLayout(_GetProcAddress('vkGetImageSubresourceLayout'));
        vkCreateImageView := TvkCreateImageView(_GetProcAddress('vkCreateImageView'));
        vkDestroyImageView := TvkDestroyImageView(_GetProcAddress('vkDestroyImageView'));
        vkCreateShaderModule := TvkCreateShaderModule(_GetProcAddress('vkCreateShaderModule'));
        vkDestroyShaderModule := TvkDestroyShaderModule(_GetProcAddress('vkDestroyShaderModule'));
        vkCreatePipelineCache := TvkCreatePipelineCache(_GetProcAddress('vkCreatePipelineCache'));
        vkDestroyPipelineCache := TvkDestroyPipelineCache(_GetProcAddress('vkDestroyPipelineCache'));
        vkGetPipelineCacheData := TvkGetPipelineCacheData(_GetProcAddress('vkGetPipelineCacheData'));
        vkMergePipelineCaches := TvkMergePipelineCaches(_GetProcAddress('vkMergePipelineCaches'));
        vkCreateGraphicsPipelines := TvkCreateGraphicsPipelines(_GetProcAddress('vkCreateGraphicsPipelines'));
        vkCreateComputePipelines := TvkCreateComputePipelines(_GetProcAddress('vkCreateComputePipelines'));
        vkDestroyPipeline := TvkDestroyPipeline(_GetProcAddress('vkDestroyPipeline'));
        vkCreatePipelineLayout := TvkCreatePipelineLayout(_GetProcAddress('vkCreatePipelineLayout'));
        vkDestroyPipelineLayout := TvkDestroyPipelineLayout(_GetProcAddress('vkDestroyPipelineLayout'));
        vkCreateSampler := TvkCreateSampler(_GetProcAddress('vkCreateSampler'));
        vkDestroySampler := TvkDestroySampler(_GetProcAddress('vkDestroySampler'));
        vkCreateDescriptorSetLayout := TvkCreateDescriptorSetLayout(_GetProcAddress('vkCreateDescriptorSetLayout'));
        vkDestroyDescriptorSetLayout := TvkDestroyDescriptorSetLayout(_GetProcAddress('vkDestroyDescriptorSetLayout'));
        vkCreateDescriptorPool := TvkCreateDescriptorPool(_GetProcAddress('vkCreateDescriptorPool'));
        vkDestroyDescriptorPool := TvkDestroyDescriptorPool(_GetProcAddress('vkDestroyDescriptorPool'));
        vkResetDescriptorPool := TvkResetDescriptorPool(_GetProcAddress('vkResetDescriptorPool'));
        vkAllocateDescriptorSets := TvkAllocateDescriptorSets(_GetProcAddress('vkAllocateDescriptorSets'));
        vkFreeDescriptorSets := TvkFreeDescriptorSets(_GetProcAddress('vkFreeDescriptorSets'));
        vkUpdateDescriptorSets := TvkUpdateDescriptorSets(_GetProcAddress('vkUpdateDescriptorSets'));
        vkCreateFramebuffer := TvkCreateFramebuffer(_GetProcAddress('vkCreateFramebuffer'));
        vkDestroyFramebuffer := TvkDestroyFramebuffer(_GetProcAddress('vkDestroyFramebuffer'));
        vkCreateRenderPass := TvkCreateRenderPass(_GetProcAddress('vkCreateRenderPass'));
        vkDestroyRenderPass := TvkDestroyRenderPass(_GetProcAddress('vkDestroyRenderPass'));
        vkGetRenderAreaGranularity := TvkGetRenderAreaGranularity(_GetProcAddress('vkGetRenderAreaGranularity'));
        vkCreateCommandPool := TvkCreateCommandPool(_GetProcAddress('vkCreateCommandPool'));
        vkDestroyCommandPool := TvkDestroyCommandPool(_GetProcAddress('vkDestroyCommandPool'));
        vkResetCommandPool := TvkResetCommandPool(_GetProcAddress('vkResetCommandPool'));
        vkAllocateCommandBuffers := TvkAllocateCommandBuffers(_GetProcAddress('vkAllocateCommandBuffers'));
        vkFreeCommandBuffers := TvkFreeCommandBuffers(_GetProcAddress('vkFreeCommandBuffers'));
        vkBeginCommandBuffer := TvkBeginCommandBuffer(_GetProcAddress('vkBeginCommandBuffer'));
        vkEndCommandBuffer := TvkEndCommandBuffer(_GetProcAddress('vkEndCommandBuffer'));
        vkResetCommandBuffer := TvkResetCommandBuffer(_GetProcAddress('vkResetCommandBuffer'));
        vkCmdBindPipeline := TvkCmdBindPipeline(_GetProcAddress('vkCmdBindPipeline'));
        vkCmdSetViewport := TvkCmdSetViewport(_GetProcAddress('vkCmdSetViewport'));
        vkCmdSetScissor := TvkCmdSetScissor(_GetProcAddress('vkCmdSetScissor'));
        vkCmdSetLineWidth := TvkCmdSetLineWidth(_GetProcAddress('vkCmdSetLineWidth'));
        vkCmdSetDepthBias := TvkCmdSetDepthBias(_GetProcAddress('vkCmdSetDepthBias'));
        vkCmdSetBlendConstants := TvkCmdSetBlendConstants(_GetProcAddress('vkCmdSetBlendConstants'));
        vkCmdSetDepthBounds := TvkCmdSetDepthBounds(_GetProcAddress('vkCmdSetDepthBounds'));
        vkCmdSetStencilCompareMask := TvkCmdSetStencilCompareMask(_GetProcAddress('vkCmdSetStencilCompareMask'));
        vkCmdSetStencilWriteMask := TvkCmdSetStencilWriteMask(_GetProcAddress('vkCmdSetStencilWriteMask'));
        vkCmdSetStencilReference := TvkCmdSetStencilReference(_GetProcAddress('vkCmdSetStencilReference'));
        vkCmdBindDescriptorSets := TvkCmdBindDescriptorSets(_GetProcAddress('vkCmdBindDescriptorSets'));
        vkCmdBindIndexBuffer := TvkCmdBindIndexBuffer(_GetProcAddress('vkCmdBindIndexBuffer'));
        vkCmdBindVertexBuffers := TvkCmdBindVertexBuffers(_GetProcAddress('vkCmdBindVertexBuffers'));
        vkCmdDraw := TvkCmdDraw(_GetProcAddress('vkCmdDraw'));
        vkCmdDrawIndexed := TvkCmdDrawIndexed(_GetProcAddress('vkCmdDrawIndexed'));
        vkCmdDrawIndirect := TvkCmdDrawIndirect(_GetProcAddress('vkCmdDrawIndirect'));
        vkCmdDrawIndexedIndirect := TvkCmdDrawIndexedIndirect(_GetProcAddress('vkCmdDrawIndexedIndirect'));
        vkCmdDispatch := TvkCmdDispatch(_GetProcAddress('vkCmdDispatch'));
        vkCmdDispatchIndirect := TvkCmdDispatchIndirect(_GetProcAddress('vkCmdDispatchIndirect'));
        vkCmdCopyBuffer := TvkCmdCopyBuffer(_GetProcAddress('vkCmdCopyBuffer'));
        vkCmdCopyImage := TvkCmdCopyImage(_GetProcAddress('vkCmdCopyImage'));
        vkCmdBlitImage := TvkCmdBlitImage(_GetProcAddress('vkCmdBlitImage'));
        vkCmdCopyBufferToImage := TvkCmdCopyBufferToImage(_GetProcAddress('vkCmdCopyBufferToImage'));
        vkCmdCopyImageToBuffer := TvkCmdCopyImageToBuffer(_GetProcAddress('vkCmdCopyImageToBuffer'));
        vkCmdUpdateBuffer := TvkCmdUpdateBuffer(_GetProcAddress('vkCmdUpdateBuffer'));
        vkCmdFillBuffer := TvkCmdFillBuffer(_GetProcAddress('vkCmdFillBuffer'));
        vkCmdClearColorImage := TvkCmdClearColorImage(_GetProcAddress('vkCmdClearColorImage'));
        vkCmdClearDepthStencilImage := TvkCmdClearDepthStencilImage(_GetProcAddress('vkCmdClearDepthStencilImage'));
        vkCmdClearAttachments := TvkCmdClearAttachments(_GetProcAddress('vkCmdClearAttachments'));
        vkCmdResolveImage := TvkCmdResolveImage(_GetProcAddress('vkCmdResolveImage'));
        vkCmdSetEvent := TvkCmdSetEvent(_GetProcAddress('vkCmdSetEvent'));
        vkCmdResetEvent := TvkCmdResetEvent(_GetProcAddress('vkCmdResetEvent'));
        vkCmdWaitEvents := TvkCmdWaitEvents(_GetProcAddress('vkCmdWaitEvents'));
        vkCmdPipelineBarrier := TvkCmdPipelineBarrier(_GetProcAddress('vkCmdPipelineBarrier'));
        vkCmdBeginQuery := TvkCmdBeginQuery(_GetProcAddress('vkCmdBeginQuery'));
        vkCmdEndQuery := TvkCmdEndQuery(_GetProcAddress('vkCmdEndQuery'));
        vkCmdBeginConditionalRenderingEXT := TvkCmdBeginConditionalRenderingEXT(_GetProcAddress('vkCmdBeginConditionalRenderingEXT'));
        vkCmdEndConditionalRenderingEXT := TvkCmdEndConditionalRenderingEXT(_GetProcAddress('vkCmdEndConditionalRenderingEXT'));
        vkCmdResetQueryPool := TvkCmdResetQueryPool(_GetProcAddress('vkCmdResetQueryPool'));
        vkCmdWriteTimestamp := TvkCmdWriteTimestamp(_GetProcAddress('vkCmdWriteTimestamp'));
        vkCmdCopyQueryPoolResults := TvkCmdCopyQueryPoolResults(_GetProcAddress('vkCmdCopyQueryPoolResults'));
        vkCmdPushConstants := TvkCmdPushConstants(_GetProcAddress('vkCmdPushConstants'));
        vkCmdBeginRenderPass := TvkCmdBeginRenderPass(_GetProcAddress('vkCmdBeginRenderPass'));
        vkCmdNextSubpass := TvkCmdNextSubpass(_GetProcAddress('vkCmdNextSubpass'));
        vkCmdEndRenderPass := TvkCmdEndRenderPass(_GetProcAddress('vkCmdEndRenderPass'));
        vkCmdExecuteCommands := TvkCmdExecuteCommands(_GetProcAddress('vkCmdExecuteCommands'));
       {$ifdef Android}
        vkCreateAndroidSurfaceKHR := TvkCreateAndroidSurfaceKHR(_GetProcAddress('vkCreateAndroidSurfaceKHR'));
       {$endif}
        vkGetPhysicalDeviceDisplayPropertiesKHR := TvkGetPhysicalDeviceDisplayPropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceDisplayPropertiesKHR'));
        vkGetPhysicalDeviceDisplayPlanePropertiesKHR := TvkGetPhysicalDeviceDisplayPlanePropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceDisplayPlanePropertiesKHR'));
        vkGetDisplayPlaneSupportedDisplaysKHR := TvkGetDisplayPlaneSupportedDisplaysKHR(_GetProcAddress('vkGetDisplayPlaneSupportedDisplaysKHR'));
        vkGetDisplayModePropertiesKHR := TvkGetDisplayModePropertiesKHR(_GetProcAddress('vkGetDisplayModePropertiesKHR'));
        vkCreateDisplayModeKHR := TvkCreateDisplayModeKHR(_GetProcAddress('vkCreateDisplayModeKHR'));
        vkGetDisplayPlaneCapabilitiesKHR := TvkGetDisplayPlaneCapabilitiesKHR(_GetProcAddress('vkGetDisplayPlaneCapabilitiesKHR'));
        vkCreateDisplayPlaneSurfaceKHR := TvkCreateDisplayPlaneSurfaceKHR(_GetProcAddress('vkCreateDisplayPlaneSurfaceKHR'));
        vkCreateSharedSwapchainsKHR := TvkCreateSharedSwapchainsKHR(_GetProcAddress('vkCreateSharedSwapchainsKHR'));
        vkDestroySurfaceKHR := TvkDestroySurfaceKHR(_GetProcAddress('vkDestroySurfaceKHR'));
        vkGetPhysicalDeviceSurfaceSupportKHR := TvkGetPhysicalDeviceSurfaceSupportKHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceSupportKHR'));
        vkGetPhysicalDeviceSurfaceCapabilitiesKHR := TvkGetPhysicalDeviceSurfaceCapabilitiesKHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceCapabilitiesKHR'));
        vkGetPhysicalDeviceSurfaceFormatsKHR := TvkGetPhysicalDeviceSurfaceFormatsKHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceFormatsKHR'));
        vkGetPhysicalDeviceSurfacePresentModesKHR := TvkGetPhysicalDeviceSurfacePresentModesKHR(_GetProcAddress('vkGetPhysicalDeviceSurfacePresentModesKHR'));
        vkCreateSwapchainKHR := TvkCreateSwapchainKHR(_GetProcAddress('vkCreateSwapchainKHR'));
        vkDestroySwapchainKHR := TvkDestroySwapchainKHR(_GetProcAddress('vkDestroySwapchainKHR'));
        vkGetSwapchainImagesKHR := TvkGetSwapchainImagesKHR(_GetProcAddress('vkGetSwapchainImagesKHR'));
        vkAcquireNextImageKHR := TvkAcquireNextImageKHR(_GetProcAddress('vkAcquireNextImageKHR'));
        vkQueuePresentKHR := TvkQueuePresentKHR(_GetProcAddress('vkQueuePresentKHR'));
        vkCreateViSurfaceNN := TvkCreateViSurfaceNN(_GetProcAddress('vkCreateViSurfaceNN'));
       {$ifdef Wayland}
        vkCreateWaylandSurfaceKHR := TvkCreateWaylandSurfaceKHR(_GetProcAddress('vkCreateWaylandSurfaceKHR'));
       {$endif}
       {$ifdef Wayland}
        vkGetPhysicalDeviceWaylandPresentationSupportKHR := TvkGetPhysicalDeviceWaylandPresentationSupportKHR(_GetProcAddress('vkGetPhysicalDeviceWaylandPresentationSupportKHR'));
       {$endif}
       {$ifdef Windows}
        vkCreateWin32SurfaceKHR := TvkCreateWin32SurfaceKHR(_GetProcAddress('vkCreateWin32SurfaceKHR'));
       {$endif}
       {$ifdef Windows}
        vkGetPhysicalDeviceWin32PresentationSupportKHR := TvkGetPhysicalDeviceWin32PresentationSupportKHR(_GetProcAddress('vkGetPhysicalDeviceWin32PresentationSupportKHR'));
       {$endif}
       {$ifdef XLIB}
        vkCreateXlibSurfaceKHR := TvkCreateXlibSurfaceKHR(_GetProcAddress('vkCreateXlibSurfaceKHR'));
       {$endif}
       {$ifdef XLIB}
        vkGetPhysicalDeviceXlibPresentationSupportKHR := TvkGetPhysicalDeviceXlibPresentationSupportKHR(_GetProcAddress('vkGetPhysicalDeviceXlibPresentationSupportKHR'));
       {$endif}
       {$ifdef XCB}
        vkCreateXcbSurfaceKHR := TvkCreateXcbSurfaceKHR(_GetProcAddress('vkCreateXcbSurfaceKHR'));
       {$endif}
       {$ifdef XCB}
        vkGetPhysicalDeviceXcbPresentationSupportKHR := TvkGetPhysicalDeviceXcbPresentationSupportKHR(_GetProcAddress('vkGetPhysicalDeviceXcbPresentationSupportKHR'));
       {$endif}
        vkCreateDirectFBSurfaceEXT := TvkCreateDirectFBSurfaceEXT(_GetProcAddress('vkCreateDirectFBSurfaceEXT'));
        vkGetPhysicalDeviceDirectFBPresentationSupportEXT := TvkGetPhysicalDeviceDirectFBPresentationSupportEXT(_GetProcAddress('vkGetPhysicalDeviceDirectFBPresentationSupportEXT'));
        vkCreateImagePipeSurfaceFUCHSIA := TvkCreateImagePipeSurfaceFUCHSIA(_GetProcAddress('vkCreateImagePipeSurfaceFUCHSIA'));
        vkCreateStreamDescriptorSurfaceGGP := TvkCreateStreamDescriptorSurfaceGGP(_GetProcAddress('vkCreateStreamDescriptorSurfaceGGP'));
        vkCreateDebugReportCallbackEXT := TvkCreateDebugReportCallbackEXT(_GetProcAddress('vkCreateDebugReportCallbackEXT'));
        vkDestroyDebugReportCallbackEXT := TvkDestroyDebugReportCallbackEXT(_GetProcAddress('vkDestroyDebugReportCallbackEXT'));
        vkDebugReportMessageEXT := TvkDebugReportMessageEXT(_GetProcAddress('vkDebugReportMessageEXT'));
        vkDebugMarkerSetObjectNameEXT := TvkDebugMarkerSetObjectNameEXT(_GetProcAddress('vkDebugMarkerSetObjectNameEXT'));
        vkDebugMarkerSetObjectTagEXT := TvkDebugMarkerSetObjectTagEXT(_GetProcAddress('vkDebugMarkerSetObjectTagEXT'));
        vkCmdDebugMarkerBeginEXT := TvkCmdDebugMarkerBeginEXT(_GetProcAddress('vkCmdDebugMarkerBeginEXT'));
        vkCmdDebugMarkerEndEXT := TvkCmdDebugMarkerEndEXT(_GetProcAddress('vkCmdDebugMarkerEndEXT'));
        vkCmdDebugMarkerInsertEXT := TvkCmdDebugMarkerInsertEXT(_GetProcAddress('vkCmdDebugMarkerInsertEXT'));
        vkGetPhysicalDeviceExternalImageFormatPropertiesNV := TvkGetPhysicalDeviceExternalImageFormatPropertiesNV(_GetProcAddress('vkGetPhysicalDeviceExternalImageFormatPropertiesNV'));
       {$ifdef Windows}
        vkGetMemoryWin32HandleNV := TvkGetMemoryWin32HandleNV(_GetProcAddress('vkGetMemoryWin32HandleNV'));
       {$endif}
        vkCmdExecuteGeneratedCommandsNV := TvkCmdExecuteGeneratedCommandsNV(_GetProcAddress('vkCmdExecuteGeneratedCommandsNV'));
        vkCmdPreprocessGeneratedCommandsNV := TvkCmdPreprocessGeneratedCommandsNV(_GetProcAddress('vkCmdPreprocessGeneratedCommandsNV'));
        vkCmdBindPipelineShaderGroupNV := TvkCmdBindPipelineShaderGroupNV(_GetProcAddress('vkCmdBindPipelineShaderGroupNV'));
        vkGetGeneratedCommandsMemoryRequirementsNV := TvkGetGeneratedCommandsMemoryRequirementsNV(_GetProcAddress('vkGetGeneratedCommandsMemoryRequirementsNV'));
        vkCreateIndirectCommandsLayoutNV := TvkCreateIndirectCommandsLayoutNV(_GetProcAddress('vkCreateIndirectCommandsLayoutNV'));
        vkDestroyIndirectCommandsLayoutNV := TvkDestroyIndirectCommandsLayoutNV(_GetProcAddress('vkDestroyIndirectCommandsLayoutNV'));
        vkGetPhysicalDeviceFeatures2 := TvkGetPhysicalDeviceFeatures2(_GetProcAddress('vkGetPhysicalDeviceFeatures2'));
        vkGetPhysicalDeviceFeatures2KHR := TvkGetPhysicalDeviceFeatures2KHR(_GetProcAddress('vkGetPhysicalDeviceFeatures2KHR'));
        vkGetPhysicalDeviceProperties2 := TvkGetPhysicalDeviceProperties2(_GetProcAddress('vkGetPhysicalDeviceProperties2'));
        vkGetPhysicalDeviceProperties2KHR := TvkGetPhysicalDeviceProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceProperties2KHR'));
        vkGetPhysicalDeviceFormatProperties2 := TvkGetPhysicalDeviceFormatProperties2(_GetProcAddress('vkGetPhysicalDeviceFormatProperties2'));
        vkGetPhysicalDeviceFormatProperties2KHR := TvkGetPhysicalDeviceFormatProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceFormatProperties2KHR'));
        vkGetPhysicalDeviceImageFormatProperties2 := TvkGetPhysicalDeviceImageFormatProperties2(_GetProcAddress('vkGetPhysicalDeviceImageFormatProperties2'));
        vkGetPhysicalDeviceImageFormatProperties2KHR := TvkGetPhysicalDeviceImageFormatProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceImageFormatProperties2KHR'));
        vkGetPhysicalDeviceQueueFamilyProperties2 := TvkGetPhysicalDeviceQueueFamilyProperties2(_GetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties2'));
        vkGetPhysicalDeviceQueueFamilyProperties2KHR := TvkGetPhysicalDeviceQueueFamilyProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceQueueFamilyProperties2KHR'));
        vkGetPhysicalDeviceMemoryProperties2 := TvkGetPhysicalDeviceMemoryProperties2(_GetProcAddress('vkGetPhysicalDeviceMemoryProperties2'));
        vkGetPhysicalDeviceMemoryProperties2KHR := TvkGetPhysicalDeviceMemoryProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceMemoryProperties2KHR'));
        vkGetPhysicalDeviceSparseImageFormatProperties2 := TvkGetPhysicalDeviceSparseImageFormatProperties2(_GetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties2'));
        vkGetPhysicalDeviceSparseImageFormatProperties2KHR := TvkGetPhysicalDeviceSparseImageFormatProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceSparseImageFormatProperties2KHR'));
        vkCmdPushDescriptorSetKHR := TvkCmdPushDescriptorSetKHR(_GetProcAddress('vkCmdPushDescriptorSetKHR'));
        vkTrimCommandPool := TvkTrimCommandPool(_GetProcAddress('vkTrimCommandPool'));
        vkTrimCommandPoolKHR := TvkTrimCommandPoolKHR(_GetProcAddress('vkTrimCommandPoolKHR'));
        vkGetPhysicalDeviceExternalBufferProperties := TvkGetPhysicalDeviceExternalBufferProperties(_GetProcAddress('vkGetPhysicalDeviceExternalBufferProperties'));
        vkGetPhysicalDeviceExternalBufferPropertiesKHR := TvkGetPhysicalDeviceExternalBufferPropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceExternalBufferPropertiesKHR'));
       {$ifdef Windows}
        vkGetMemoryWin32HandleKHR := TvkGetMemoryWin32HandleKHR(_GetProcAddress('vkGetMemoryWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkGetMemoryWin32HandlePropertiesKHR := TvkGetMemoryWin32HandlePropertiesKHR(_GetProcAddress('vkGetMemoryWin32HandlePropertiesKHR'));
       {$endif}
        vkGetMemoryFdKHR := TvkGetMemoryFdKHR(_GetProcAddress('vkGetMemoryFdKHR'));
        vkGetMemoryFdPropertiesKHR := TvkGetMemoryFdPropertiesKHR(_GetProcAddress('vkGetMemoryFdPropertiesKHR'));
        vkGetPhysicalDeviceExternalSemaphoreProperties := TvkGetPhysicalDeviceExternalSemaphoreProperties(_GetProcAddress('vkGetPhysicalDeviceExternalSemaphoreProperties'));
        vkGetPhysicalDeviceExternalSemaphorePropertiesKHR := TvkGetPhysicalDeviceExternalSemaphorePropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceExternalSemaphorePropertiesKHR'));
       {$ifdef Windows}
        vkGetSemaphoreWin32HandleKHR := TvkGetSemaphoreWin32HandleKHR(_GetProcAddress('vkGetSemaphoreWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkImportSemaphoreWin32HandleKHR := TvkImportSemaphoreWin32HandleKHR(_GetProcAddress('vkImportSemaphoreWin32HandleKHR'));
       {$endif}
        vkGetSemaphoreFdKHR := TvkGetSemaphoreFdKHR(_GetProcAddress('vkGetSemaphoreFdKHR'));
        vkImportSemaphoreFdKHR := TvkImportSemaphoreFdKHR(_GetProcAddress('vkImportSemaphoreFdKHR'));
        vkGetPhysicalDeviceExternalFenceProperties := TvkGetPhysicalDeviceExternalFenceProperties(_GetProcAddress('vkGetPhysicalDeviceExternalFenceProperties'));
        vkGetPhysicalDeviceExternalFencePropertiesKHR := TvkGetPhysicalDeviceExternalFencePropertiesKHR(_GetProcAddress('vkGetPhysicalDeviceExternalFencePropertiesKHR'));
       {$ifdef Windows}
        vkGetFenceWin32HandleKHR := TvkGetFenceWin32HandleKHR(_GetProcAddress('vkGetFenceWin32HandleKHR'));
       {$endif}
       {$ifdef Windows}
        vkImportFenceWin32HandleKHR := TvkImportFenceWin32HandleKHR(_GetProcAddress('vkImportFenceWin32HandleKHR'));
       {$endif}
        vkGetFenceFdKHR := TvkGetFenceFdKHR(_GetProcAddress('vkGetFenceFdKHR'));
        vkImportFenceFdKHR := TvkImportFenceFdKHR(_GetProcAddress('vkImportFenceFdKHR'));
        vkReleaseDisplayEXT := TvkReleaseDisplayEXT(_GetProcAddress('vkReleaseDisplayEXT'));
       {$ifdef XLIB}
        vkAcquireXlibDisplayEXT := TvkAcquireXlibDisplayEXT(_GetProcAddress('vkAcquireXlibDisplayEXT'));
       {$endif}
       {$ifdef RandR}
        vkGetRandROutputDisplayEXT := TvkGetRandROutputDisplayEXT(_GetProcAddress('vkGetRandROutputDisplayEXT'));
       {$endif}
        vkDisplayPowerControlEXT := TvkDisplayPowerControlEXT(_GetProcAddress('vkDisplayPowerControlEXT'));
        vkRegisterDeviceEventEXT := TvkRegisterDeviceEventEXT(_GetProcAddress('vkRegisterDeviceEventEXT'));
        vkRegisterDisplayEventEXT := TvkRegisterDisplayEventEXT(_GetProcAddress('vkRegisterDisplayEventEXT'));
        vkGetSwapchainCounterEXT := TvkGetSwapchainCounterEXT(_GetProcAddress('vkGetSwapchainCounterEXT'));
        vkGetPhysicalDeviceSurfaceCapabilities2EXT := TvkGetPhysicalDeviceSurfaceCapabilities2EXT(_GetProcAddress('vkGetPhysicalDeviceSurfaceCapabilities2EXT'));
        vkEnumeratePhysicalDeviceGroups := TvkEnumeratePhysicalDeviceGroups(_GetProcAddress('vkEnumeratePhysicalDeviceGroups'));
        vkEnumeratePhysicalDeviceGroupsKHR := TvkEnumeratePhysicalDeviceGroupsKHR(_GetProcAddress('vkEnumeratePhysicalDeviceGroupsKHR'));
        vkGetDeviceGroupPeerMemoryFeatures := TvkGetDeviceGroupPeerMemoryFeatures(_GetProcAddress('vkGetDeviceGroupPeerMemoryFeatures'));
        vkGetDeviceGroupPeerMemoryFeaturesKHR := TvkGetDeviceGroupPeerMemoryFeaturesKHR(_GetProcAddress('vkGetDeviceGroupPeerMemoryFeaturesKHR'));
        vkBindBufferMemory2 := TvkBindBufferMemory2(_GetProcAddress('vkBindBufferMemory2'));
        vkBindBufferMemory2KHR := TvkBindBufferMemory2KHR(_GetProcAddress('vkBindBufferMemory2KHR'));
        vkBindImageMemory2 := TvkBindImageMemory2(_GetProcAddress('vkBindImageMemory2'));
        vkBindImageMemory2KHR := TvkBindImageMemory2KHR(_GetProcAddress('vkBindImageMemory2KHR'));
        vkCmdSetDeviceMask := TvkCmdSetDeviceMask(_GetProcAddress('vkCmdSetDeviceMask'));
        vkCmdSetDeviceMaskKHR := TvkCmdSetDeviceMaskKHR(_GetProcAddress('vkCmdSetDeviceMaskKHR'));
        vkGetDeviceGroupPresentCapabilitiesKHR := TvkGetDeviceGroupPresentCapabilitiesKHR(_GetProcAddress('vkGetDeviceGroupPresentCapabilitiesKHR'));
        vkGetDeviceGroupSurfacePresentModesKHR := TvkGetDeviceGroupSurfacePresentModesKHR(_GetProcAddress('vkGetDeviceGroupSurfacePresentModesKHR'));
        vkAcquireNextImage2KHR := TvkAcquireNextImage2KHR(_GetProcAddress('vkAcquireNextImage2KHR'));
        vkCmdDispatchBase := TvkCmdDispatchBase(_GetProcAddress('vkCmdDispatchBase'));
        vkCmdDispatchBaseKHR := TvkCmdDispatchBaseKHR(_GetProcAddress('vkCmdDispatchBaseKHR'));
        vkGetPhysicalDevicePresentRectanglesKHR := TvkGetPhysicalDevicePresentRectanglesKHR(_GetProcAddress('vkGetPhysicalDevicePresentRectanglesKHR'));
        vkCreateDescriptorUpdateTemplate := TvkCreateDescriptorUpdateTemplate(_GetProcAddress('vkCreateDescriptorUpdateTemplate'));
        vkCreateDescriptorUpdateTemplateKHR := TvkCreateDescriptorUpdateTemplateKHR(_GetProcAddress('vkCreateDescriptorUpdateTemplateKHR'));
        vkDestroyDescriptorUpdateTemplate := TvkDestroyDescriptorUpdateTemplate(_GetProcAddress('vkDestroyDescriptorUpdateTemplate'));
        vkDestroyDescriptorUpdateTemplateKHR := TvkDestroyDescriptorUpdateTemplateKHR(_GetProcAddress('vkDestroyDescriptorUpdateTemplateKHR'));
        vkUpdateDescriptorSetWithTemplate := TvkUpdateDescriptorSetWithTemplate(_GetProcAddress('vkUpdateDescriptorSetWithTemplate'));
        vkUpdateDescriptorSetWithTemplateKHR := TvkUpdateDescriptorSetWithTemplateKHR(_GetProcAddress('vkUpdateDescriptorSetWithTemplateKHR'));
        vkCmdPushDescriptorSetWithTemplateKHR := TvkCmdPushDescriptorSetWithTemplateKHR(_GetProcAddress('vkCmdPushDescriptorSetWithTemplateKHR'));
        vkSetHdrMetadataEXT := TvkSetHdrMetadataEXT(_GetProcAddress('vkSetHdrMetadataEXT'));
        vkGetSwapchainStatusKHR := TvkGetSwapchainStatusKHR(_GetProcAddress('vkGetSwapchainStatusKHR'));
        vkGetRefreshCycleDurationGOOGLE := TvkGetRefreshCycleDurationGOOGLE(_GetProcAddress('vkGetRefreshCycleDurationGOOGLE'));
        vkGetPastPresentationTimingGOOGLE := TvkGetPastPresentationTimingGOOGLE(_GetProcAddress('vkGetPastPresentationTimingGOOGLE'));
       {$ifdef MoltenVK_IOS}
        vkCreateIOSSurfaceMVK := TvkCreateIOSSurfaceMVK(_GetProcAddress('vkCreateIOSSurfaceMVK'));
       {$endif}
       {$ifdef MoltenVK_MacOS}
        vkCreateMacOSSurfaceMVK := TvkCreateMacOSSurfaceMVK(_GetProcAddress('vkCreateMacOSSurfaceMVK'));
       {$endif}
        vkCreateMetalSurfaceEXT := TvkCreateMetalSurfaceEXT(_GetProcAddress('vkCreateMetalSurfaceEXT'));
        vkCmdSetViewportWScalingNV := TvkCmdSetViewportWScalingNV(_GetProcAddress('vkCmdSetViewportWScalingNV'));
        vkCmdSetDiscardRectangleEXT := TvkCmdSetDiscardRectangleEXT(_GetProcAddress('vkCmdSetDiscardRectangleEXT'));
        vkCmdSetSampleLocationsEXT := TvkCmdSetSampleLocationsEXT(_GetProcAddress('vkCmdSetSampleLocationsEXT'));
        vkGetPhysicalDeviceMultisamplePropertiesEXT := TvkGetPhysicalDeviceMultisamplePropertiesEXT(_GetProcAddress('vkGetPhysicalDeviceMultisamplePropertiesEXT'));
        vkGetPhysicalDeviceSurfaceCapabilities2KHR := TvkGetPhysicalDeviceSurfaceCapabilities2KHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceCapabilities2KHR'));
        vkGetPhysicalDeviceSurfaceFormats2KHR := TvkGetPhysicalDeviceSurfaceFormats2KHR(_GetProcAddress('vkGetPhysicalDeviceSurfaceFormats2KHR'));
        vkGetPhysicalDeviceDisplayProperties2KHR := TvkGetPhysicalDeviceDisplayProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceDisplayProperties2KHR'));
        vkGetPhysicalDeviceDisplayPlaneProperties2KHR := TvkGetPhysicalDeviceDisplayPlaneProperties2KHR(_GetProcAddress('vkGetPhysicalDeviceDisplayPlaneProperties2KHR'));
        vkGetDisplayModeProperties2KHR := TvkGetDisplayModeProperties2KHR(_GetProcAddress('vkGetDisplayModeProperties2KHR'));
        vkGetDisplayPlaneCapabilities2KHR := TvkGetDisplayPlaneCapabilities2KHR(_GetProcAddress('vkGetDisplayPlaneCapabilities2KHR'));
        vkGetBufferMemoryRequirements2 := TvkGetBufferMemoryRequirements2(_GetProcAddress('vkGetBufferMemoryRequirements2'));
        vkGetBufferMemoryRequirements2KHR := TvkGetBufferMemoryRequirements2KHR(_GetProcAddress('vkGetBufferMemoryRequirements2KHR'));
        vkGetImageMemoryRequirements2 := TvkGetImageMemoryRequirements2(_GetProcAddress('vkGetImageMemoryRequirements2'));
        vkGetImageMemoryRequirements2KHR := TvkGetImageMemoryRequirements2KHR(_GetProcAddress('vkGetImageMemoryRequirements2KHR'));
        vkGetImageSparseMemoryRequirements2 := TvkGetImageSparseMemoryRequirements2(_GetProcAddress('vkGetImageSparseMemoryRequirements2'));
        vkGetImageSparseMemoryRequirements2KHR := TvkGetImageSparseMemoryRequirements2KHR(_GetProcAddress('vkGetImageSparseMemoryRequirements2KHR'));
        vkCreateSamplerYcbcrConversion := TvkCreateSamplerYcbcrConversion(_GetProcAddress('vkCreateSamplerYcbcrConversion'));
        vkCreateSamplerYcbcrConversionKHR := TvkCreateSamplerYcbcrConversionKHR(_GetProcAddress('vkCreateSamplerYcbcrConversionKHR'));
        vkDestroySamplerYcbcrConversion := TvkDestroySamplerYcbcrConversion(_GetProcAddress('vkDestroySamplerYcbcrConversion'));
        vkDestroySamplerYcbcrConversionKHR := TvkDestroySamplerYcbcrConversionKHR(_GetProcAddress('vkDestroySamplerYcbcrConversionKHR'));
        vkGetDeviceQueue2 := TvkGetDeviceQueue2(_GetProcAddress('vkGetDeviceQueue2'));
        vkCreateValidationCacheEXT := TvkCreateValidationCacheEXT(_GetProcAddress('vkCreateValidationCacheEXT'));
        vkDestroyValidationCacheEXT := TvkDestroyValidationCacheEXT(_GetProcAddress('vkDestroyValidationCacheEXT'));
        vkGetValidationCacheDataEXT := TvkGetValidationCacheDataEXT(_GetProcAddress('vkGetValidationCacheDataEXT'));
        vkMergeValidationCachesEXT := TvkMergeValidationCachesEXT(_GetProcAddress('vkMergeValidationCachesEXT'));
        vkGetDescriptorSetLayoutSupport := TvkGetDescriptorSetLayoutSupport(_GetProcAddress('vkGetDescriptorSetLayoutSupport'));
        vkGetDescriptorSetLayoutSupportKHR := TvkGetDescriptorSetLayoutSupportKHR(_GetProcAddress('vkGetDescriptorSetLayoutSupportKHR'));
        vkGetSwapchainGrallocUsageANDROID := TvkGetSwapchainGrallocUsageANDROID(_GetProcAddress('vkGetSwapchainGrallocUsageANDROID'));
       {$ifdef Android}
        vkGetSwapchainGrallocUsage2ANDROID := TvkGetSwapchainGrallocUsage2ANDROID(_GetProcAddress('vkGetSwapchainGrallocUsage2ANDROID'));
       {$endif}
        vkAcquireImageANDROID := TvkAcquireImageANDROID(_GetProcAddress('vkAcquireImageANDROID'));
        vkQueueSignalReleaseImageANDROID := TvkQueueSignalReleaseImageANDROID(_GetProcAddress('vkQueueSignalReleaseImageANDROID'));
        vkGetShaderInfoAMD := TvkGetShaderInfoAMD(_GetProcAddress('vkGetShaderInfoAMD'));
        vkSetLocalDimmingAMD := TvkSetLocalDimmingAMD(_GetProcAddress('vkSetLocalDimmingAMD'));
        vkGetPhysicalDeviceCalibrateableTimeDomainsEXT := TvkGetPhysicalDeviceCalibrateableTimeDomainsEXT(_GetProcAddress('vkGetPhysicalDeviceCalibrateableTimeDomainsEXT'));
        vkGetCalibratedTimestampsEXT := TvkGetCalibratedTimestampsEXT(_GetProcAddress('vkGetCalibratedTimestampsEXT'));
        vkSetDebugUtilsObjectNameEXT := TvkSetDebugUtilsObjectNameEXT(_GetProcAddress('vkSetDebugUtilsObjectNameEXT'));
        vkSetDebugUtilsObjectTagEXT := TvkSetDebugUtilsObjectTagEXT(_GetProcAddress('vkSetDebugUtilsObjectTagEXT'));
        vkQueueBeginDebugUtilsLabelEXT := TvkQueueBeginDebugUtilsLabelEXT(_GetProcAddress('vkQueueBeginDebugUtilsLabelEXT'));
        vkQueueEndDebugUtilsLabelEXT := TvkQueueEndDebugUtilsLabelEXT(_GetProcAddress('vkQueueEndDebugUtilsLabelEXT'));
        vkQueueInsertDebugUtilsLabelEXT := TvkQueueInsertDebugUtilsLabelEXT(_GetProcAddress('vkQueueInsertDebugUtilsLabelEXT'));
        vkCmdBeginDebugUtilsLabelEXT := TvkCmdBeginDebugUtilsLabelEXT(_GetProcAddress('vkCmdBeginDebugUtilsLabelEXT'));
        vkCmdEndDebugUtilsLabelEXT := TvkCmdEndDebugUtilsLabelEXT(_GetProcAddress('vkCmdEndDebugUtilsLabelEXT'));
        vkCmdInsertDebugUtilsLabelEXT := TvkCmdInsertDebugUtilsLabelEXT(_GetProcAddress('vkCmdInsertDebugUtilsLabelEXT'));
        vkCreateDebugUtilsMessengerEXT := TvkCreateDebugUtilsMessengerEXT(_GetProcAddress('vkCreateDebugUtilsMessengerEXT'));
        vkDestroyDebugUtilsMessengerEXT := TvkDestroyDebugUtilsMessengerEXT(_GetProcAddress('vkDestroyDebugUtilsMessengerEXT'));
        vkSubmitDebugUtilsMessageEXT := TvkSubmitDebugUtilsMessageEXT(_GetProcAddress('vkSubmitDebugUtilsMessageEXT'));
        vkGetMemoryHostPointerPropertiesEXT := TvkGetMemoryHostPointerPropertiesEXT(_GetProcAddress('vkGetMemoryHostPointerPropertiesEXT'));
        vkCmdWriteBufferMarkerAMD := TvkCmdWriteBufferMarkerAMD(_GetProcAddress('vkCmdWriteBufferMarkerAMD'));
        vkCreateRenderPass2 := TvkCreateRenderPass2(_GetProcAddress('vkCreateRenderPass2'));
        vkCreateRenderPass2KHR := TvkCreateRenderPass2KHR(_GetProcAddress('vkCreateRenderPass2KHR'));
        vkCmdBeginRenderPass2 := TvkCmdBeginRenderPass2(_GetProcAddress('vkCmdBeginRenderPass2'));
        vkCmdBeginRenderPass2KHR := TvkCmdBeginRenderPass2KHR(_GetProcAddress('vkCmdBeginRenderPass2KHR'));
        vkCmdNextSubpass2 := TvkCmdNextSubpass2(_GetProcAddress('vkCmdNextSubpass2'));
        vkCmdNextSubpass2KHR := TvkCmdNextSubpass2KHR(_GetProcAddress('vkCmdNextSubpass2KHR'));
        vkCmdEndRenderPass2 := TvkCmdEndRenderPass2(_GetProcAddress('vkCmdEndRenderPass2'));
        vkCmdEndRenderPass2KHR := TvkCmdEndRenderPass2KHR(_GetProcAddress('vkCmdEndRenderPass2KHR'));
        vkGetSemaphoreCounterValue := TvkGetSemaphoreCounterValue(_GetProcAddress('vkGetSemaphoreCounterValue'));
        vkGetSemaphoreCounterValueKHR := TvkGetSemaphoreCounterValueKHR(_GetProcAddress('vkGetSemaphoreCounterValueKHR'));
        vkWaitSemaphores := TvkWaitSemaphores(_GetProcAddress('vkWaitSemaphores'));
        vkWaitSemaphoresKHR := TvkWaitSemaphoresKHR(_GetProcAddress('vkWaitSemaphoresKHR'));
        vkSignalSemaphore := TvkSignalSemaphore(_GetProcAddress('vkSignalSemaphore'));
        vkSignalSemaphoreKHR := TvkSignalSemaphoreKHR(_GetProcAddress('vkSignalSemaphoreKHR'));
       {$ifdef Android}
        vkGetAndroidHardwareBufferPropertiesANDROID := TvkGetAndroidHardwareBufferPropertiesANDROID(_GetProcAddress('vkGetAndroidHardwareBufferPropertiesANDROID'));
       {$endif}
       {$ifdef Android}
        vkGetMemoryAndroidHardwareBufferANDROID := TvkGetMemoryAndroidHardwareBufferANDROID(_GetProcAddress('vkGetMemoryAndroidHardwareBufferANDROID'));
       {$endif}
        vkCmdDrawIndirectCount := TvkCmdDrawIndirectCount(_GetProcAddress('vkCmdDrawIndirectCount'));
        vkCmdDrawIndirectCountKHR := TvkCmdDrawIndirectCountKHR(_GetProcAddress('vkCmdDrawIndirectCountKHR'));
        vkCmdDrawIndirectCountAMD := TvkCmdDrawIndirectCountAMD(_GetProcAddress('vkCmdDrawIndirectCountAMD'));
        vkCmdDrawIndexedIndirectCount := TvkCmdDrawIndexedIndirectCount(_GetProcAddress('vkCmdDrawIndexedIndirectCount'));
        vkCmdDrawIndexedIndirectCountKHR := TvkCmdDrawIndexedIndirectCountKHR(_GetProcAddress('vkCmdDrawIndexedIndirectCountKHR'));
        vkCmdDrawIndexedIndirectCountAMD := TvkCmdDrawIndexedIndirectCountAMD(_GetProcAddress('vkCmdDrawIndexedIndirectCountAMD'));
        vkCmdSetCheckpointNV := TvkCmdSetCheckpointNV(_GetProcAddress('vkCmdSetCheckpointNV'));
        vkGetQueueCheckpointDataNV := TvkGetQueueCheckpointDataNV(_GetProcAddress('vkGetQueueCheckpointDataNV'));
        vkCmdBindTransformFeedbackBuffersEXT := TvkCmdBindTransformFeedbackBuffersEXT(_GetProcAddress('vkCmdBindTransformFeedbackBuffersEXT'));
        vkCmdBeginTransformFeedbackEXT := TvkCmdBeginTransformFeedbackEXT(_GetProcAddress('vkCmdBeginTransformFeedbackEXT'));
        vkCmdEndTransformFeedbackEXT := TvkCmdEndTransformFeedbackEXT(_GetProcAddress('vkCmdEndTransformFeedbackEXT'));
        vkCmdBeginQueryIndexedEXT := TvkCmdBeginQueryIndexedEXT(_GetProcAddress('vkCmdBeginQueryIndexedEXT'));
        vkCmdEndQueryIndexedEXT := TvkCmdEndQueryIndexedEXT(_GetProcAddress('vkCmdEndQueryIndexedEXT'));
        vkCmdDrawIndirectByteCountEXT := TvkCmdDrawIndirectByteCountEXT(_GetProcAddress('vkCmdDrawIndirectByteCountEXT'));
        vkCmdSetExclusiveScissorNV := TvkCmdSetExclusiveScissorNV(_GetProcAddress('vkCmdSetExclusiveScissorNV'));
        vkCmdBindShadingRateImageNV := TvkCmdBindShadingRateImageNV(_GetProcAddress('vkCmdBindShadingRateImageNV'));
    end;
  except
    FreeAndNil(result);
    raise;
  end;
end;

procedure vkAPIFinalize;
begin
  vkFreeLibrary(vkLibHandle);
end;

//============================================================

initialization

finalization
  vkAPIFinalize;

end.
